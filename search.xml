<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AE——自动曝光</title>
    <url>/posts/2366465946/</url>
    <content><![CDATA[<blockquote>
<p>本文旨在从零开始快速、通俗理解AE（自动曝光）原理及其相关知识。</p>
</blockquote>
<h1 id="从色彩说起"><a class="markdownIt-Anchor" href="#从色彩说起"></a> 从色彩说起</h1>
<h2 id="色彩三要素色相-纯度-明度"><a class="markdownIt-Anchor" href="#色彩三要素色相-纯度-明度"></a> 色彩三要素：色相、纯度、明度</h2>
<ul>
<li>色相：即是什么颜色，是区分色彩的最重要特征。如，红色，黄色，天青色等。</li>
<li>纯度：又称饱和度，表示色彩的鲜艳程度，纯度越高，色彩越鲜艳，纯度为0时即为灰度图。</li>
<li>明度：可理解为亮度，色彩明度越高越接近白色，明度越低越接近黑色。</li>
</ul>
<span id="more"></span>
<h2 id="如何定量描述色彩色彩空间"><a class="markdownIt-Anchor" href="#如何定量描述色彩色彩空间"></a> 如何定量描述色彩：色彩空间</h2>
<p>当我们想准确的使用数值表示一种色彩时，最直接想到，可以对上述色彩三要素分别量化然后取值组合在一起。但实际上我们用的是更加准确简洁的描述方式，叫做“色彩空间”：</p>
<ul>
<li>RGB：将颜色用不同亮度的三原色的组合来描述，表示为（Red, Green, Blue)，每一位数值从0~255，越大表示越亮。</li>
<li>YUV：将颜色拆分为明度与色度来描述，这里的色度包括上面提到的色相与饱和度两方面。它相比于RGB的最大优势是节省带宽，便于用于视频传输等。同时将明度分离出来便于单独处理。</li>
</ul>
<p><strong>AE算法在调整的是照片的亮度</strong>，本质上就是色彩的明度。而YUV色彩空间恰好有分离出来的明度，这就为我们的调整提供了极大的便利。</p>
<h1 id="图片亮度"><a class="markdownIt-Anchor" href="#图片亮度"></a> 图片亮度</h1>
<h2 id="曝光量"><a class="markdownIt-Anchor" href="#曝光量"></a> 曝光量</h2>
<p>物体的真实亮度由反射光线的多少决定，非常客观。但照片的亮度呢？这里有一个重要的概念，叫做曝光量。它描述感光原件在曝光时间内接收到光的多少，直接影响成像的亮度。也就是说，物体亮度不变的情况下，传感器的曝光量越大，成像越亮。</p>
<p>曝光量由光圈、快门、ISO三部分组成：</p>
<ul>
<li>光圈：理解为镜头孔径的大小，注意<strong>孔径越小光圈越大</strong>，光圈越大进光量越多，成像越亮。</li>
<li>快门：理解为曝光时间，<strong>快门越慢曝光时间越长</strong>，进光量越多，成像越亮。</li>
<li>ISO：感光度，是一组可调参数，其值越大，成像越亮。</li>
</ul>
<p>对于手机来说受硬件限制大部分光圈都是固定的，快门时间又是用户设置，因此AE算法想要调整感光度就得从ISO下手，调整图片亮度，<strong>让最终成像的亮度呈现一种让我们感到正确、舒适的亮度。</strong></p>
<h1 id="ae自动曝光"><a class="markdownIt-Anchor" href="#ae自动曝光"></a> AE自动曝光</h1>
<p>AE的目标简单理解，就是将成像亮度调整至目标亮度。这两者具体取决于什么呢？</p>
<ul>
<li>成像亮度：取决于<strong>物体亮度</strong>、<strong>ISO</strong>；</li>
<li>目标亮度：取决于<strong>物体亮度</strong>。</li>
</ul>
<p>因此，AE流程可理解为：</p>
<ol>
<li>给一组ISO，从传感器得到成像亮度，可计算出物体亮度；</li>
<li>根据物体亮度计算出目标亮度；</li>
<li>根据成像亮度与目标亮度差值，调整ISO，循环。</li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>给其他用户添加sudo权限</title>
    <url>/posts/4193411573/</url>
    <content><![CDATA[<h1 id="查看sudo权限"><a class="markdownIt-Anchor" href="#查看sudo权限"></a> 查看sudo权限</h1>
<p>查看所有可登陆的用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F: <span class="string">&#x27;$7 ~ /(bash|sh)/ &#123;print $1&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>
<p>查看当前在线的用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">who</span></span><br></pre></td></tr></table></figure>
<p>查看某个用户（如alice）是否有sudo权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">groups</span> alice</span><br></pre></td></tr></table></figure>
<ul>
<li>如果有会显示：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alice : alice <span class="built_in">sudo</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果没有会显示：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alice : alice</span><br></pre></td></tr></table></figure>
<p>接下来给该用户添加sudo权限。</p>
<span id="more"></span>
<h1 id="添加sudo权限"><a class="markdownIt-Anchor" href="#添加sudo权限"></a> 添加sudo权限</h1>
<p>给某个用户添加sudo权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG <span class="built_in">sudo</span> alice</span><br></pre></td></tr></table></figure>
<p>然后让该用户退出登录（必须logout或exit），然后查看其是否在线：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">who</span></span><br></pre></td></tr></table></figure>
<p>确保其断开连接后重新登陆，查看自己的sudo权限是否生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -v</span><br></pre></td></tr></table></figure>
<p>完成。</p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>HAL：CamX-CHI</title>
    <url>/posts/2825630907/</url>
    <content><![CDATA[<blockquote>
<p>转载：<a href="https://blog.csdn.net/ifuleyou1668/article/details/134243186?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22134243186%22%2C%22source%22%3A%22ifuleyou1668%22%7D">Chapter3. [6]Android Camera System: HAL-CamX-CHI</a>，如有侵权联系删除。</p>
</blockquote>
<h1 id="一-概览"><a class="markdownIt-Anchor" href="#一-概览"></a> 一、概览</h1>
<h2 id="11-旧架构回顾qcamera-mm-camera"><a class="markdownIt-Anchor" href="#11-旧架构回顾qcamera-mm-camera"></a> 1.1 旧架构回顾(QCamera &amp; MM-Camera)</h2>
<p>1）回顾高通平台Camera HAL历史，之前高通采用的是QCamera &amp; MM-Camera架构，</p>
<p>2）但是为了更精细化控制底层硬件(Sensor/ISP等关键硬件)，同时方便手机厂商自定义一些功能，现在提出了CamX-<a href="https://so.csdn.net/so/search?q=CHI&amp;spm=1001.2101.3001.7020" title="CHI">CHI</a>架构，由于在CamX-CHI中完全看不到之前老架构的影子，所以它完全是一个全新的架构，</p>
<p>3）它将一些高度统一的功能性接口抽离出来放到CamX中，将可定制化的部分放在CHI中供不同厂商进行修改，实现各自独有的特色功能，这样设计的好处显而易见，那便是即便开发者对于CamX并不是很了解，但是依然可以很方便的加入自定义的功能，从而降低了开发者在高通平台的开发门槛。</p>
<span id="more"></span>
<h2 id="12-camx-chi基本目录结构"><a class="markdownIt-Anchor" href="#12-camx-chi基本目录结构"></a> 1.2 CamX-CHI基本目录结构</h2>
<p>1）接下来我们以最直观的目录结构入手对该架构做一个简单的认识，以下便是CamX-CHI基本目录结构：<br />
<img src="c3081f66e0227664ae7f8b8ab429bdfa.png" alt="" /></p>
<p>该部分代码主要位于 vendor/qcom/proprietary/ 目录下：<br />
2）其中camx 代表了通用功能性接口的代码实现集合（CamX），chi-cdk代表了可定制化需求的代码实现集合（CHI），</p>
<p>3）从图中可以看出Camx部分对上作为HAL3接口的实现，对下通过<a href="https://so.csdn.net/so/search?q=v4l2&amp;spm=1001.2101.3001.7020" title="v4l2">v4l2</a>框架与Kernel保持通讯，中间通过互相dlopen so库并获取对方操作接口的方式保持着与CHI的交互。</p>
<h3 id="121-camx中主要目录"><a class="markdownIt-Anchor" href="#121-camx中主要目录"></a> 1.2.1 camx/中主要目录</h3>
<ol>
<li><code>core/ ： 用于存放camx的核心实现模块，其中还包含了主要用于实现hal3接口的hal/目录，以及负责与CHI进行交互的chi/目录（8650如下）</code><br />
<img src="fb911a9dfc4dd89c7bcc30183743c972.jpeg" alt="" /></li>
<li><code>csl/： 用于存放主要负责camx与camera driver的通讯模块，为camx提供了统一的Camera driver控制接口（8650如下）</code><img src="63e21d376658fd1933222b079d4157d7.jpeg" alt="" /></li>
<li><code>hwl/: 用于存放自身具有独立运算能力的硬件node，该部分node受csl管理（8650如下）</code>    <img src="4470cdc4c16199ced4e4671a033babfb.jpeg" alt="" /></li>
<li><code>swl/: 用于存放自身并不具有独立运算能力，必须依靠CPU才能实现的node（8650如下）</code><br />
<img src="e133d1455b5d6d74089f6d741ca55715.jpeg" alt="" /></li>
</ol>
<h3 id="122-chi-cdk中主要目录"><a class="markdownIt-Anchor" href="#122-chi-cdk中主要目录"></a> 1.2.2 chi-cdk/中主要目录</h3>
<p><img src="3222ef0e8d30277af62193ee2a951b62.png" alt="" /></p>
<h5 id="chi-cdkcore"><a class="markdownIt-Anchor" href="#chi-cdkcore"></a> chi-cdk/core</h5>
<p><img src="76b28ea7dbb093646c7a904240456467.jpeg" alt="" /></p>
<h5 id="chi-cdkoem"><a class="markdownIt-Anchor" href="#chi-cdkoem"></a> chi-cdk/oem</h5>
<p><img src="ba8194930747f3b2d61bd4facaa91010.jpeg" alt="" /></p>
<h6 id="chi-cdkoemmulticamera"><a class="markdownIt-Anchor" href="#chi-cdkoemmulticamera"></a> chi-cdk/oem/multicamera</h6>
<p><img src="261c57e64413186dfb6685901adb2863.jpeg" alt="" /></p>
<h6 id="chi-cdkoemnode"><a class="markdownIt-Anchor" href="#chi-cdkoemnode"></a> chi-cdk/oem/node</h6>
<p><img src="a762d2afb4a6ae4a001b69454344e8cc.jpeg" alt="" /></p>
<p><img src="40b24c8dfceb7a9529421e67358fbfd6.jpeg" alt="" /></p>
<ol>
<li>
<p><code>chioverride/: 用于存放CHI实现的核心模块，负责与camx进行交互并且实现了CHI的总体框架以及具体的业务处理。</code></p>
</li>
<li>
<p><code>bin/: 用于存放平台相关的配置项</code></p>
</li>
<li>
<p><code>topology/: 用于存放用户自定的Usecase xml配置文件</code></p>
</li>
<li>
<p><code>node/: 用于**存放用户自定义功能的node**</code></p>
</li>
<li>
<p><code>module/: 用于存放不同sensor的配置文件，该部分在初始化sensor的时候需要用到</code></p>
</li>
<li>
<p><code>tuning/: 用于存放不同场景下的效果参数的配置文件</code></p>
</li>
<li>
<p><code>sensor/: 用于存放不同sensor的私有信息以及寄存器配置参数</code></p>
</li>
<li>
<p><code>actuator/: 用于存放不同对焦模块的配置信息</code></p>
</li>
<li>
<p><code>ois/： 用于存放防抖模块的配置信息</code></p>
</li>
<li>
<p><code>flash/： 存放着闪光灯模块的配置信息</code></p>
</li>
<li>
<p><code>eeprom/: 存放着eeprom外部存储模块的配置信息</code></p>
</li>
<li>
<p><code>fd/: 存放了人脸识别模块的配置信息</code></p>
</li>
</ol>
<h1 id="二-基本组件概念"><a class="markdownIt-Anchor" href="#二-基本组件概念"></a> 二、基本组件概念</h1>
<h2 id="21-usecase"><a class="markdownIt-Anchor" href="#21-usecase"></a> 2.1. Usecase</h2>
<h3 id="211-概念"><a class="markdownIt-Anchor" href="#211-概念"></a> 2.1.1 概念</h3>
<p>作为CamX-CHI中<strong>最大的抽象概念</strong>，其中包含了多条实现特定功能的Pipeline，具体实现是在CHI中通过Usecase类完成的，该类主要负责了其中的业务处理以及资源的管理。</p>
<h3 id="212-通用接口"><a class="markdownIt-Anchor" href="#212-通用接口"></a> 2.1.2 通用接口</h3>
<p>1）Usecase类，提供了一系列通用接口，作为现有的所有Usecase的基类，</p>
<p>2）其中，AdvancedCameraUsecase又继承于<strong>CameraUsecaseBase</strong>，相机中绝大部分场景会通过实例化AdvancedCameraUsecase来完成，它包括了几个主要接口：</p>
<ol>
<li>
<p><code>Create(): 该方法是静态方法，用于创建一个AdvancedCameraUsecase实例，</code></p>
<ol>
<li><code>在其构造方法中会去获取XML中的相应的Usecase配置信息。</code></li>
</ol>
</li>
<li>
<p><code>ExecuteCaptureRequest(): 该方法用于下发一次Request请求。</code></p>
</li>
<li>
<p><code>ProcessResultCb(): 该方法会在创建Session的过程中，</code></p>
<ol>
<li>
<p><code>作为回调方法注册到其中，一旦Session数据处理完成的时候便会</code></p>
</li>
<li>
<p><code>调用该方法将结果发送到AdvancedCameraUsecase中。</code></p>
</li>
</ol>
</li>
<li>
<p><code>ProcessDriverPartialCaptureResult(): 该方法会在创建Session的过程中，</code></p>
<ol>
<li>
<p><code>作为回调方法注册到其中，一旦Session中产生了partial meta data的时候，</code></p>
</li>
<li>
<p><code>便会调用该方法将其发送至AdvancedCameraUsecase中。</code></p>
</li>
</ol>
</li>
<li>
<p><code>ProcessMessageCb(): 该方法会在创建Session的过程中，作为回调方法注册到其中，</code></p>
<ol>
<li><code>一旦Session产生任何事件，便会调用该方法通知到AdvancedCameraUsecase中。</code></li>
</ol>
</li>
<li>
<p><code>ExecuteFlush(): 该方法用于刷新AdvancedCameraUsecase。</code></p>
</li>
<li>
<p><code>Destroy(): 该方法用于安全销毁AdvancedCameraUsecase。</code></p>
</li>
</ol>
<p>3）Usecase的可定制化部分被抽象出来放在了common_usecase.xml文件中，这里简单介绍其中的几个主要的标签含义：<br />
Usecase</p>
<ol>
<li>
<p><code>UsecaseName: 代表了该Usecase的名字，后期根据这个名字找到这个Usecase的定义。</code></p>
</li>
<li>
<p><strong><code>Targets: 用于表示用于输出的数据流的集合，其中包括了数据流的格式，输出Size的范围等。</code></strong></p>
</li>
<li>
<p><code>Pipeline: 用于定义该Usecase可以是使用的所有Pipeline，这里必须至少定义一条Pipeline。</code></p>
</li>
</ol>
<h2 id="22-feature"><a class="markdownIt-Anchor" href="#22-feature"></a> 2.2. Feature</h2>
<h3 id="221-概念"><a class="markdownIt-Anchor" href="#221-概念"></a> 2.2.1 概念</h3>
<p>1）代表了一个特定的功能，该<strong>功能需要多条Pipeline组合</strong>起来实现，受Usecase统一管理，</p>
<p>2）在CHI中通过Feature类进行实现，在XML中没有对应的定义，具体的Feature选取工作是在Usecase中完成的，通过在创建Feature的时候，传入Usecase的实例的方式，来和Usecase进行相互访问各自的资源。</p>
<p>3）以下是现有的Feature，其中Feature作为基类存在，定义了一系列通用方法。</p>
<p><img src="578782666128dc4ccf6da89c8ab716df.png" alt="" /></p>
<h3 id="222-常用的feature"><a class="markdownIt-Anchor" href="#222-常用的feature"></a> 2.2.2 常用的Feature</h3>
<ol>
<li>
<p><code>FeatureHDR: 用于实现HDR功能，它负责管理内部的一条或者几条pipeline的资源以及它们的流转，</code></p>
<ol>
<li><code>最终输出具有HDR效果的图像。</code></li>
</ol>
</li>
<li>
<p><code>FeatureMFNR: 用于实现MFNR功能，内部分为几个大的流程，分别包括</code></p>
<ol>
<li>
<p><code>Prefiltering、Blending、Postfilter以及最终的OfflineNoiseReproces</code></p>
</li>
<li>
<p><code>(这一个是可选择使能的)，每一个小功能中包含了各自的pipeline。</code></p>
</li>
</ol>
</li>
<li>
<p><code>FeatureASD: 用于AI功能的实现，在预览的时候，接收每一帧数据，</code></p>
<ol>
<li><code>并且进行分析当前场景的AI识别输出结果，并其通过诸如到metadata方式给到上层，进行后续的处理。</code></li>
</ol>
</li>
</ol>
<h2 id="23-session"><a class="markdownIt-Anchor" href="#23-session"></a> 2.3. Session</h2>
<h3 id="231-概念"><a class="markdownIt-Anchor" href="#231-概念"></a> 2.3.1 概念</h3>
<p>1）用于管理pipeline的抽象控制单元，一个Session中至少拥有一个pipeine，并且控制着所有的硬件资源，管控着每一个内部pipeline的request的流转以及数据的输入输出，</p>
<p>2）它没有可定制化的部分，所以在CHI中的XML文件中并没有将Session作为一个独立的单元进行定义。</p>
<p>Camera session是指在移动设备上使用相机进行拍摄或录制视频时，与相机硬件进行交互的过程。在Android系统中，相机session是通过Camera API来实现的。开发者可以通过Camera API来创建相机session，并控制相机的参数，如曝光、白平衡、焦距等。同时，开发者还可以通过Camera API来获取相机的预览画面，并进行图像处理和分析。在相机session中，开发者可以使用不同的模式来进行拍摄或录制，如照片模式、视频模式、慢动作模式等。相机session是移动应用开发中常用的技术之一，被广泛应用于拍照、直播、视频通话等场景。</p>
<h3 id="232-主要接口"><a class="markdownIt-Anchor" href="#232-主要接口"></a> 2.3.2 主要接口</h3>
<p>Session的实现主要通过CamX中的Session类，其主要接口如下：</p>
<ol>
<li>
<p><code>Initialize(): 根据传入的参数SessionCreateData进行Session的初始化工作。</code></p>
</li>
<li>
<p><code>NotifyResult(): 内部的Pipeline通过该接口将结果发送到Session中。</code></p>
</li>
<li>
<p><code>ProcessCaptureRequest(): 该方法用于用户决定发送一个Request到Session中的时候调用。</code></p>
</li>
<li>
<p><code>StreamOn(): 通过传入的Pipeline句柄，开始硬件的数据传输。</code></p>
</li>
<li>
<p><code>StreamOff(): 通过传入的Pipeline句柄，停止硬件的数据传输。</code></p>
</li>
</ol>
<h2 id="24-pipeline"><a class="markdownIt-Anchor" href="#24-pipeline"></a> 2.4. Pipeline</h2>
<h3 id="241-概念"><a class="markdownIt-Anchor" href="#241-概念"></a> 2.4.1 概念</h3>
<p>1）作为提供单一特定功能的所有资源的集合，维护着所有硬件资源以及数据的流转，</p>
<p>2）每一个Pipeline包括了其中的Node/Link，在CamX中通过Pipeline类进行实现，负责整条Pipeline的软硬件资源的维护以及业务逻辑的处理，接下来我们简单看下该类的几个主要接口：</p>
<h3 id="242-主要接口"><a class="markdownIt-Anchor" href="#242-主要接口"></a> 2.4.2 主要接口</h3>
<ol>
<li>
<p><code>Create(): 该方法是一个静态方法，根据传入的PipelineCreateInputData信息来实例化一个Pipeline对象。</code></p>
</li>
<li>
<p><code>StreamOn(): 通知Pipeline开始硬件的数据传输</code></p>
</li>
<li>
<p><code>StreamOff(): 通知Pipeline停止硬件的数据传输</code></p>
</li>
<li>
<p><code>FinalizePipeline(): 用于完成Pipeline的设置工作</code></p>
</li>
<li>
<p><code>OpenRequest(): open一个CSL用于流转的Request</code></p>
</li>
<li>
<p><code>ProcessRequest(): 开始下发Request</code></p>
</li>
<li>
<p><code>NotifyNodeMetadataDone(): 该方法是Pipeline提供给Node，当Node内部生成了metadata,便会调用该方法来通知metadata已经完成，最后当所有Node都通知Pipeline metadata已经完成，Pipeline 便会调用**ProcessMetadataRequestIdDone**通知Session。</code></p>
</li>
<li>
<p><code>NotifyNodePartialMetadataDone(): 该方法是Pipeline提供给Node，当Node内部生成了partial metadata,便会调用该方法来通知metadata已经完成，最后当所有Node都通知Pipeline metadata已经完成，Pipeline 便会调用ProcessPartialMetadataRequestIdDone通知Session。</code></p>
</li>
<li>
<p><code>SinkPortFenceSignaled(): 用来通知Session 某个sink port的**fence**处于被触发的状态。</code></p>
</li>
<li>
<p><code>NonSinkPortFenceSignaled(): 用来通知Session 某个non sink port的fence处于被触发的状态。</code></p>
<ol>
<li><code>Pipeline中的Node以及连接方式都在XML中被定义，其主要包含了以下几个标签定义：</code></li>
</ol>
</li>
<li>
<p><code>PipelineName: 用来定义该条Pipeline的名称</code></p>
</li>
<li>
<p><code>NodeList: 该标签中定义了该条Pipeline的所有的Node</code></p>
</li>
<li>
<p><code>PortLinkages: 该标签定义了Node上不同端口之间的连接关系</code></p>
</li>
</ol>
<p><strong>问题</strong>：fence ？</p>
<p><strong>答案</strong>：Camera fence是指在移动设备上使用相机进行拍摄或录制视频时，为了避免相机被其他应用程序占用而设置的一种机制。在Android系统中，相机fence是通过Camera API来实现的。当一个应用程序需要使用相机时，它需要向系统申请一个相机fence，并等待系统分配一个可用的相机资源。一旦分配成功，该应用程序就可以独占该相机资源，并进行拍摄或录制操作。如果其他应用程序也需要使用相机，则需要等待当前应用程序释放相机资源后才能继续使用。相机fence机制可以保证多个应用程序之间的相机资源不会发生冲突，从而提高了相机的稳定性和可靠性。</p>
<p><strong>问题</strong>：qcom fence ?</p>
<p><strong>答案</strong>：QCOM Camera Fence是高通公司在Android系统中实现的一种相机fence机制。它基于硬件层面的相机控制器，可以提供更高的相机资源管理效率和更好的性能表现。QCOM Camera Fence机制可以支持多个应用程序同时使用相机，并保证它们之间的资源不会发生冲突。同时，QCOM Camera Fence还支持多种相机模式，如照片模式、视频模式、慢动作模式等，可以满足不同应用程序的需求。在使用QCOM Camera Fence时，开发者需要使用特定的API来进行相机资源的申请和释放，以确保相机资源的正确管理和使用。QCOM Camera Fence机制已经被广泛应用于高通公司的移动设备中，并被认为是一种高效、稳定、可靠的相机资源管理方案。</p>
<h2 id="25-node"><a class="markdownIt-Anchor" href="#25-node"></a> 2.5. Node</h2>
<p>1）作为单个具有独立处理功能的抽象模块，可以是硬件单元也可以是软件单元，</p>
<p>2）关于Node的具体实现是CamX中的Node类来完成的，其中CamX-CHI中主要分为两个大类，</p>
<p>一个是高通自己实现的Node包括硬件Node，</p>
<p>一个是CHI中提供给用户进行实现的Node，其主要方法如下：</p>
<ol>
<li>
<p><code>Create(): 该方法是静态方法，用于实例化一个Node对象。</code></p>
</li>
<li>
<p><code>ExecuteProcessRequest(): 该方法用于针对hwl node下发request的操作。</code></p>
</li>
<li>
<p><code>ProcessRequestIdDone(): 一旦该Node当前request已经处理完成，便会通过调用该方法通知Pipeline。</code></p>
</li>
<li>
<p><code>ProcessMetadataDone(): 一旦该Node的当前request的metadata已经生成，便会通过调用该方法通知到Pipeline。</code></p>
</li>
<li>
<p><code>ProcessPartialMetadataDone(): 一旦该Node的当前request的partial metadata已经生成，便会通过调用该方法通知到Pipeline。</code></p>
</li>
<li>
<p><code>CreateImageBufferManager(): 创建ImageBufferManager</code></p>
<ol>
<li><code>其可定制化的部分作为标签在XML中进行定义：</code></li>
</ol>
</li>
<li>
<p><code>NodeName： 用来定义该Node的名称</code></p>
</li>
<li>
<p><code>NodeId: 用来指定该Node的ID，其中IPE NodeId为65538，IFE NodeId为65536，用户自定义的NodeId为255。</code></p>
</li>
<li>
<p><code>NodeInstance: 用于定义该Node的当前实例的名称。</code></p>
</li>
<li>
<p><code>NodeInstanceId: 用于指定该Node实例的Id。</code></p>
</li>
</ol>
<h2 id="26-link"><a class="markdownIt-Anchor" href="#26-link"></a> 2.6. Link</h2>
<p>1）用于定义不同Port的连接，一个Port可以根据需要建立多条与其它从属于不同Node的Port的连接,它通过标签来进行定义，其中包括了作为输入端口，作为输出端口。</p>
<p>2）一个Link中包含了一个SrcPort和一个DstPort，分别代表了输入端口和输出端口，然后BufferProperties用于表示两个端口之间的buffer配置。</p>
<h2 id="27-port"><a class="markdownIt-Anchor" href="#27-port"></a> 2.7. Port</h2>
<p>1）作为Node的输入输出的端口，在XML文件中，标签用来定义一个输入端口，标签用来定义输出端口，</p>
<p>2）每一个Node都可以根据需要使用一个或者多个输入输出端口，使用OutputPort以及InputPort结构体来进行在代码中定义。<br />
Port</p>
<ol>
<li>
<p><code>PortId: 该端口的Id: 该端口的名称</code></p>
</li>
<li>
<p><code>NodeName: 该端口从属的Node名称</code></p>
</li>
<li>
<p><code>NodeId: 该端口从属的Node的Id</code></p>
</li>
<li>
<p><code>NodeInstance: 该端口从属的Node的实例名称</code></p>
</li>
<li>
<p><code>NodeInstanceId: 该端口从属的Node的实例的Id</code></p>
</li>
</ol>
<h1 id="三-组件结构关系"><a class="markdownIt-Anchor" href="#三-组件结构关系"></a> 三、组件结构关系</h1>
<h2 id="31-组件概要"><a class="markdownIt-Anchor" href="#31-组件概要"></a> 3.1 组件概要</h2>
<p>1）通过之前的介绍，我们对于几个基本组件有了一个比较清晰地认识，但是任何一个框架体系并不是仅靠组件胡乱堆砌而成的，相反，它们都必须基于各自的定位，按照各自所独有的行为模式，同时按照约定俗称的一系列规则组合起来，共同完成整个框架某一特定的功能。</p>
<p>2）所以这里不得不产生一个疑问，在该框架中它们到底是如何组织起来的呢？它们之间的关系又是如何的呢？ 接下来我们以下图入手开始进行分析：</p>
<p><img src="9780c6a7d4f390a4f19a613018c3a8fc.png" alt="" /></p>
<h2 id="32-组件关系"><a class="markdownIt-Anchor" href="#32-组件关系"></a> 3.2 组件关系</h2>
<h3 id="321-总体"><a class="markdownIt-Anchor" href="#321-总体"></a> 3.2.1 总体</h3>
<p>由上图可以看到，几者是通过包含关系组合起来的，Usecase 包含Feature，而Feature包含了Session，Session又维护了内部的Pipeline的流转，而每一条pipeline中又通过Link将所有Node都连接了起来，接下我们就这几种关系详细讲解下：</p>
<h3 id="322-细节"><a class="markdownIt-Anchor" href="#322-细节"></a> 3.2.2 细节</h3>
<p>1）首先，一个Usecase代表了某个特定的图像采集场景，比如人像场景，后置拍照场景等等，在初始化的时候通过根据上层传入的一些具体信息来进行创建，这个过程中，一方面实例化了特定的Usecase，这个实例是用来管理整个场景的所有资源，同时也负责了其中的业务处理逻辑，另一方面，获取了定义在XML中的特定Usecase，获取了用于实现某些特定功能的pipeline。</p>
<p>2）其次，在Usecase中，Feature是一个可选项，如果当前用户选择了HDR模式或者需要在Zoom下进行拍照等特殊功能的话，在Usecase创建过程中，便会根据需要创建一个或者多个Feature，一般一个Feature对应着一个特定的功能，如果场景中并不需要任何特定的功能，则也完全可以不使用也不创建任何Feature。</p>
<p>3）然后，每一个Usecase或者Feature都可以包含一个或者多个Session，每一个Session都是直接管理并负责了内部的Pipeline的数据流转，其中每一次的Request都是Usecase或者Featuret通过Session下发到内部的Pipeline进行处理，数据处理完成之后也是通过Session的方法将结果给到CHI中，之后是直接给到上层还是将数据封装下再次下发到另一个Session中进行后处理，这都交由CHI来决定。</p>
<p>4）其中，Session和Pipeline是一对多的关系，通常一个Session只包含了一条Pipeline，用于某个特定图像处理功能的实现，但是也不绝对，比如FeatureMFNR中包含的Session就包括了三条pipeline，又比如后置人像预览，也是用一个Session包含了两条分别用于主副双摄预览的Pipeline，主要是要看当前功能需要的pipeline数量以及它们之间是否存在一定关联。</p>
<p>5）同时，根据上面关于Pipeline的定义，它内部包含了一定数量的Node，并且实现的功能越复杂，所包含的Node也就越多，同时Node之间的连接也就越错综复杂，比如后置人像预览虚化效果的实现就是将拿到的主副双摄的图像通过RTBOfflinePreview这一条Pipeline将两帧图像合成一帧具有虚化效果的图像，从而完成了虚化功能。</p>
<p>6）最后Pipeline中的Node的连接方式是通过XML文件中的Link来进行描述的，每一个Link定义了一个输入端和输出端分别对应着不同Node上面的输入输出端口，通过这种方式就将其中的一个Node的输出端与另外一个Node的输入端，一个一个串联起来，</p>
<p>=》等到图像数据从Pipeline的起始端开始输入的时候，便可以按照这种定义好的轨迹在一个一个Node之间进行流转，而在流转的过程中每经过一个Node都会在内部对数据进行处理，</p>
<p>=》这样等到数据从起始端一直流转到最后一个Node的输出端的时候，数据就经过了很多次处理，这些处理效果最后叠加在一起便是该Pipeline所要实现的功能，比如降噪、虚化等等。</p>
<h1 id="四-关键流程详解"><a class="markdownIt-Anchor" href="#四-关键流程详解"></a> 四、关键流程详解</h1>
<h2 id="41-provider-启动初始化"><a class="markdownIt-Anchor" href="#41-provider-启动初始化"></a> 4.1. Provider 启动初始化</h2>
<p>1）当系统启动的时候，Camera Provider主程序会被运行，在整个程序初始化的过程中会通过获取到的camera_module_t调用其get_number_of_camera接口获取底层支持的camera数量，由于是第一次获取，所以在CamX-CHI中会伴随着很多初始化动作，具体操作见下图：</p>
<p><img src="3ae2104c3f35d82c150e092dceb016d9.png" alt="" /></p>
<p>2）主要流程如下：</p>
<ol>
<li>
<p><code>通过HAL3Module::GetInstance()静态方法实例化了HAL3Module对象，</code></p>
<ol>
<li>
<p><code>在其构造方法里面通过HwEnvironment::GetInstance()静态方法又实例化了HwEnvironment对象，</code></p>
</li>
<li>
<p><code>在其构造方法中，实例化了SettingsManager对象，然后又在它构造方法中通过</code></p>
</li>
<li>
<p><code>OverrideSettingsFile对象获取了位于/vendor/etc/camera/camoverridesettings.txt</code></p>
</li>
<li>
<p><code>文件中的平台相关的配置信息（通过这种Override机制方便平台厂商加入自定义配置），</code></p>
</li>
<li>
<p><code>该配置文件中，可以加入平台特定的配置项，比如可以通过设置multiCameraEnable的值</code></p>
</li>
<li>
<p><code>来表示当前平台是否支持多摄，或者通过设置overrideLogLevels设置项来配置</code></p>
</li>
<li>
<p><code>CamX-CHI部分的Log输出等级等等。</code></p>
</li>
</ol>
</li>
<li>
<p><code>同时在HwEnvironment构造方法中会调用其Initialize方法，在该方法中实例化了CSLModeManager对象，</code></p>
<ol>
<li>
<p><code>并通过CSLModeManager提供的接口，获取了所有底层支持的硬件设备信息，</code></p>
</li>
<li>
<p><code>其中包括了Camera Request Manager、CAPS模块（该驱动模块主要用于CSL获取Camera平台驱动信息，</code></p>
</li>
<li>
<p><code>以及IPE/BPS模块的电源控制,以及Sensor/IPE/Flash等硬件模块，并且通过调用</code></p>
</li>
<li>
<p><code>CSLHwInternalProbeSensorHW方法获取了当前设备安装的Sensor模组信息，</code></p>
</li>
<li>
<p><code>并且将获取的信息暂存起来，等待后续阶段使用，总得来说在HwEnvironment初始化的过程中,</code></p>
</li>
<li>
<p><code>通过探测方法获取了所有底层的硬件驱动模块，并将其信息存储下来供后续阶段使用。</code></p>
</li>
</ol>
</li>
</ol>
<p>3）之后通过调用HwEnvironment对象中的ProbeChiCompoents方法在/vendor/lib64/camera/components路径下找寻各个Node生成的So库，并获取Node提供的标准对外接口，这些Node不但包括CHI部分用户自定义的模块，还包括了CamX部分实现的硬件模块，并最后都将其都存入ExternalComponentInfo对象中，等待后续阶段使用。</p>
<p>4）另外在初始化阶段还有一个比较重要的操作就是CamX 与CHI是<strong>通过互相<a href="https://so.csdn.net/so/search?q=dlopen&amp;spm=1001.2101.3001.7020" title="dlopen">dlopen</a>对方的So库</strong>，获取了对方的入口方法，最后通过彼此的入口方法获取了对方操作方法集合，之后再通过这些操作方法与对方进行通讯，其主要流程见下图：</p>
<p><img src="0e85da7bb9633b150cc148b56e544b33.png" alt="" /></p>
<p>5）从上图不难看出，在HAL3Module构造方法中会去通过dlopen方法加载com.qti.chi.override.so库，并通过dlsym映射出CHI部分的入口方法chi_hal_override_entry，并调用该方法将HAL3Module对像中的成员变量m_ChiAppCallbacks(CHIAppCallbacks)传入CHI中，其中<strong>包含了很多函数指针</strong>，这些函数指针分别对应着CHI部分的操作方法集中的方法，一旦进入到CHI中，就会将CHI本地的操作方法集合中的函数地址依次赋值给m_ChiAppCallbacks，这样<strong>CamX后续就可以通过这个成员变量调用到CHI中方法</strong>，从而保持了与CHI的通讯。</p>
<p>6）同样地，CHI中的ExtensionModule在初始化的时候，其构造方法中也会通过调用dlopen方法加载camera.qcom.so库，并将其入口方法ChiEntry通过dlsym映射出来，之后调用该方法，将g_chiContextOps（ChiContextOps，该结构体中定义了很多指针函数）作为参数传入CamX中，一旦进入CamX中，便会将本地的操作方法地址依次赋值给g_chiContextOps中的每一个函数指针，这样CHI之后就可以通过g_chiContextOps访问到CamX方法。</p>
<h2 id="42-打开相机设备初始化相机设备"><a class="markdownIt-Anchor" href="#42-打开相机设备初始化相机设备"></a> 4.2. 打开相机设备/初始化相机设备</h2>
<p>一旦用户打开了相机应用，App中便会去调用CameraManager的openCamera方法，该方法之后会最终调用到Camera Service中的CameraService::connectDevice方法，</p>
<p>然后通过ICameraDevice::open()这一个HIDL接口通知Provider，然后在Provider内部又通过调用之前获取的camera_module_t中methods的open方法来获取一个Camera 设备，</p>
<p>对应于HAL中的camera3_device_t结构体，紧接着，在Provider中会继续调用获取到的camera3_device_t的initialize方法进行初始化动作。</p>
<p>接下来我们便来详细分析下<strong>CamX-CHI对于open以及initialize的具体实现流程</strong>：</p>
<h3 id="a-open"><a class="markdownIt-Anchor" href="#a-open"></a> a) open</h3>
<p>（1）该方法是camera_module_t的标准方法，主要<strong>用来获取camera3_device_t设备结构体的</strong>，CamX-CHI对其进行了实现，open方法中完成的工作主要有以下几个：</p>
<ol>
<li>
<p><code>将当前camera id传入CHI中进行remap操作，当然这个remap操作逻辑完全是根据CHI中用户需求来的，</code></p>
<ol>
<li><code>用户可以根据自己的需要在CHI中加入自定义remap逻辑。</code></li>
</ol>
</li>
<li>
<p><code>实例化HALDevice对象，其构造函数中调用Initialize方法，</code></p>
<ol>
<li><code>该方法会填充CamX中自定义的Camera3Device结构体。</code></li>
</ol>
</li>
<li>
<p><code>将m_HALCallbacks.process_capture_result指向了本地方法ProcessCaptureResult</code></p>
<ol>
<li>
<p><code>以及m_HALCallbacks.notify_result指向了本地方法Notify</code></p>
</li>
<li>
<p><code>（之后会在配置数据流的过程中，将m_HALCallbacks注册到CHI中， 一旦当CHI数据处理完成之后，</code></p>
</li>
<li>
<p><code>便会通过这两个回调方法将数据或者事件回传给CamX）。</code></p>
</li>
</ol>
</li>
<li>
<p><code>最后将HALDevice 中的Camera3Device成员变量作为返回值给到Provider中的CameraCaptureSession中。</code></p>
</li>
</ol>
<p>（2）Camera3Device 其实重定义了camera3_device_t，</p>
<p>=》其中HwDevice对应于camera3_device_t中的hw_device_t，</p>
<p>=》Camera3DeviceOps对应于camera3_device_ops_t，</p>
<p>而在HALDevice的初始化过程中，会将CamX实现的HAL3接口的结构体g_camera3DeviceOps赋值给Camera3DeviceOps中。</p>
<h3 id="b-initialize"><a class="markdownIt-Anchor" href="#b-initialize"></a> b) initialize</h3>
<p>（1）该方法在调用open后紧接着被调用，主要用于将上层的回调接口传入HAL中，一旦有数据或者事件产生，CamX便会通过这些回调接口将数据或者事件上传至调用者，其内部的实现较为简单。</p>
<p>（2）initialize方法中有两个参数，分别是之前通过open方法获取的camera3_device_t结构体和实现了camera3_callback_ops_t的CameraDevice，</p>
<p>（3）很显然camera3_device_t结构体并不是重点，所以该方法的主要工作是将camera3_callback_ops_t与CamX关联上，一旦数据准备完成便通过这里camera3_callback_ops_t中回调方法将数据回传到Camera Provider中的CameraDevice中，基本流程可以总结为以下几点：</p>
<ol>
<li>
<p><code>实例化了一个Camera3CbOpsRedirect对象并将其加入了g_HAL3Entry.m_cbOpsList队列中，</code></p>
<ol>
<li><code>这样方便之后需要的时候能够顺利拿到该对象。</code></li>
</ol>
</li>
<li>
<p><code>将本地的process_capture_result以及notify方法地址分别赋值给</code></p>
<ol>
<li><code>Camera3CbOpsRedirect.cbOps中的process_capture_result以及notify函数指针。</code></li>
</ol>
</li>
<li>
<p><code>将上层传入的回调方法结构体指针pCamera3CbOpsAPI赋值给Camera3CbOpsRedirect.pCbOpsAPI，</code></p>
<ol>
<li>
<p><code>并将Camera3CbOpsRedirect.cbOps赋值给pCamera3CbOpsAPI，</code></p>
</li>
<li>
<p><code>通过JumpTableHal3的initialize方法将pCamera3CbOpsAPI传给HALDevice中的</code></p>
</li>
<li>
<p><code>m_pCamera3CbOps成员变量，这样HALDevice中的m_pCamera3CbOps就指向了</code></p>
</li>
<li>
<p><code>CamX中本地方法process_capture_result以及notify。</code></p>
</li>
</ol>
</li>
</ol>
<p>（4）经过这样的一番操作之后，</p>
<p>=》一旦CHI有数据传入便会首先进入到本地方法ProcessCaptureResult，</p>
<p>=》然后在该方法中获取到HALDevice的成员变量m_pCamera3CbOps，进而调用m_pCamera3CbOps中的process_capture_result方法，即camxhal3entry.cpp中定义的process_capture_result方法，</p>
<p>=》然后这个方法中会去调用JumpTableHAL3.process_capture_result方法，该方法最终会去调用Camera3CbOpsRedirect.pCbOpsAPI中的process_capture_result方法，</p>
<p>=》这样就调到从Provider传入的回调方法，将数据顺利给到了CameraCaptureSession中。</p>
<h2 id="43-配置相机设备数据流"><a class="markdownIt-Anchor" href="#43-配置相机设备数据流"></a> 4.3. 配置相机设备数据流</h2>
<h3 id="431-配置流程概要"><a class="markdownIt-Anchor" href="#431-配置流程概要"></a> 4.3.1 配置流程概要</h3>
<p>1）在打开相机应用过程中，App在获取并打开相机设备之后，会调用CameraDevice.createCaptureSession来获取CameraDeviceSession，</p>
<p>2）并且通过Camera api v2标准接口，通知Camera Service，调用其CameraDeviceClient.endConfigure方法，在该方法内部又会去通过HIDL接口ICameraDeviceSession::configureStreams_3_4通知Provider开始处理此次配置需求，</p>
<p>3）在Provider内部，会去通过在调用open流程中获取的camera3_device_t结构体的configure_streams方法来将数据流的配置传入CamX-CHI中，</p>
<p>4）之后由CamX-CHI完成对数据流的配置工作，</p>
<h3 id="432-hal3接口-configure_streams的具体实现"><a class="markdownIt-Anchor" href="#432-hal3接口-configure_streams的具体实现"></a> 4.3.2 HAL3接口 configure_streams的具体实现</h3>
<p>接下来我们来详细分析下CamX-CHI对于该标准HAL3接口 configure_streams的具体实现：</p>
<p>配置数据流是整个CamX-CHI流程比较重要的一环，其中主要包括两个阶段：</p>
<ol>
<li>
<p><code>选择UsecaseId</code></p>
</li>
<li>
<p><code>根据选择的UsecaseId创建Usecase</code></p>
</li>
</ol>
<p>接下来我们就这两个阶段分别进行详细介绍:</p>
<h4 id="a-选择usecaseid"><a class="markdownIt-Anchor" href="#a-选择usecaseid"></a> a) 选择UsecaseId</h4>
<p>（1）不同的UsecaseId分别对应的不同的应用场景，该阶段是通过调用UsecaseSelector::GetMatchingUsecase()方法来实现的，</p>
<p>（2）该函数中通过传入的operation_mode、num_streams配置数据流数量以及当前使用的Sensor个数来选择相应的UsecaseId，</p>
<p>（3）比如当numPhysicalCameras值大于1同时配置的数据流数量num_streams大于1时选择的就是UsecaseId::MultiCamera，表示当前采用的是双摄场景。</p>
<h4 id="b-创建usecase"><a class="markdownIt-Anchor" href="#b-创建usecase"></a> b) 创建Usecase</h4>
<p>（1）根据之前选择的UsecaseId，通过UsecaseFactory来创建相应的Usecase，</p>
<p>（2）其中Class Usecase是所有Usecase的基类，其中定义并实现了一些通用接口，CameraUsecaseBase继承于Usecase，并扩展了部分功能。</p>
<p>（3）AdvancedCameraUsecase又继承于CameraUsecaseBase，作为主要负责大部分场景的Usecase实现类，</p>
<p>（4）另外对于多摄场景，现提供了继承于AdvancedCameraUsecase的UsecaseMultiCamera来负责实现。</p>
<p>（5）除了双摄场景，其它大部分场景使用的都是AdvancedCameraUsecase类来管理各项资源的，接下来我们重点梳理下AdvancedCameraUsecase::Create()方法。</p>
<h3 id="432-advancedcamerausecasecreate"><a class="markdownIt-Anchor" href="#432-advancedcamerausecasecreate"></a> 4.3.2 AdvancedCameraUsecase::Create()</h3>
<h4 id="create的几个阶段"><a class="markdownIt-Anchor" href="#create的几个阶段"></a> Create的几个阶段</h4>
<p>（1）在AdvancedCameraUsecase::Create方法中做了很多初始化操作，其中包括了以下几个阶段：</p>
<ol>
<li>
<p><code>获取XML文件中Usecase配置信息</code></p>
</li>
<li>
<p><code>创建Feature</code></p>
</li>
<li>
<p><code>保存数据流，重建Usecase的配置信息</code></p>
</li>
<li>
<p><code>调用父类CameraUsecaseBase的initialize方法，进行一些常规初始化工作</code></p>
</li>
</ol>
<p>接下来我们就这几个阶段逐一进行分析：</p>
<h4 id="1-获取xml文件中usecase配置信息"><a class="markdownIt-Anchor" href="#1-获取xml文件中usecase配置信息"></a> <strong>1. 获取XML文件中Usecase配置信息</strong></h4>
<p>1）这一部分主要通过调用CameraUsecaseBase::GetXMLUsecaseByName方法进行实现。<br />
2）该方法的主要操作是从PerNumTargetUsecases数组中找到匹配到给定的usecaseName的Usecase，并作为返回值返回给调用者，</p>
<p>3）其中这里我们以&quot;UsecaseZSL“为例进行分析，PerNumTargetUsecases的定义是在g_pipeline.h中，该文件是在编译过程中通过usecaseconverter.pl脚本将定义在个平台目录下的common_usecase.xml中的内容转换生成g_pipeline.h。</p>
<h4 id="2-创建feature"><a class="markdownIt-Anchor" href="#2-创建feature"></a> <strong>2. 创建Feature</strong></h4>
<p>1）如果当前场景选取了Feature，则调用FeatureSetup来完成创建工作。<br />
2）该方法主要是通过诸如operation_mode、camera数量以及UsecaseId等信息来决定需要选择哪些Feature,具体逻辑比较清晰，一旦决定需要使用哪一个Feature之后，便调用相应的Feature的Create()方法进行初始化操作。</p>
<h4 id="3-保存数据流重建usecase的配置信息"><a class="markdownIt-Anchor" href="#3-保存数据流重建usecase的配置信息"></a> <strong>3. 保存数据流，重建Usecase的配置信息</strong></h4>
<p>1）从Camera Service 传入的<strong>数据流</strong>，需要将其存储下来，供后续使用，</p>
<p>2）同时高通针对Usecase也加入了Override机制，根据需要可以选择性地扩展Usecase，这两个步骤的实现主要是通过SelectUsecaseConfig方法来实现。</p>
<p>3）其中主要是调用以下两个方法来实现的：</p>
<ol>
<li>
<p><code>ConfigureStream： 该方法将从上层配置的数据流指针存入AdvancedCameraUsecase中，</code></p>
<ol>
<li><code>其中包括了用于预览的m_pPreviewStream以及用于拍照的m_pSnapshotStream。</code></li>
</ol>
</li>
<li>
<p><code>BuildUsecase： 这个方法用来重新在原有的Usecase上面加入了Feature中所需要的pipeline，</code></p>
<ol>
<li>
<p><code>并创建了一个新的Usecase，并将其存入AdvancedCameraUsecase中的m_pChiUsecase成员变量中，</code></p>
</li>
<li>
<p><code>紧接着通过SetPipelineToSessionMapping方法将pipeline与Session进行关联。</code></p>
</li>
</ol>
</li>
</ol>
<h4 id="4-调用父类camerausecasebase的initialize方法进行一些常规初始化工作"><a class="markdownIt-Anchor" href="#4-调用父类camerausecasebase的initialize方法进行一些常规初始化工作"></a> <strong>4. 调用父类CameraUsecaseBase的initialize方法，进行一些常规初始化工作</strong></h4>
<p>该方法中的操作主要有以下三个：</p>
<ol>
<li>
<p><code>设置Session回调</code></p>
</li>
<li>
<p><code>创建Pipeline</code></p>
</li>
<li>
<p><code>创建Session</code></p>
</li>
</ol>
<p><strong>（1）设置Session回调</strong></p>
<p>该方法有两个参数，第二个是缺省的，第一个是ChiCallBacks，该参数是作为创建的每一条Session的回调方法，当Session中的pipeline全部跑完之后，会回调该方法将数据投递到CHI中。</p>
<p><strong>（2）创建Pipeline</strong><br />
根据之前获取的pipeline信息开始创建每一条pipeline，通过调用CreatePipeline()方法实现。</p>
<p><strong>（3）创建Session</strong><br />
创建Session，通过CreateSession()方法实现，此时会将AdvancedCameraUsecase端的回调函数注册到Session中，一旦Session中数据处理完成，便会调用回调将数据回传给AdvancedCameraUsecase。</p>
<h4 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h4>
<p>综上，整个configure_stream过程，基本可以概括为以下几点：</p>
<ol>
<li><code>根据operation_mode、camera 个数以及stream的配置信息选取了对应的UsecaseId</code>；</li>
<li><code>根据所选取的UsecaseId，使用UsecaseFactory简单工厂类创建了用于管理整个场景下所有资源的AdvancedCameraUsecase对象。</code></li>
<li><code>创建AdvancedCameraUsecase对象是通过调用其Create()方法完成，该方法中获取了common_usecase.xml定义的关于Usecase的配置信息，之后又根据需要创建了Feature并选取了Feature所需的pipeline，并通过Override机制将Feature中所需要的Pipeline加入重建后的Usecase中。</code></li>
<li><code>最后通过调用CameraUsecaseBaese的initialize方法依次创建了各个pipeline以及Session。并且将AdvancedCameraUsecase的成员方法注册到Session，用于Session将数据返回给Usecase中。</code></li>
</ol>
<h2 id="44-处理拍照请求"><a class="markdownIt-Anchor" href="#44-处理拍照请求"></a> 4.4. 处理拍照请求</h2>
<h3 id="441-流程概要"><a class="markdownIt-Anchor" href="#441-流程概要"></a> 4.4.1 流程概要</h3>
<p>（1）当用户打开相机应用进行预览或者点击一次拍照操作的时候，便触发了一次拍照请求，</p>
<p>（2）该动作首先通过CameraDeviceSession的capture或者setRepeatingRequest方法将请求通过Camera api v2接口下发到Camera Service中，</p>
<p>（3）然后在Camera Service内部将此次请求发送到CameraDevice::RequestThread线程中进行处理，一旦进入到该线程之后，便会最终通过HIDL接口ICameraCaptureSession:processCaptureRequest_3_4将请求发送至Provider中，</p>
<p>（4）之后当Provider收到请求之后，会调用camera3_device_t结构体的process_capture_request开始了HAL针对此次Request的处理，</p>
<p>（5）而该处理是由CamX-CHI来负责实现，</p>
<h3 id="442-camx-chi-实现方法"><a class="markdownIt-Anchor" href="#442-camx-chi-实现方法"></a> 4.4.2 Camx-CHI 实现方法</h3>
<h4 id="a-camx-chi-capture-request流转概览"><a class="markdownIt-Anchor" href="#a-camx-chi-capture-request流转概览"></a> A. CamX-CHI Capture request流转概览</h4>
<p>现在我们就来看下CamX-CHI是如何实现该方法的：</p>
<p>（1）首先CamX中会将此次request转发到HALDevice中，</p>
<p>（2）再通过HALDevice对象调用之前初始化的时候获取的CHI部分的回调接口m_ChiAppCallbacks.chi_override_process_request方法（chi_override_process_request方法的定义位于chxextensioninterface.cpp中）将request发送到CHI部分。</p>
<p>（3）在chi_override_process_request方法中会去获取ExtensionModule对象，并将request发送到ExtensionModule对象中，</p>
<p>（4）该对象中存储了之前创建的Usecase对象，然后经过层层调用，最终会调用AdvancedCameraUsecase的ExecuteCaptureRequest方法，该方法负责处理此次Request，具体流程如下：</p>
<p>在AdvancedCameraUsecase的ExecuteCaptureRequest中会有两个主要的分支来分别处理：</p>
<ol>
<li>
<p><code>如果当前并没有任何Feature需要实现，此时便会走默认流程，根据上面的流程图所示，</code></p>
<ol>
<li>
<p><code>这里会调用CameraUsecaseBase::ExecuteCaptureRequest方法，在该方法中，</code></p>
</li>
<li>
<p><code>首先会将request取出，重新封装成CHICAPTUREREQUEST，</code></p>
</li>
<li>
<p><code>然后调用CheckAndActivatePipeline方法唤醒pipeline,</code></p>
</li>
<li>
<p><code>这一操作到最后会调到Session的StreamOn方法，在唤醒了pipeline之后，继续往下执行，</code></p>
</li>
<li>
<p><code>再将封装后的Request发送到CamX中，最终调用到相应的Session::ProcessCaptureRequest方法，</code></p>
</li>
<li>
<p><code>此时Request就进入到了Session内部进行流转了。</code></p>
</li>
</ol>
</li>
<li>
<p><code>如果当前场景需要实现某个Feature，则直接调用Feature的ExecuteProcessRequest方法</code></p>
<ol>
<li>
<p><code>将此次request送入Feature中处理，最后依然会调用到Session::StreamOn</code></p>
</li>
<li>
<p><code>以及Session::ProcessCaptureRequest方法来分别完成唤醒pipeline</code></p>
</li>
<li>
<p><code>以及下发request的到Session的操作。</code></p>
</li>
</ol>
</li>
</ol>
<h4 id="b-两个比较关键的方法"><a class="markdownIt-Anchor" href="#b-两个比较关键的方法"></a> B. 两个比较关键的方法</h4>
<p>该流程最终都会调用到两个比较关键的方法Session::StreamOn以及Session::ProcessCaptureRequest，接下来针对这两个方法重点介绍下：</p>
<h5 id="sessionstreamon"><a class="markdownIt-Anchor" href="#sessionstreamon"></a> Session::StreamOn</h5>
<p>（1）从方法名称基本可以知道该方法主要用于开始硬件的数据输出，具体点儿就是进行配置Sensor寄存器，让其开始出图，</p>
<p>（2）并且将当前的Session的状态告知每一Node，让它们在自己内部也做好处理数据的准备，</p>
<p>（3）所以之后的相关Request的流转都是以该方法为前提进行的，所以该方法重要性可见一斑，其操作流程见下图：</p>
<p>Session的StreamOn方法中主要做了如下两个工作：</p>
<ol>
<li>
<p><code>调用FinalizeDeferPipeline()方法，如果当前pipeline并未初始化，则会调用pipeline的FinalizePipeline方法，这里方法里面会去针对每一个从属于当前pipeline的Node依次做FinalizeInitialization、CreateBufferManager、NotifyPipelineCreated以及PrepareNodeStreamOn操作，FinalizeInitialization用于完成Node的初始化动作，NotifyPipelineCreated用于通知Node当前Pipeline的状态，此时Node内部可以根据自身的需要作相应的操作，PrepareNodeStreamOn方法的主要是完成Sensor以及IFE等Node的控制硬件模块出图前的配置，其中包括了曝光的参数的设置，CreateBufferManagers方法涉及到CamX-CHI中的一个非常重要的Buffer管理机制，用于Node的ImageBufferManager的创建，而该类用于管理Node中的output port的buffer申请/流转/释放等操作。</code></p>
</li>
<li>
<p><code>调用Pipeline的StreamOn方法，里面会进一步通知CSL部分开启数据流，并且调用每一个Node的OnNodeStreamOn方法，该方法会去调用ImageBufferManager的Activate(),该方法里面会去真正分配用于装载图像数据的buffer，之后会去调用CHI部分实现的用户自定义的Node的pOnStreamOn方法，用户可以在该方法中做一些自定义的操作。</code></p>
</li>
</ol>
<h5 id="sessionprocesscapturerequest"><a class="markdownIt-Anchor" href="#sessionprocesscapturerequest"></a> Session::ProcessCaptureRequest</h5>
<p>（1）针对每一次的Request的流转，都是以该方法为入口开始的，具体流程见下图：<br />
<img src="40bd4a7ea1f66f2fce93e9f4a6432a9b.png" alt="" /><br />
（2）上述流程可以总结为以下几个步骤：</p>
<ol>
<li>
<p><code>通过调用Session的ProcessCaptureRequest方法进入到Session，然后调用Pipeline中的</code></p>
<ol>
<li><code>ProcessRequest方法通知Pipeline开始处理此次Request。</code></li>
</ol>
</li>
<li>
<p><code>在Pipeline中，会先去调用内部的每一个Node的SetupRequest方法分别设置该Node的Output Port</code></p>
<ol>
<li>
<p><code>以及Input Port，之后通过调用**DRQ(DeferredRequestQueue)**的AddDeferredNode方法将所有的``Node加入到DRQ中，其中DRQ中有两个队列分别是用于保存没有依赖项的Node的m_readyNodes``以及保存处于等待依赖关系满足的Node的m_deferredNodes，</code></p>
</li>
<li>
<p><code>当调用DRQ的DispatchReadyNodes方法后，``会开始从m_readyNodes队列中取出Node调用其ProcessRequest开始进入Node内部处理本次request，</code></p>
</li>
<li>
<p><code>在处理过程中会更新meta data数据，并更新至DRQ中，当该Node处理完成之后，``会将处于m_deferredNodes中的已无依赖关系的Node移到m_readyNodes中，</code></p>
</li>
<li>
<p><code>并再次调用DispatchReadyNodes方法从m_readyNodes取出Node进行处理。</code></p>
</li>
</ol>
</li>
<li>
<p><code>与此过程中，当Node的数据处理完成之后会通过CSLFenceCallback通知到Pipeline，</code></p>
<ol>
<li>
<p><code>此时Pipeline会判断当前Node的Output port 是否是Sink Port(输出到CHI)，</code></p>
</li>
<li>
<p><code>如果不是，则会更新依赖项到DRQ中，并且将不存在依赖项的Node移到m_readyNodes队列中，然后调用DispatchReadyNdoes继续进入到DRQ中流转，</code></p>
</li>
<li>
<p><code>如果是Sink Port，则表示此Node是整个Pipeline的最末端，调用sinkPortFenceSignaled将数据给到Session中，</code></p>
</li>
<li>
<p><code>最后通过调用Session中的NotifyResult将结果发送到CHI中。</code></p>
</li>
</ol>
</li>
</ol>
<h5 id="deferredrequestqueue"><a class="markdownIt-Anchor" href="#deferredrequestqueue"></a> DeferredRequestQueue</h5>
<p>上述流程里面中涉及到DeferredRequestQueue这个概念，这里简单介绍下：</p>
<h6 id="1-作用"><a class="markdownIt-Anchor" href="#1-作用"></a> 1. 作用</h6>
<p>DeferredRequestQueue继承于IPropertyPoolObserver，实现了OnPropertyUpdate/OnMetadataUpdate/OnPropertyFailure/OnMetadataFailure接口，这几个接口用于接收Meta Data以及Property的更新，Deferred的中文翻译是“延迟的”，通常用于描述异步编程中的回调函数。在异步编程中，Deferred对象表示一个异步操作的结果，它可以包含一个成功的结果、一个失败的异常或者一个被取消的状态。当异步操作完成后，Twisted会将结果传递给Deferred对象的回调函数进行处理。因此，Deferred可以被理解为“延迟的”回调函数，它可以在异步操作完成后被调用，从而实现异步编程的效果。（延迟、依赖）</p>
<h6 id="2-方法"><a class="markdownIt-Anchor" href="#2-方法"></a> 2. 方法</h6>
<p>另外，DRQ主要包含了以下几个主要方法:</p>
<ol>
<li>
<p><code>Create()</code></p>
<ol>
<li>
<p><code>该方法用于创建DRQ，其中创建了用于存储依赖信息的m_pDependencyMap，</code></p>
</li>
<li>
<p><code>并将自己注册到MetadataPool中，一旦有meta data或者property更新便会通过类中实现的几个接口通知到DRQ。</code></p>
</li>
</ol>
</li>
<li>
<p><code>DispatchReadyNodes()</code></p>
<ol>
<li><code>该方法主要用于将处于m_readyNodes队列的Node取出，将其投递到m_hDeferredWorker线程中进行处理。</code></li>
</ol>
</li>
<li>
<p><code>AddDeferredNode()</code></p>
<ol>
<li><code>该方法主要用于添加依赖项到m_pDependencyMap中。</code></li>
</ol>
</li>
<li>
<p><code>FenceSignaledCallback()</code></p>
<ol>
<li>
<p><code>当Node内部针对某次request处理完成之后，会通过一系列回调通知到DRQ，而其调用的方法便是该方法，</code></p>
</li>
<li>
<p><code>在该方法中，会首先调用UpdateDependency更新依赖项，</code></p>
</li>
<li>
<p><code>然后调用DispatchReadyNodes触发开始对处于ready状态的Node开始进行处理</code></p>
</li>
</ol>
</li>
<li>
<p><code>OnPropertyUpdate()</code></p>
<ol>
<li>
<p><code>该方法是定义于IPropertyPoolObserver接口，DRQ实现了它，主要用于接收Property更新的通知，</code></p>
</li>
<li>
<p><code>并在内部调用UpdateDependency更新依赖项。</code></p>
</li>
</ol>
</li>
<li>
<p><code>OnMetadataUpdate()</code></p>
<ol>
<li>
<p><code>该方法是定义于IPropertyPoolObserver接口，DRQ实现了它，主要用于接收Meta data更新的通知，</code></p>
</li>
<li>
<p><code>并在内部调用UpdateDependency更新依赖项。</code></p>
</li>
</ol>
</li>
<li>
<p><code>UpdateDependency()</code></p>
<ol>
<li>
<p><code>该方法用于更新Node的依赖项信息，并且将没有依赖的Node从m_deferredNodes队列中</code></p>
</li>
<li>
<p><code>移到m_readyNodes，这样该Node就可以在之后的某次DispatchReadyNodes调用之后投入运行。</code></p>
</li>
</ol>
</li>
<li>
<p><code>DeferredWorkerWrapper()</code></p>
<ol>
<li>
<p><code>该方法是m_hDeferredWorker线程的处理函数，主要用于处理需要下发request的Node，</code></p>
</li>
<li>
<p><code>同时再次更新依赖项，最后会再次调用DispatchReadyNodes开始处理。</code></p>
</li>
</ol>
</li>
</ol>
<h6 id="3-流程"><a class="markdownIt-Anchor" href="#3-流程"></a> 3. 流程</h6>
<p>其中需要注意的是，Pipeline首次针对每一个Node通过调用AddDeferredNode方法加入到DRQ中，此时所有的Node都会加入到m_readyNodes中，然后通过调用dispatchReadyNodes方法，触发DRQ开始进行整个内部处理流程，基本流程可以参见下图，接下来就以该图进行深入梳理下：</p>
<ol>
<li>
<p><code>当调用了DRQ的dispatchReadyNodes方法后，会从m_readyNodes链表里面依次取出Dependency，</code></p>
<ol>
<li>
<p><code>将其投递到DeferredWorkerWrapper线程中，在该线程会从Dependency取出Node调用</code></p>
</li>
<li>
<p><code>其ProcessRequest方法开始在Node内部处理本次request，处理完成之后如果当前Node依然存在依赖项，</code></p>
</li>
<li>
<p><code>则调用AddDeferredNode方法将Node再次加入到m_deferredNodes链表中，</code></p>
</li>
<li>
<p><code>并且加入新的依赖项，存入m_pDependencyMap hash表中。</code></p>
</li>
</ol>
</li>
<li>
<p><code>在Node处理request的过程中，会持续更新meta data以及property，</code></p>
<ol>
<li>
<p><code>此时会通过调用MetadataSlot的PublishMetadata方法更新到MetadataPool中，</code></p>
</li>
<li>
<p><code>此时MetadataPool会调用之前在DRQ初始化时候注册的几个回调方法OnPropertyUpdate</code></p>
</li>
<li>
<p><code>以及OnMetadataUpdate方法通知DRQ，此时有新的meta data 和property更新，</code></p>
</li>
<li>
<p><code>接下来会在这两个方法中调用UpdateDependency方法，去更新meta data</code></p>
</li>
<li>
<p><code>和property到m_pDependencyMap中，并且将没有任何依赖项的Node从m_deferredNodes</code></p>
</li>
<li>
<p><code>取出加入到m_readyNodes，等待处理。</code></p>
</li>
</ol>
</li>
<li>
<p><code>与此同时，Node的处理结果也会通过ProcessFenceCallback方法通知pipeline，</code></p>
<ol>
<li>
<p><code>并且调用pipeline的NonSinkPortFenceSignaled方法，在该方法内部又会去</code></p>
</li>
<li>
<p><code>调用DRQ的FenceSignaledCallback方法，而该方法又会调用UpdateDependency更新依赖，</code></p>
</li>
<li>
<p><code>并将依赖项都满足的Node从m_deferredNodes取出加入到m_readyNodes，</code></p>
</li>
<li>
<p><code>然后调用dispatchReadyNodes继续进行处理。</code></p>
</li>
</ol>
</li>
</ol>
<h2 id="45-上传拍照结果"><a class="markdownIt-Anchor" href="#45-上传拍照结果"></a> 4.5. 上传拍照结果</h2>
<h3 id="451-流程概要"><a class="markdownIt-Anchor" href="#451-流程概要"></a> 4.5.1 流程概要</h3>
<p>（1）在用户开启了相机应用，相机框架收到某次Request请求之后会开始对其进行处理，</p>
<p>（2）一旦有图像数据产生便会通过层层回调最终返回到应用层进行显示，这里我们针对CamX-CHI部分对于拍照结果的上传流程进行一个简单的梳理：</p>
<h3 id="452-result上传过程"><a class="markdownIt-Anchor" href="#452-result上传过程"></a> 4.5.2 Result上传过程</h3>
<p>每一个Request对应了三个Result，分别是partial metadata、metadata以及image data，对于每一个Result，上传过程可以大致分为以下两个阶段：</p>
<ol>
<li>
<p><code>Session内部完成图像数据的处理，将结果发送至Usecase中</code></p>
</li>
<li>
<p><code>Usecase接收到来自Session的数据，并将其上传至Provider</code></p>
</li>
</ol>
<h4 id="a-session-usecase流程"><a class="markdownIt-Anchor" href="#a-session-usecase流程"></a> <code>A. Session-&gt;Usecase流程</code></h4>
<p>（1）首先来看下Session内部完成图像数据的处理后是如何将结果发送至Usecase的：</p>
<p><img src="c599adda3c9c902547a2b4e129434f89.png" alt="" /></p>
<p><strong>Partial Meta Data</strong></p>
<p>（2）在整个requets流转的过程中，一旦Node中有P<strong>artial Meta Data</strong>产生，便会调用Node的ProcessPartialMetadataDone方法去通知从属的Pipeline，其内部又调用了pipeline的NotifyNodePartialMetadataDone方法。</p>
<p>（3）每次调用Pipeline的NotifyNodePartialMetadataDone方法都会去将pPerRequestInfo→numNodesPartialMetadataDone加一并且判断当前值是否等于pipeline中的Node数量，一旦相等，便说明当前所有的Node都完成了partial meta data的更新动作，</p>
<p>（4）此时，便会调用ProcessPartialMetadataRequestIdDone方法，里面会去取出partial meta data，并且重新封装成ResultsData结构体，将其作为参数通过Session的NotifyResult方法传入Session中，</p>
<p>（5）之后在Session中经过层层调用最终会调用到内部成员变量m_chiCallBacks的ChiProcessPartialCaptureResult方法，该方法正是创建Session的时候，传入Session中的Usecase的方法（AdvancedCameraUsecase::ProcessDriverPartialCaptureResultCb），通过该方法就将meta data返回到了CHI中。</p>
<p><strong>Meta data的逻辑</strong></p>
<p>（6）同样地，<strong>Meta data的逻辑</strong>和Partial Meta Data很相似，每个Node在处理request的过程中，会调用ProcessMetadataDone方法将数据发送到Pipeline中，</p>
<p>（7）一旦所有的Node的meta data否发送完成了，pipeline会调用NotifyNodeMetadataDone方法，将最终的结果发送至Session中，</p>
<p>（8）最后经过层层调用，会调用Session 中成员变量m_chiCallBacks的ChiProcessCaptureResult方法，将结果发送到CHI中Usecase中。</p>
<p><strong>图像数据的流转和前两个meta data的流转差异</strong></p>
<p>（9）图像数据的流转和前两个meta data的流转有点儿差异，一旦Node内部图像数据处理完成后便会调用其ProcessFenceCallback方法，</p>
<p>（10）在该方法中会去检查当前输出是否是SInk Buffer，如果是则会调用Pipeline的SinkPortFenceSignaled方法将数据发送到Pipeline中，</p>
<p>（11）在该方法中Pipeline又会将数据发送至Session中，最后经过层层调用，会调用Session 中成员变量m_chiCallBacks的<strong>ChiProcessCaptureResult</strong>方法，将结果发送到CHI中Usecase中。</p>
<h4 id="b-usecase-provider流程"><a class="markdownIt-Anchor" href="#b-usecase-provider流程"></a> <code>B. Usecase-&gt;Provider流程</code></h4>
<p>接下来我们来看下一旦Usecase接收到Session的数据，是如何发送至Provider的：</p>
<p>我们以常用的AdvancedCameraUsecase为例进行代码的梳理：</p>
<p><img src="750660c6efe80094bc69a4a384248641.png" alt="" /></p>
<p>如上图所示，整个result的流转逻辑还是比较清晰的，CamX通过回调方法将结果回传给CHI中，而在CHI中，</p>
<p>（1）首先判断是否需要发送到具体的Feature的， 如果需要，则调用相应Feature的ProcessDriverPartialCaptureResult或者ProcessResult方法将结果发送到具体的Feature中，</p>
<p>（2）一旦处理完成，便会调用调用CameraUsecaseBase的ProcessAndReturnPartialMetadataFinishedResults以及ProcessAndReturnFinishedResults方法将结果发送到Usecase中，</p>
<p>（3）如果当前不需要发送到Feature进行处理，就在AdvancedCameraUsecase中调用CameraUsecaseBase的SessionCbPartialCaptureResult以及SessionCbCaptureResult方法，</p>
<p>（4）然后通过Usecase::ReturnFrameResult方法将结果发送到ExtensionModule中，</p>
<p>（5）之后调用ExtensionModule中存储的CamX中的回调函数process_capture_result将结果发送到CamX中的HALDevice中，</p>
<p>（6）之后HALDevice又通过之前存储的上层传入的回调方法，将结果最终发送到CameraDeviceSession中。</p>
<h1 id="五-总结"><a class="markdownIt-Anchor" href="#五-总结"></a> 五、总结</h1>
<p>（1）通过以上的梳理，可以发现，整个CamX-CHI框架设计的很不错，目录结构清晰明确，框架简单高效，流程控制逻辑分明，</p>
<p>（2）比如针对某一图像请求，整个流程经过Usecase、Feature、Session、Pipeline并且给到具体的Node中进行处理，最终输出结果。</p>
<p>（3）另外，相比较之前的QCamera &amp; Mm-Camera框架的针对某个算法的扩展需要在整个流程代码中嵌入自定义的修改做法而言，CamX-CHI通过将自定义实现的放入CHI中，提高了其扩展性，降低了开发门槛，使得平台厂商在并不是很熟悉CamX框架的情况下也可以通过小规模的修改成功添加新功能。</p>
<p>（4）但是人无完人，框架也是一样，该框架异步化处理太多，加大了定位问题以及解决问题的难度，给开发者带来了不小的压力</p>
<p>（5）另外，框架对于内存的要求较高，所以在一些低端机型尤其是低内存机型上，整个框架的运行效率可能会受到一定的限制，进而导致相机效率低于预期。</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统设置vnc开机自启</title>
    <url>/posts/3274646838/</url>
    <content><![CDATA[<blockquote>
<p>转自：<a href="https://blog.csdn.net/Auspicious_air/article/details/108621386">csdn</a></p>
</blockquote>
<p><strong>1、安装tigervnc服务器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y tigervnc-server</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>2、启动vncserver</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vncserver</span><br></pre></td></tr></table></figure>
<p>命令输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You will require a password to access your desktops.</span><br><span class="line"> </span><br><span class="line">Password:</span><br><span class="line">Verify:</span><br><span class="line">Would you like to enter a view-only password (y/n)? n</span><br><span class="line">A view-only password is not used</span><br><span class="line"> </span><br><span class="line">New &#x27;hdp1:1 (root)&#x27; desktop is hdp1:1</span><br><span class="line"> </span><br><span class="line">Creating default startup script /root/.vnc/xstartup</span><br><span class="line">Creating default config /root/.vnc/config</span><br><span class="line">Starting applications specified in /root/.vnc/xstartup</span><br><span class="line">Log file is /root/.vnc/hdp1:1.log</span><br></pre></td></tr></table></figure>
<p>首次启动vncserver时提示输入设置远程连接密码，可以不同于本地密码，该密码以后可以使用vncpasswd命令重置。注意当出现 Would you like to enter a view-only password (y/n)? 提示时输入n。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看vncserver进程列表</span><br><span class="line">vncserver -list</span><br></pre></td></tr></table></figure>
<p>命令输出如下，显示当前启动了一个VNC服务器进程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TigerVNC server sessions:</span><br><span class="line"> </span><br><span class="line">X DISPLAY #    PROCESS ID</span><br><span class="line">:1        2431</span><br></pre></td></tr></table></figure>
<p><strong>3、设置自动启动的vncserver服务</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line"></span><br><span class="line">su - root -c &quot;/usr/bin/vncserver&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>RTOS学习笔记</title>
    <url>/posts/1933280306/</url>
    <content><![CDATA[<h1 id="rtos介绍"><a class="markdownIt-Anchor" href="#rtos介绍"></a> RTOS介绍</h1>
<h2 id="什么是rtos"><a class="markdownIt-Anchor" href="#什么是rtos"></a> 什么是RTOS？</h2>
<p>RTOS(<strong>Real-Time Operating System</strong>)，实时操作系统。实时性是其最大特征，实时操作系统中都要包含一个<strong>实时任务调度器</strong>，这个任务调度器与其它操作系统的最大不同是强调：严格按照<strong>优先级</strong>来分配CPU时间，并且时间片轮转<strong>不是</strong>实时调度器的一个必选项。<br />
系统设计时所有的事件都可以在指定的时间内得到响应（时间确定性）。<br />
具有<strong>及时响应</strong>和<strong>高可靠性</strong>是RTOS的重要特征。</p>
<h2 id="rtos与普通操作系统的区别"><a class="markdownIt-Anchor" href="#rtos与普通操作系统的区别"></a> RTOS与普通操作系统的区别？</h2>
<p>RTOS从调度器算法，到中断响应系统，到消息传递机制等所有的核心算法<strong>时间复杂度都是O(1)</strong>，它表示系统的响应速度不依赖于系统任务的多少，负载的轻重，而只依赖于优先级的设计，就算当前系统满负荷运行，优先级高的事件发生后，系统仍将在指定的时间内立即响应事件。<br />
而分时操作系统（如常见的Windows，Linux等）在负载严重的情况下不能保证事件的响应时间为确定值。<br />
实时操作系统强调高优先级任务的及时响应，而分时操作系统则关心系统易用性、任务吞吐量等。</p>
<h2 id="什么是硬实时什么是软实时"><a class="markdownIt-Anchor" href="#什么是硬实时什么是软实时"></a> 什么是硬实时，什么是软实时？</h2>
<p>通俗来讲：</p>
<ul>
<li>硬实时：100%保证高优先级任务有一个确定的响应时间，且可以在这个时间内完成，不容差错。</li>
<li>软实时：95%的情况下保证系统的实时性即可，容许偶然的超时情况发生。<br />
即，软实时只提供统计意义上的实时性。<br />
只有“非屏蔽中断＋执行时间确定的ISR（中断服务程序）”才可以称为硬实时系统，因为这个系统明确告诉我什么时候完成操作。</li>
</ul>
<span id="more"></span>
<h2 id="常见的rtos有哪些"><a class="markdownIt-Anchor" href="#常见的rtos有哪些"></a> 常见的RTOS有哪些？</h2>
<p>非国产：<strong>μClinux</strong>、μC/OS-II、eCos、<strong>FreeRTOS</strong>、mbed OS、RTX、Vxworks、QNX、NuttX<br />
国产：都江堰操作系统(djyos)、Alios Things、Huawei LiteOS、RT-Thread、SylixOS。<br />
简介：<a href="https://blog.csdn.net/forcj/article/details/116330792">详解目前主流的嵌入式操作系统（RTOS）操作系统</a></p>
<h1 id="freertos速成"><a class="markdownIt-Anchor" href="#freertos速成"></a> FreeRTOS速成</h1>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue快速入门</title>
    <url>/posts/2457320618/</url>
    <content><![CDATA[<h1 id="快速运行"><a class="markdownIt-Anchor" href="#快速运行"></a> 快速运行</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;your-project-name&gt;</span><br><span class="line"><span class="built_in">cd</span> vue/vue</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line">// 或者</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>
<p>其中，build和serve是定义在package.json里的脚本命令，前者用于正式部署到服务器供用户使用，后者用于本地开发调试实时预览，支持热更新。</p>
<span id="more"></span>
<h1 id="vue项目结构"><a class="markdownIt-Anchor" href="#vue项目结构"></a> Vue项目结构</h1>
<p>在一个vue项目中，基本目录结构可能如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">my-vue-app/</span><br><span class="line">│</span><br><span class="line">├── public/</span><br><span class="line">│   └── index<span class="selector-class">.html</span>         # 应用的主<span class="selector-tag">HTML</span>文件</span><br><span class="line">│</span><br><span class="line">├── <span class="attribute">src</span>/</span><br><span class="line">│   ├── assets/            # 静态资源文件（图片、样式等）</span><br><span class="line">│   ├── components/        # Vue组件（页面一部分）</span><br><span class="line">│   ├── views/             # 路由视图组件（完整页面）</span><br><span class="line">│   ├── App<span class="selector-class">.vue</span>            # 根组件</span><br><span class="line">│   ├── <span class="selector-tag">main</span><span class="selector-class">.js</span>            # 应用的入口文件</span><br><span class="line">│   ├── router<span class="selector-class">.js</span>          # 路由配置（如果有的话）</span><br><span class="line">│   └── store<span class="selector-class">.js</span>           # Vuex状态管理（如果有的话）</span><br><span class="line">│</span><br><span class="line">├── package<span class="selector-class">.json</span>           # 项目依赖和脚本</span><br><span class="line">└── README<span class="selector-class">.md</span>              # 项目的说明文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其中，作为项目入口文件的有三个核心文件： <code>index.html</code> <code>main.js</code> <code>App.vue</code><br />
下面以此次项目为例说明：</p>
<h2 id="indexhtml主页面"><a class="markdownIt-Anchor" href="#indexhtml主页面"></a> <em><strong>index.html</strong></em>——主页面</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Vue项目中，<code>index.html</code> 通常是用来加载你的应用并提供一个 <code>div</code> 容器来挂载Vue实例。</p>
<ul>
<li><strong><code>&lt;head&gt;</code> 标签</strong>:<br />
包含页面的元数据，包括字符集、兼容性设置、视口设置、图标链接和页面标题。</li>
<li><strong><code>&lt;body&gt;</code> 标签</strong>:<br />
包含页面的内容。这个区域会显示在浏览器窗口中。
<ul>
<li><strong><code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code></strong>:<br />
这是Vue应用的挂载点。Vue实例会在这里将你的组件渲染到页面上。<code>id=&quot;app&quot;</code> 指定了这个 <code>div</code> 的 <code>id</code> 为 <code>app</code>，在 <code>main.js</code> 中，Vue 实例会挂载到这个元素上。</li>
<li>其余略<br />
总之，<code>index.html</code>创建了一个id为&quot;app&quot;的容器，Vue.js应用将会挂载在这个元素上，通过在<code>main.js</code>中使用<code>app.mount('#app')</code>，Vue实例接管了这个<code>div</code>元素的管理，并将应用的内容渲染到这个元素中。</li>
</ul>
</li>
</ul>
<h2 id="mainjs入口文件"><a class="markdownIt-Anchor" href="#mainjs入口文件"></a> <em><strong>main.js</strong></em>——入口文件</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="comment">// 引入Vue框架</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span> <span class="comment">// 引入根组件App.vue</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">// 引入路由配置</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>; <span class="comment">// 引入ElementUI组件库</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>; <span class="comment">// 引入ElementUI的CSS样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/global.css&#x27;</span>; <span class="comment">// 引入全局CSS样式</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span>; <span class="comment">// 引入自定义的请求工具</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">// 关闭生产模式下的提示信息</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>); <span class="comment">// 使用ElementUI插件</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = request <span class="comment">// 将request工具挂载到Vue的原型上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    router, <span class="comment">// 注入路由配置</span></span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>), <span class="comment">// 渲染根组件App.vue</span></span><br><span class="line">    <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">globalVar</span>: &#123;&#125;, <span class="comment">// 定义一个全局变量</span></span><br><span class="line">        &#125;&#125;,</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 挂载Vue实例到id为app的元素上</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这是Vue应用的入口JavaScript文件。它通常是用来创建Vue实例并挂载到 <code>index.html</code> 中的 <code>div</code> 容器上，然后接管这个元素及其内容的控制。<br />
核心：<code>new Vue(&#123;...&#125;).$mount(#app)</code>，将Vue根组件挂载到<code>&lt;div id=&quot;app&quot;&gt;</code>的元素（容器）上。</p>
<h2 id="appvue根组件"><a class="markdownIt-Anchor" href="#appvue根组件"></a> <em><strong>App.vue</strong></em>——根组件</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id = &quot;app&quot;&gt;</span><br><span class="line">        &lt;router-view/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app&#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>干了一件事：设置一个div容器，里面使用<code>router-view</code>根据用户选择切换页面。</p>
<blockquote>
<p><code>router-view</code> 组件是 Vue Router 提供的一个内置组件，它会渲染当前路由匹配的组件。当用户导航到不同的路径时，<code>router-view</code> 会动态地切换显示不同的路由组件。</p>
</blockquote>
<p><strong>总结： <code>App.vue</code> 中的模板通过<code>main.js</code>被渲染到 <code>index.html</code> 中的 <code>&lt;div id=&quot;app&quot;&gt;</code> 位置。</strong></p>
<h2 id="indexjs路由配置"><a class="markdownIt-Anchor" href="#indexjs路由配置"></a> <em><strong>index.js</strong></em>——路由配置</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 VueRouter 插件到 Vue 实例</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// 卖家管理模块路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/seller/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Seller&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;seller&quot; */</span> <span class="string">&#x27;../Seller/Manage.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/seller/home&quot;</span>,  <span class="comment">// 默认重定向到 /seller/home</span></span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">// 子路由：卖家主页</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;seller&quot; */</span> <span class="string">&#x27;../Seller/Home.vue&#x27;</span>) &#125;,</span><br><span class="line">      <span class="comment">// 子路由：订单管理</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;order&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Order&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;seller&quot; */</span> <span class="string">&#x27;../Seller/Order.vue&#x27;</span>) &#125;,</span><br><span class="line">      <span class="comment">// 子路由：历史订单</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;history&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;History&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;seller&quot; */</span> <span class="string">&#x27;../Seller/History.vue&#x27;</span>) &#125;,</span><br><span class="line">      <span class="comment">// 子路由：花束管理</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;bouquet&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Bouquet&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;seller&quot; */</span> <span class="string">&#x27;../Seller/Bouquet.vue&#x27;</span>) &#125;,</span><br><span class="line">      <span class="comment">// 子路由：库存管理</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;inventory&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Inventory&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;seller&quot; */</span> <span class="string">&#x27;../Seller/Inventory.vue&#x27;</span>) &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 用户管理模块路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;user&quot; */</span> <span class="string">&#x27;../Seller/Manage.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 监控模块路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/monitor/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Monitor&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;monitor&quot; */</span> <span class="string">&#x27;../Monitor/Manage.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/monitor/order&quot;</span>,  <span class="comment">// 默认重定向到 /monitor/order</span></span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">// 子路由：订单监控</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;order&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Order&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;monitor&quot; */</span> <span class="string">&#x27;../Monitor/Order.vue&#x27;</span>) &#125;,</span><br><span class="line">      <span class="comment">// 子路由：历史监控</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;history&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;History&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;monitor&quot; */</span> <span class="string">&#x27;../Monitor/History.vue&#x27;</span>) &#125;,</span><br><span class="line">      <span class="comment">// 子路由：实时监控</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;monitor&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Monitor&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;monitor&quot; */</span> <span class="string">&#x27;../Monitor/Monitor.vue&#x27;</span>) &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 登录页面路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;login&quot; */</span> <span class="string">&#x27;../Login/Login.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 注册页面路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Register&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;register&quot; */</span> <span class="string">&#x27;../Login/Register.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 客户主界面路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/CustomerMain/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Customer&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;customer&quot; */</span> <span class="string">&#x27;../Customer/CustomerMain.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 客户购买页面路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/CustomerBuy/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;CustomerBuy&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;customer-buy&quot; */</span> <span class="string">&#x27;../Customer/CustomerBuy.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 客户搜索页面路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/CustomerSearch/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;CustomerSearch&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;customer-search&quot; */</span> <span class="string">&#x27;../Customer/CustomerSearch.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 客户设计页面路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/CustomerDesign/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;CustomerDesign&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;customer-design&quot; */</span> <span class="string">&#x27;../Customer/CustomerDesign.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,  <span class="comment">// 使用 HTML5 History 模式，避免使用哈希值</span></span><br><span class="line">  <span class="attr">base</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span>,  <span class="comment">// 基础路径，通常与应用的部署路径一致</span></span><br><span class="line">  routes  <span class="comment">// 路由定义</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出路由实例，以便在 main.js 中使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="vue语法"><a class="markdownIt-Anchor" href="#vue语法"></a> Vue语法</h1>
<p>一个vue文件既可以作为一个完整的页面，也可以作为一个组件嵌入其他页面中。如上述文件结构中，components里的vue文件就是专门用作复用的组件的。</p>
<p>.vue文件结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 组件的 HTML 模板 --&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; description &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 组件的 JavaScript 逻辑</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;MyComponent&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &#x27;Hello World&#x27;,</span><br><span class="line">      description: &#x27;This is a description.&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/* 组件的 CSS 样式 */</span><br><span class="line">h1 &#123;</span><br><span class="line">  color: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="template-部分"><a class="markdownIt-Anchor" href="#template-部分"></a> <code>&lt;template&gt;</code> 部分</h2>
<p><strong>作用</strong>：<code>&lt;template&gt;</code> 用于定义组件的 HTML 结构和布局，是组件的视图层。它描述了组件如何在浏览器中呈现。</p>
<h2 id="script-部分"><a class="markdownIt-Anchor" href="#script-部分"></a> <code>&lt;script&gt;</code> 部分</h2>
<p><strong>作用</strong>：<code>&lt;script&gt;</code> 用于定义组件的逻辑和行为，包括数据、方法、生命周期钩子等。它是组件的控制器。</p>
<h2 id="style-部分"><a class="markdownIt-Anchor" href="#style-部分"></a> <code>&lt;style&gt;</code> 部分</h2>
<p><strong>作用</strong>：<code>&lt;style&gt;</code> 用于定义组件的样式和视觉效果，包括布局、颜色、字体等。它是组件的外观层。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows批处理与Linux脚本学习</title>
    <url>/posts/2444229209/</url>
    <content><![CDATA[<h1 id="常用语法"><a class="markdownIt-Anchor" href="#常用语法"></a> 常用语法</h1>
<h2 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:: This line of code is commented out</span><br></pre></td></tr></table></figure>
<h2 id="开关回显"><a class="markdownIt-Anchor" href="#开关回显"></a> 开关回显</h2>
<p>任何一条语句前面加@即不会回显；<br />
<code>echo off</code>关闭后续回显；<br />
<code>@echo off</code>即可关闭本行和后续的回显。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::关闭回显</span><br><span class="line">@echo off</span><br></pre></td></tr></table></figure>
<h2 id="暂停"><a class="markdownIt-Anchor" href="#暂停"></a> 暂停</h2>
<p>“请按任意键继续…”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pause</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="set命令"><a class="markdownIt-Anchor" href="#set命令"></a> set命令</h2>
<h3 id="定义变量"><a class="markdownIt-Anchor" href="#定义变量"></a> 定义变量：</h3>
<ul>
<li>/A 定义数值，可参与计算</li>
<li>/p 定义用户输入参数<br />
使用变量时需要加上%，即<code>%variable%</code>：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set a = 123</span><br><span class="line">set b = abc</span><br><span class="line"></span><br><span class="line">:: 数值变量</span><br><span class="line">set /A c= 100</span><br><span class="line">set /A d= 200</span><br><span class="line">set /A e= %c% + %d%</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="接受用户输入"><a class="markdownIt-Anchor" href="#接受用户输入"></a> 接受用户输入</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set /p param=请输入密码:</span><br></pre></td></tr></table></figure>
<h2 id="命令行参数"><a class="markdownIt-Anchor" href="#命令行参数"></a> 命令行参数</h2>
<p>%1，%2等可以从命令行读取参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo %1</span><br><span class="line">echo %2 + %3</span><br></pre></td></tr></table></figure>
<p>使用方法如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; test.bat 1 2 3</span><br></pre></td></tr></table></figure>
<p>输出&quot;1&quot;，“2 + 3”。(注意没有使用数值变量)</p>
<h1 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h1>
<h2 id="中文乱码"><a class="markdownIt-Anchor" href="#中文乱码"></a> 中文乱码</h2>
<p>在脚本最前面加上一句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chcp 65001</span><br></pre></td></tr></table></figure>
<p>表示使用UTF-8编码。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>conda安装（Linux)</title>
    <url>/posts/1781442143/</url>
    <content><![CDATA[<h1 id="miniconda3-linux安装教程"><a class="markdownIt-Anchor" href="#miniconda3-linux安装教程"></a> Miniconda3 Linux安装教程</h1>
<p>Miniconda是一个轻量级的Anaconda发行版，它允许用户安装和管理多个Python环境。以下是在Linux系统中安装Miniconda3的步骤：</p>
<span id="more"></span>
<h2 id="1-下载miniconda3"><a class="markdownIt-Anchor" href="#1-下载miniconda3"></a> 1. 下载Miniconda3</h2>
<p>首先，你需要下载Miniconda3的安装脚本。你可以使用<code>wget</code>命令来完成这一步：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh</span><br></pre></td></tr></table></figure>
<p>这条命令会下载最新版本的Miniconda3 Linux安装程序，并将其保存为<code>miniconda.sh</code>文件。</p>
<h2 id="2-安装miniconda3"><a class="markdownIt-Anchor" href="#2-安装miniconda3"></a> 2. 安装Miniconda3</h2>
<p>下载完成后，你需要以无交互模式安装Miniconda3。这可以通过以下命令完成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash miniconda.sh -b -p <span class="variable">$HOME</span>/miniconda3</span><br></pre></td></tr></table></figure>
<p>这里的<code>-b</code>参数表示无交互模式安装，<code>-p</code>参数指定了安装路径，这里是<code>~/miniconda3</code>。</p>
<h2 id="3-激活miniconda3"><a class="markdownIt-Anchor" href="#3-激活miniconda3"></a> 3. 激活Miniconda3</h2>
<p>安装完成后，你需要激活Miniconda3环境。这可以通过以下命令实现：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/miniconda3/bin/activate</span><br></pre></td></tr></table></figure>
<p>激活环境后，你就可以使用Miniconda3提供的各种命令了。</p>
<h2 id="4-初始化conda环境"><a class="markdownIt-Anchor" href="#4-初始化conda环境"></a> 4. 初始化Conda环境</h2>
<p>为了确保conda命令在所有shell会话中都可用，你需要初始化conda环境。这可以通过以下命令完成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda init --all</span><br></pre></td></tr></table></figure>
<p>执行此命令后，conda环境将被初始化，并且conda命令将在所有新的shell会话中可用。</p>
<h2 id="5-验证安装"><a class="markdownIt-Anchor" href="#5-验证安装"></a> 5. 验证安装</h2>
<p>为了验证Miniconda3是否正确安装，你可以运行以下命令来查看conda的版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure>
<p>如果一切正常，你将看到conda的版本号。</p>
<hr />
<p>以上就是在Linux系统中安装Miniconda3的完整步骤。安装完成后，你就可以开始创建和管理Python环境了。</p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客命令</title>
    <url>/posts/3219889624/</url>
    <content><![CDATA[<h1 id="基础命令"><a class="markdownIt-Anchor" href="#基础命令"></a> 基础命令</h1>
<p>hexo s一键发布命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>
<p>本地部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo s</span><br><span class="line">hexo generate &amp;&amp; hexo server</span><br></pre></td></tr></table></figure>
<p>github部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>创建新文章：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<p>推荐在obsidian中做相关配置后直接创建.md文件，更加方便。</p>
<span id="more"></span>
<h1 id="解决奇怪的报错"><a class="markdownIt-Anchor" href="#解决奇怪的报错"></a> 解决奇怪的报错</h1>
<p>取消git代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
<p>刷新dns缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig/flushdns</span><br></pre></td></tr></table></figure>
<p>清理本地git缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached .</span><br></pre></td></tr></table></figure>
<p>删除.deploy_git和public：</p>
<blockquote>
<p>这里如果遇到文件删不掉的问题，一定要删除pulic文件夹</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf public</span><br><span class="line"><span class="built_in">rm</span> -rf .deploy_git</span><br><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h1 id="技巧"><a class="markdownIt-Anchor" href="#技巧"></a> 技巧</h1>
<h2 id="永久链接设置"><a class="markdownIt-Anchor" href="#永久链接设置"></a> 永久链接设置</h2>
<p>安装插件生成永久链接：<a href="https://cloud.tencent.com/developer/article/1662763">参考这里</a></p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>mac使用笔记</title>
    <url>/posts/973107437/</url>
    <content><![CDATA[<h2 id="设置dock栏自动隐藏的触发速度"><a class="markdownIt-Anchor" href="#设置dock栏自动隐藏的触发速度"></a> 设置Dock栏自动隐藏的触发速度</h2>
<p>Dock 显示和隐藏速度，系统默认设置成了1秒</p>
<p>通过终端.APP修改显示和隐藏的时间 （单位：秒）</p>
<ul>
<li>默认的：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.dock autohide-delay -int 1</span><br></pre></td></tr></table></figure>
<ul>
<li>优化的：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.dock autohide-delay -int 0.8  </span><br><span class="line"></span><br><span class="line">defaults write com.apple.dock autohide-delay -int 0.6  </span><br><span class="line"></span><br><span class="line">defaults write com.apple.dock autohide-delay -int 0.5  </span><br><span class="line"></span><br><span class="line">defaults write com.apple.dock autohide-delay -int 0</span><br></pre></td></tr></table></figure>
<p>所有操作执行完后需要执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">killall Dock</span><br></pre></td></tr></table></figure>
  <span id="more"></span>
<hr />
<ul>
<li>更快的 (我喜欢的)：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.dock autohide-time-modifier -<span class="built_in">float</span> 0.4</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.dock autohide-time-modifier -<span class="built_in">float</span> 0.2</span><br></pre></td></tr></table></figure>
<ul>
<li>最快的：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.dock autohide-time-modifier -int 0</span><br></pre></td></tr></table></figure>
<ul>
<li>恢复：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults delete com.apple.dock autohide-time-modifier</span><br></pre></td></tr></table></figure>
<ul>
<li>设置完后依旧记得执行：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">killall Dock</span><br></pre></td></tr></table></figure>
<p></p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>mujoco快速上手</title>
    <url>/posts/1644944583/</url>
    <content><![CDATA[<blockquote>
<p>mujoco学习笔记与问题记录。官方jupyter入门教程：<a href="https://github.com/google-deepmind/mujoco/blob/main/python/tutorial.ipynb">https://github.com/google-deepmind/mujoco/blob/main/python/tutorial.ipynb</a></p>
</blockquote>
<h1 id="仿真器"><a class="markdownIt-Anchor" href="#仿真器"></a> 仿真器</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装mujoco</span></span><br><span class="line">pip install mujoco</span><br><span class="line">pip install mujoco-python-viewer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动可视化界面，可以直接把模型拖进去预览</span></span><br><span class="line">python -m mujoco.viewer</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="tutorial"><a class="markdownIt-Anchor" href="#tutorial"></a> Tutorial</h2>
<h3 id="mjmodel"><a class="markdownIt-Anchor" href="#mjmodel"></a> mjModel</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原始模型xml文件</span></span><br><span class="line">xml = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;mujoco&gt;</span></span><br><span class="line"><span class="string">  &lt;worldbody&gt;</span></span><br><span class="line"><span class="string">    &lt;light name=&quot;top&quot; pos=&quot;0 0 1&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;geom name=&quot;red_box&quot; type=&quot;box&quot; size=&quot;.2 .2 .2&quot; rgba=&quot;1 0 0 1&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;geom name=&quot;green_sphere&quot; pos=&quot;.2 .2 .2&quot; size=&quot;.1&quot; rgba=&quot;0 1 0 1&quot;/&gt;</span></span><br><span class="line"><span class="string">  &lt;/worldbody&gt;</span></span><br><span class="line"><span class="string">&lt;/mujoco&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从xml生成model模型</span></span><br><span class="line">model = mujoco.MjModel.from_xml_string(xml)</span><br><span class="line"></span><br><span class="line">model.ngeom <span class="comment"># model里有几个geom</span></span><br><span class="line">model.geom_rgba <span class="comment"># 每个geom的颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快捷知道有哪些可用的geom</span></span><br><span class="line">model.geom()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接叫geom不指定属性会打印所有属性</span></span><br><span class="line">model.geom(<span class="string">&#x27;green_sphere&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印rgba</span></span><br><span class="line">model.geom(<span class="string">&#x27;green_sphere&#x27;</span>).rgba</span><br><span class="line"></span><br><span class="line"><span class="comment"># name与id相互转换</span></span><br><span class="line"><span class="built_in">id</span> = mujoco.mj_name2id(model, mujoco.mjtObj.mjOBJ_GEOM, <span class="string">&#x27;green_sphere&#x27;</span>)</span><br><span class="line">model.geom(<span class="string">&#x27;green_sphere&#x27;</span>).<span class="built_in">id</span></span><br><span class="line">model.geom(<span class="number">1</span>).name</span><br><span class="line">model.body(<span class="number">0</span>).name <span class="comment"># id为0的一定是world且不可改名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印model中所有geom的name</span></span><br><span class="line">[model.geom(i).name <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(model.ngeom)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有物理选项（如重力、时间步等）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 也可以直接在XML中&lt;mujoco&gt;的子标签中更改：</span></span><br><span class="line"><span class="string">&lt;mujoco&gt;</span></span><br><span class="line"><span class="string">	&lt;option gravity=&quot;0 0 10&quot;/&gt;</span></span><br><span class="line"><span class="string">&lt;/mujoco&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">model.opt </span><br></pre></td></tr></table></figure>
<h3 id="mjdata"><a class="markdownIt-Anchor" href="#mjdata"></a> mjData</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用model创建data</span></span><br><span class="line">data = mujoco.MjData(model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有geom的(x,y,z)位置</span></span><br><span class="line"><span class="built_in">print</span>(data.geom_xpos)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印某一个geom的(x,y,z)位置</span></span><br><span class="line"><span class="built_in">print</span>(data.geom(<span class="string">&#x27;green_sphere&#x27;</span>).xpos)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算全局笛卡尔姿态, 必须要做几何对齐</span></span><br><span class="line">mujoco.mj_kinematics(model, data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;raw access:\n&#x27;</span>, data.geom_xpos)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="rendering"><a class="markdownIt-Anchor" href="#rendering"></a> rendering</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启可视化渲染</span></span><br><span class="line"><span class="keyword">with</span> mujoco.Renderer(model) <span class="keyword">as</span> renderer:</span><br><span class="line">  mujoco.mj_forward(model, data) <span class="comment"># 渲染也要计算后使用</span></span><br><span class="line">  renderer.update_scene(data)</span><br><span class="line">  media.show_image(renderer.render())</span><br></pre></td></tr></table></figure>
<h3 id="simulation"><a class="markdownIt-Anchor" href="#simulation"></a> Simulation</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># enable joint visualization option:</span></span><br><span class="line">scene_option = mujoco.MjvOption()</span><br><span class="line">scene_option.flags[mujoco.mjtVisFlag.mjVIS_JOINT] = <span class="literal">True</span> <span class="comment"># 开关节显示</span></span><br><span class="line"></span><br><span class="line">duration = <span class="number">3.8</span>  <span class="comment"># (seconds)</span></span><br><span class="line">framerate = <span class="number">60</span>  <span class="comment"># (Hz)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Simulate and display video.</span></span><br><span class="line">frames = []</span><br><span class="line">mujoco.mj_resetData(model, data)</span><br><span class="line"><span class="keyword">with</span> mujoco.Renderer(model) <span class="keyword">as</span> renderer:</span><br><span class="line">  <span class="keyword">while</span> data.time &lt; duration:</span><br><span class="line">    mujoco.mj_step(model, data)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(frames) &lt; data.time * framerate:</span><br><span class="line">      renderer.update_scene(data, scene_option=scene_option)</span><br><span class="line">      pixels = renderer.render()</span><br><span class="line">      frames.append(pixels)</span><br><span class="line">      </span><br><span class="line">media.show_video(frames, fps=framerate)</span><br></pre></td></tr></table></figure>
<h3 id="degrees-of-freedom"><a class="markdownIt-Anchor" href="#degrees-of-freedom"></a> Degrees of Freedom</h3>
<p>Dof，即自由度，注意在mujoco中旋转使用四元数表示，有四个自由度（见问题记录）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Total number of DoFs in the model:&#x27;</span>, model.nv)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Generalized positions:&#x27;</span>, data.qpos) <span class="comment"># 所有geom的qpos写在一起</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Generalized velocities:&#x27;</span>, data.qvel) <span class="comment"># 旋转</span></span><br></pre></td></tr></table></figure>
<h3 id="tendons"><a class="markdownIt-Anchor" href="#tendons"></a> Tendons</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  &lt;tendon&gt;</span><br><span class="line">    &lt;spatial name=<span class="string">&quot;wire&quot;</span> limited=<span class="string">&quot;true&quot;</span> <span class="built_in">range</span>=<span class="string">&quot;0 0.35&quot;</span> width=<span class="string">&quot;0.003&quot;</span>&gt;</span><br><span class="line">      &lt;site site=<span class="string">&quot;anchor&quot;</span>/&gt;</span><br><span class="line">      &lt;site site=<span class="string">&quot;hook&quot;</span>/&gt;</span><br><span class="line">    &lt;/spatial&gt;</span><br><span class="line">  &lt;/tendon&gt;</span><br></pre></td></tr></table></figure>
<h1 id="模型"><a class="markdownIt-Anchor" href="#模型"></a> 模型</h1>
<p>用户以名为 MJCF 的 XML 文件格式定义 MuJoCo 模型。然后，内置编译器将该模型编译为低级数据结构 mjModel，该结构为运行时计算进行了交叉索引和优化。编译后的模型也可以保存在二进制 MJB 文件中。<br />
所谓MJCF，是对XML文件内容的一种约定，即以<code>&lt;mujoco&gt;</code>为唯一顶层元素的XML文件会被识别为mujoco模型文件。</p>
<p>示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mujoco</span>&gt;</span>  <span class="comment">&lt;!-- 唯一的顶级元素，将 XML 文件标识为 MJCF模型文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">worldbody</span>&gt;</span>  <span class="comment">&lt;!-- 有且只有一个世界 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">light</span> <span class="attr">diffuse</span>=<span class="string">&quot;.5 .5 .5&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 3&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;0 0 -1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;plane&quot;</span> <span class="attr">size</span>=<span class="string">&quot;1 1 0.1&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;.9 0 0 1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">joint</span> <span class="attr">type</span>=<span class="string">&quot;free&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;box&quot;</span> <span class="attr">size</span>=<span class="string">&quot;.1 .2 .3&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0 .9 0 1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">worldbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mujoco</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>worldbody顶层体，唯一，不能有子元素inertial和joint，它的name默认为&quot;world&quot;。</p>
</li>
<li>
<p>body其他体，可以有属性joint。</p>
</li>
<li>
<p>joint关节，是body的属性，定义其所属body与所属body的父体之间的自由度。类型有四种free, ball, slide, hinge，如下：</p>
<ul>
<li>free：自由，有6个自由度，分别是3个平移以及3个旋转。<strong>只能用于worldbody的子body</strong>。</li>
<li>ball：球体，只有3个旋转自由度，使用四元数表示状态（w,x,y,z），初始状态为(1,0,0,0)**。如果一个body有一个球状关节，它就不能有其他的旋转关节（球或铰链）。在同一个body中，允许将球状关节和滑动关节结合起来。</li>
<li>slide：滑动，只有1个平移自由度，使用一个位置（用于渲染）和一个方向（用于模拟）来描述。</li>
<li>hinge：铰链，只有1个旋转自由度，使用一个轴线与一个通过位置来描述，<strong>为默认类型</strong>。</li>
</ul>
</li>
<li>
<p>geom几何体，是body的属性，决定body的渲染外观与碰撞体积（以及可选的惯性属性）。类型有以下几种：</p>
<ul>
<li>plane：平面</li>
</ul>
</li>
</ul>
<h1 id="问题记录"><a class="markdownIt-Anchor" href="#问题记录"></a> 问题记录</h1>
<ol>
<li>keyframe对应的每种joint的qpos维数是多少？<br />
mujoco是面向过程设计的，因此大量的数据格式被设为向量，需要使用者自己知道向量中每一维度的含义。<br />
对应于上述关节类型，旋转的三自由度使用四元数（w,x,y,z）表示，平移的三自由度使用（x,y,z）表示。<strong>因此一个浮动基机器人本体的自由度是6，qpos维数是7</strong>。同理，四种关节对应的qpos维数如下：</li>
</ol>
<table>
<thead>
<tr>
<th><strong>关节类型</strong></th>
<th><strong>自由度</strong></th>
<th><strong><code>qpos</code> 维数</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>自由关节</strong></td>
<td>6</td>
<td>7</td>
<td>3平移 + 4旋转四元数</td>
</tr>
<tr>
<td><strong>滑动关节</strong></td>
<td>1</td>
<td>1</td>
<td>1平移</td>
</tr>
<tr>
<td><strong>铰链关节</strong></td>
<td>1</td>
<td>1</td>
<td>1旋转角度</td>
</tr>
<tr>
<td><strong>球形关节</strong></td>
<td>3</td>
<td>4</td>
<td>4旋转四元数</td>
</tr>
</tbody>
</table>
<h1 id="环境bug"><a class="markdownIt-Anchor" href="#环境bug"></a> 环境bug</h1>
<h2 id="1-a-module-that-was-compiled-using-numpy-1x-cannot-be-run-in-numpy-222-as-it-may-crash-to-support-both-1x-and-2x-versions-of-numpy-modules-must-be-compiled-with-numpy-20-some-module-may-need-to-rebuild-instead-eg-with-pybind11212"><a class="markdownIt-Anchor" href="#1-a-module-that-was-compiled-using-numpy-1x-cannot-be-run-in-numpy-222-as-it-may-crash-to-support-both-1x-and-2x-versions-of-numpy-modules-must-be-compiled-with-numpy-20-some-module-may-need-to-rebuild-instead-eg-with-pybind11212"></a> 1. A module that was compiled using NumPy 1.x cannot be run in NumPy 2.2.2 as it may crash. To support both 1.x and 2.x versions of NumPy, modules must be compiled with NumPy 2.0. Some module may need to rebuild instead e.g. with ‘pybind11&gt;=2.12’.</h2>
<p>报错中给了提示：If you are a user of the module, the easiest solution will be to<br />
downgrade to ‘numpy&lt;2’ or try to upgrade the affected module.<br />
We expect that some modules will need time to support NumPy 2.</p>
<p>所以：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install numpy==1.22.4</span><br></pre></td></tr></table></figure>
<h2 id="2-python-buildsflorianrhiempyglfwglfw-34srcwindowc711-glfwgetframebuffersize-assertion-window-null-failed"><a class="markdownIt-Anchor" href="#2-python-buildsflorianrhiempyglfwglfw-34srcwindowc711-glfwgetframebuffersize-assertion-window-null-failed"></a> 2. python: /builds/florianrhiem/pyGLFW/glfw-3.4/src/window.c:711: glfwGetFramebufferSize: Assertion `window != NULL’ failed.</h2>
<p>参考：<a href="https://stackoverflow.com/questions/71010343/cannot-load-swrast-and-iris-drivers-in-fedora-35/72200748#72200748">stackoverflow</a></p>
<h2 id="3-mujoco报错valueerror-xml-error-schema-violation-unrecognized-attribute-kv"><a class="markdownIt-Anchor" href="#3-mujoco报错valueerror-xml-error-schema-violation-unrecognized-attribute-kv"></a> 3. mujoco报错：ValueError: XML Error: Schema violation: unrecognized attribute: ‘kv’</h2>
<p>mujoco 2.3.0报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ValueError: XML Error: Schema violation: unrecognized attribute: &#x27;kv&#x27;</span><br></pre></td></tr></table></figure>
<p>升级到最新版（3.2.7），又报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AttributeError: &#x27;mujoco._structs.MjData&#x27; object has no attribute &#x27;solver_iter&#x27;.</span><br></pre></td></tr></table></figure>
<p>这俩问题无法兼容解决。<br />
最终在3.2.7版下修改mujoco_rendering.py，将593行代码中的 self.data.solver_iter 更改为 self.data.solver_niter，解决。</p>
<h2 id="4-libgl-error-mesa-loader-failed-to-open-iris"><a class="markdownIt-Anchor" href="#4-libgl-error-mesa-loader-failed-to-open-iris"></a> 4. libGL error: MESA-LOADER: failed to open iris</h2>
<p>参考：<a href="https://stackoverflow.com/questions/72110384/libgl-error-mesa-loader-failed-to-open-iris">stackoverflow</a><br />
<code>conda install -c conda-forge libstdcxx-ng</code></p>
<h2 id="5-多线程训练时出现too-many-open-files"><a class="markdownIt-Anchor" href="#5-多线程训练时出现too-many-open-files"></a> 5. 多线程训练时出现too many open files</h2>
<p>从字面意思上看就是说程序打开的文件数过多，不过这里的files不单是文件的意思，也包括打开的通讯链接(<strong>比如socket</strong>)，正在监听的端口等等，所以有时候也可以叫做<strong>句柄</strong>(handle)，这个错误通常也可以叫做句柄数超出系统限制。<br />
查看允许打开文件数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n</span><br></pre></td></tr></table></figure>
<p>修改它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n 2048</span><br></pre></td></tr></table></figure>
<p>成功解决。</p>
<h2 id="6-runtimeerror-numpy-is-not-availablemodulenotfounderror-no-module-named-numpy_core"><a class="markdownIt-Anchor" href="#6-runtimeerror-numpy-is-not-availablemodulenotfounderror-no-module-named-numpy_core"></a> 6. RuntimeError: Numpy is not available；ModuleNotFoundError: No module named ‘numpy._core‘</h2>
<p><a href="https://blog.csdn.net/m0_45276337/article/details/143689539">https://blog.csdn.net/m0_45276337/article/details/143689539</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python笔记</title>
    <url>/posts/3221955761/</url>
    <content><![CDATA[<h1 id="python笔记"><a class="markdownIt-Anchor" href="#python笔记"></a> Python笔记</h1>
<h2 id="杂项"><a class="markdownIt-Anchor" href="#杂项"></a> 杂项</h2>
<h3 id="列表遍历"><a class="markdownIt-Anchor" href="#列表遍历"></a> 列表遍历</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整数步长</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>) <span class="comment"># start,end,step</span></span><br><span class="line"><span class="comment"># 小数步长</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.arrange(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.01</span>) <span class="comment">#start,end,step</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.linspace(<span class="number">0</span>,<span class="number">0.9</span>,<span class="number">10</span>) <span class="comment"># 0-0.9的10等分</span></span><br></pre></td></tr></table></figure>
<h3 id="查看gpu情况"><a class="markdownIt-Anchor" href="#查看gpu情况"></a> 查看gpu情况</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在命令行里</span></span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="绘图"><a class="markdownIt-Anchor" href="#绘图"></a> 绘图</h2>
<h3 id="matpltlib"><a class="markdownIt-Anchor" href="#matpltlib"></a> matpltlib</h3>
<p><img src="_myblog/public/2024/07/23/00/v2-d260b686b5fdff0ef48735257dc261fc_1440w.png" alt="" /></p>
<blockquote>
<p>matplotlib是一个最大的绘图库，包括了pyplot、pylaib等基础绘图库。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>标题</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.title(<span class="string">&quot;title&quot;</span>) <span class="comment"># 括号当中输入标题的名称</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>] <span class="comment"># 中文标题时避免乱码</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Figure对象</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">6</span>, <span class="number">3</span>))</span><br><span class="line">plt.plot(<span class="number">6</span>, <span class="number">3</span>)</span><br><span class="line">plt.plot(<span class="number">3</span>, <span class="number">3</span> * <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>坐标轴</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">6</span>) <span class="comment">#x轴坐标轴</span></span><br><span class="line">plt.ylim((<span class="number">0</span>, <span class="number">3</span>))<span class="comment">#y轴坐标轴</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)<span class="comment">#x轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)<span class="comment">#y轴标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span> <span class="comment"># 负数避免乱码</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>注释箭头</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.annotate(text=<span class="string">&#x27;标记点&#x27;</span>,xy=(<span class="number">3</span>,np.sin(<span class="number">3</span>)),xytext=(<span class="number">4</span>,-<span class="number">0.5</span>),weight=<span class="string">&#x27;bold&#x27;</span>,color=<span class="string">&#x27;b&#x27;</span>,arrowprops=<span class="built_in">dict</span>(arrowstyle=<span class="string">&#x27;-|&gt;&#x27;</span>,color=<span class="string">&#x27;k&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="git"><a class="markdownIt-Anchor" href="#git"></a> git</h2>
<h3 id="基本步骤"><a class="markdownIt-Anchor" href="#基本步骤"></a> 基本步骤</h3>
<ol>
<li>
<p>添加公钥：everything搜索<code>id_rsa.pub</code>，复制其中内容到github/gitee</p>
</li>
<li>
<p>克隆仓库到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/momaoto/fourth-assignment.git</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>进入文件夹初始化仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>关联远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://gitee.com/momaoto/fourth-assignment.git</span><br><span class="line">git remote <span class="built_in">rm</span> origin</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<blockquote>
<p>origin为后面链接所指远程库的别名，方便操作</p>
</blockquote>
</li>
<li>
<p>拉取远程分支与本地仓库合并</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master:main</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>代码添加进本地暂存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git add test.txt</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>确认提交记录到本地仓库</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit .</span><br><span class="line">git commit test.txt</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>安装子模块</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根目录下</span></span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>
<h3 id="命令大全"><a class="markdownIt-Anchor" href="#命令大全"></a> 命令大全</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote：不带任何参数直接运行 git remote，将会列出当前仓库中已经配置的远程仓库的简写名称列表。</span><br><span class="line">git remote -v：显示当前仓库中已经配置的远程仓库的简写名称和对应的URL。</span><br><span class="line">git remote add &lt;name&gt; &lt;url&gt;：将一个新的远程仓库添加到当前仓库中。&lt;name&gt;是远程仓库的简写名称，&lt;url&gt;是远程仓库的URL。</span><br><span class="line">git remote rename &lt;old-name&gt; &lt;new-name&gt;：将已经存在的远程仓库的简写名称重命名为新的名称。</span><br><span class="line">git remote remove &lt;name&gt;：从当前仓库中移除指定的远程仓库。</span><br><span class="line">git remote set-url &lt;name&gt; &lt;new-url&gt;：修改指定远程仓库的URL。</span><br><span class="line">git remote show &lt;name&gt;：显示指定远程仓库的详细信息，包括URL和跟踪分支。</span><br></pre></td></tr></table></figure>
<p>设置私人令牌</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin https://&lt;your_token&gt;@github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git</span><br></pre></td></tr></table></figure>
<p>暂存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git ls-files</span><br></pre></td></tr></table></figure>
<p>查看代码行数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git ls-files | xargs <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;https://gitee.com&#x27;</span>: momaoto</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;https://momaoto@gitee.com&#x27;</span>: 私人令牌</span><br></pre></td></tr></table></figure>
<p>git原理：</p>
<h1 id="conda"><a class="markdownIt-Anchor" href="#conda"></a> conda</h1>
<p>创建新环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create --name mesh2gs python=3.10</span><br></pre></td></tr></table></figure>
<p>激活环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate mesh2gs</span><br></pre></td></tr></table></figure>
<p>退出当前环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>
<p>查看已有环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure>
<p>删除不需要的环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> remove --name myenv</span><br></pre></td></tr></table></figure>
<p>清理缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip cache purge</span><br><span class="line">conda clean --all</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh免密登陆</title>
    <url>/posts/808646382/</url>
    <content><![CDATA[<p>要配置 SSH 免密登录（即使用 <strong>SSH 密钥认证</strong>），可以按照以下步骤操作：</p>
<hr />
<h3 id="假设环境"><a class="markdownIt-Anchor" href="#假设环境"></a> <strong>假设环境</strong></h3>
<ul>
<li><strong>本地主机（Client）</strong> ：你当前使用的电脑</li>
<li><strong>远程服务器（Server）</strong> ：你要免密登录的目标机器</li>
<li><strong>用户名</strong>：<code>user</code></li>
<li><strong>服务器 IP</strong>：<code>192.168.1.100</code></li>
</ul>
<hr />
<span id="more"></span>
<h2 id="步骤-1在本地生成-ssh-密钥"><a class="markdownIt-Anchor" href="#步骤-1在本地生成-ssh-密钥"></a> <strong>步骤 1：在本地生成 SSH 密钥</strong></h2>
<p>在本地终端（Linux / Mac / WSL / Git Bash / PowerShell）执行：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -<span class="selector-tag">b</span> <span class="number">4096</span> -C &quot;your_email<span class="keyword">@example</span>.com&quot;</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>-t rsa</code>：生成 RSA 类型密钥（推荐）</li>
<li><code>-b 4096</code>：密钥长度 4096 位（更安全）</li>
<li><code>-C &quot;your_email@example.com&quot;</code>：添加注释，方便识别</li>
</ul>
<h3 id="生成后会有如下提示"><a class="markdownIt-Anchor" href="#生成后会有如下提示"></a> <strong>生成后会有如下提示：</strong></h3>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa <span class="keyword">key</span> pair.</span><br><span class="line">Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the <span class="keyword">key</span> (/home/user/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>
<p><strong>直接回车</strong>，默认保存在 <code>~/.ssh/id_rsa</code>（私钥） 和 <code>~/.ssh/id_rsa.pub</code>（公钥）。</p>
<p>然后会让你输入 <strong>密码短语（passphrase）</strong> ：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Enter passphrase (empty for no passphrase):</span> </span><br><span class="line"><span class="attr">Enter same passphrase again:</span> </span><br></pre></td></tr></table></figure>
<p>如果不想输入密码短语（免密），<strong>直接回车两次</strong>。</p>
<hr />
<h2 id="步骤-2复制公钥到远程服务器"><a class="markdownIt-Anchor" href="#步骤-2复制公钥到远程服务器"></a> <strong>步骤 2：复制公钥到远程服务器</strong></h2>
<p>你可以用以下方法把 <code>id_rsa.pub</code> 复制到远程服务器：</p>
<h3 id="方法-1使用-ssh-copy-id推荐"><a class="markdownIt-Anchor" href="#方法-1使用-ssh-copy-id推荐"></a> <strong>方法 1：使用 <code>ssh-copy-id</code>（推荐）</strong></h3>
<p>如果本地有 <code>ssh-copy-id</code>，执行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ssh<span class="operator">-</span><span class="keyword">copy</span><span class="operator">-</span>id <span class="keyword">user</span><span class="variable">@192</span><span class="number">.168</span><span class="number">.1</span><span class="number">.100</span></span><br></pre></td></tr></table></figure>
<p>然后输入 <strong>远程服务器的密码</strong>，成功后会自动配置。</p>
<p>如果<code>ssh-copy-id</code>不可用(例如，windows下不支持这个命令)，可以新建git bash然后执行上述指令。如果也没有git bash，那么：</p>
<hr />
<h3 id="方法-2手动复制公钥"><a class="markdownIt-Anchor" href="#方法-2手动复制公钥"></a> <strong>方法 2：手动复制公钥</strong></h3>
<p>如果 <code>ssh-copy-id</code> 不可用，可以手动操作：</p>
<ol>
<li><strong>查看公钥</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>输出类似：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA7... your_email<span class="keyword">@example</span>.com</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>登录远程服务器</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh user@192.168.1.100</span><br></pre></td></tr></table></figure>
<p>然后输入密码登录。<br />
2. <strong>添加公钥到远程服务器的 <code>~/.ssh/authorized_keys</code></strong> 在远程服务器终端执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.ssh</span><br><span class="line"><span class="built_in">chmod</span> 700 ~/.ssh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你的公钥内容&quot;</span> &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line"><span class="built_in">chmod</span> 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="步骤-3测试免密登录"><a class="markdownIt-Anchor" href="#步骤-3测试免密登录"></a> <strong>步骤 3：测试免密登录</strong></h2>
<p>在本地运行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ssh <span class="keyword">user</span><span class="variable">@192</span><span class="number">.168</span><span class="number">.1</span><span class="number">.100</span></span><br></pre></td></tr></table></figure>
<p>如果不再要求输入密码，说明配置成功 🎉。</p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>一些效率工具配置分享</title>
    <url>/posts/4111135366/</url>
    <content><![CDATA[<blockquote>
<p>AHK，ImTip，Quicker，Saladict…等等Windows效率小工具的配置清单</p>
</blockquote>
<span id="more"></span>
<h1 id="imtip输入法状态提示工具"><a class="markdownIt-Anchor" href="#imtip输入法状态提示工具"></a> ImTip：输入法状态提示工具</h1>
<p><em><strong>imtip.aardio</strong></em></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fonts.imtip;</span><br><span class="line"><span class="keyword">import</span> win.ui;</span><br><span class="line"><span class="comment">/*DSG&#123;&#123;*/</span></span><br><span class="line">mainForm = win.form(text=<span class="string">&quot;ImTip 导出方案&quot;</span>;right=<span class="number">757</span>;bottom=<span class="number">467</span>)</span><br><span class="line">mainForm.<span class="built_in">add</span>()</span><br><span class="line"><span class="comment">/*&#125;&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> key.ime.stateBar;</span><br><span class="line">var imeBar = key.ime.<span class="built_in">stateBar</span>(mainForm);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入法状态提示（应先退出 ImTip ，多个提示窗口同时出现会闪烁）</span></span><br><span class="line">imeBar.<span class="built_in">imeSkin</span>(<span class="comment">/*ImTipConfig&#123;&#123;*/</span>&#123;</span><br><span class="line">argbColor=<span class="number">-1</span>;</span><br><span class="line">border=&#123;color=<span class="number">14395508</span>;radius=<span class="number">9</span>;width=<span class="number">0</span>&#125;;</span><br><span class="line">offsetX=<span class="number">1</span>;</span><br><span class="line">iconStyle=&#123;align=<span class="string">&quot;right&quot;</span>;font=&#123;h=<span class="number">-11</span>;name=<span class="string">&quot;imtip&quot;</span>;weight=<span class="number">400</span>&#125;;padding=&#123;top=<span class="number">4</span>;right=<span class="number">2</span>;left=<span class="number">0</span>;bottom=<span class="number">0</span>&#125;&#125;;</span><br><span class="line">background=<span class="number">-520110524</span>;</span><br><span class="line">textRenderingHint=<span class="number">3</span>;</span><br><span class="line">openStyle=&#123;[<span class="number">1</span>]=&#123;argbColor=<span class="number">-1</span>;background=<span class="number">-520110524</span>;border=&#123;color=<span class="number">14395508</span>;radius=<span class="number">9</span>;width=<span class="number">0</span>&#125;;iconColor=<span class="number">-1</span>&#125;;[<span class="number">0</span>]=&#123;argbColor=<span class="number">-1</span>;background=<span class="number">-477757441</span>;border=&#123;color=<span class="number">14395508</span>;radius=<span class="number">9</span>;width=<span class="number">0</span>&#125;;iconColor=<span class="number">-1</span>&#125;&#125;;</span><br><span class="line">align=<span class="string">&quot;left&quot;</span>;</span><br><span class="line">textPadding=&#123;top=<span class="number">1</span>;right=<span class="number">0</span>;left=<span class="number">2</span>;bottom=<span class="number">0</span>&#125;;</span><br><span class="line">tipChars=&#123;fullShape=<span class="string">&quot; &quot;</span>;close=<span class="string">&quot; &quot;</span>;hanja=<span class="string">&quot;漢&quot;</span>;[<span class="number">1033</span>]=<span class="string">&quot; &quot;</span>;[<span class="number">2052</span>]=<span class="string">&quot;&quot;</span>;[<span class="number">1041</span>]=<span class="string">&quot;あ&quot;</span>;katakana=<span class="string">&quot;カ&quot;</span>;halfShape=<span class="string">&quot; &quot;</span>;[<span class="number">1042</span>]=<span class="string">&quot;가&quot;</span>;capital=<span class="string">&quot; &quot;</span>;symbol=<span class="string">&quot; &quot;</span>&#125;;</span><br><span class="line">width=<span class="number">16</span>;</span><br><span class="line">font=&#123;h=<span class="number">-53</span>;name=<span class="string">&quot;微软雅黑&quot;</span>;weight=<span class="number">400</span>&#125;;</span><br><span class="line">iconColor=<span class="number">-1</span>;</span><br><span class="line">foreground=<span class="number">16777215</span>;</span><br><span class="line">height=<span class="number">2</span>;</span><br><span class="line">offsetY=<span class="number">0</span>;</span><br><span class="line">iconTextRenderingHint=<span class="number">3</span>;</span><br><span class="line">valign=<span class="string">&quot;center&quot;</span></span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;*/</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//托盘图标</span></span><br><span class="line"><span class="keyword">import</span> win.util.tray;</span><br><span class="line">mainForm.tray = win.util.<span class="built_in">tray</span>(mainForm)  </span><br><span class="line">mainForm.tray.tip = <span class="string">&quot;ImTip 导出方案&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//响应托盘消息</span></span><br><span class="line">mainForm.onTrayMessage = &#123;</span><br><span class="line">	[<span class="number">0x205</span><span class="comment">/*_WM_RBUTTONUP*/</span>] = <span class="built_in">function</span>(wParam)&#123; </span><br><span class="line">	    win.<span class="built_in">setForeground</span>(mainForm.hwnd);</span><br><span class="line">	    mainForm.popmenu.<span class="built_in">popup</span>(); </span><br><span class="line">	&#125;; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//托盘弹出菜单</span></span><br><span class="line"><span class="keyword">import</span> win.ui.menu;</span><br><span class="line">mainForm.popmenu = win.ui.<span class="built_in">popmenu</span>(mainForm); </span><br><span class="line">mainForm.popmenu.<span class="built_in">add</span>(<span class="string">&#x27;临时禁用提示&#x27;</span>,<span class="built_in">function</span>(id)&#123; </span><br><span class="line">	imeBar.<span class="built_in">imeWatch</span>(!!imeBar.paused);</span><br><span class="line">	mainForm.popmenu.<span class="built_in">check</span>(<span class="number">1</span>,!!imeBar.paused);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">mainForm.popmenu.<span class="built_in">add</span>(<span class="string">&#x27;退出&#x27;</span>,<span class="built_in">function</span>(id)&#123; mainForm.<span class="built_in">close</span>() &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//输入法状态或目标窗口变更触发此事件</span></span><br><span class="line"><span class="comment">var lastFocus,lastPath,lastClass;</span></span><br><span class="line"><span class="comment">imeBar.onImeStateChange = function(hFocus,x,y,openNative,symbolMode,text,iconText)&#123;</span></span><br><span class="line"><span class="comment">	if(lastFocus!=hFocus)&#123;</span></span><br><span class="line"><span class="comment">		lastClass = win.getClass(hFocus);</span></span><br><span class="line"><span class="comment">		var tid,pid = win.getThreadProcessId(hFocus);</span></span><br><span class="line"><span class="comment">		lastPath = process.getPath(pid);</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	//指定文件名的程序禁止显示提示</span></span><br><span class="line"><span class="comment">	if(lastPath &amp;&amp; io.splitpath(lastPath).file == &quot;应用程序名称.exe&quot;)&#123;</span></span><br><span class="line"><span class="comment">		return false;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	return true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">win.<span class="built_in">loopMessage</span>();</span><br></pre></td></tr></table></figure>
<h1 id="ahk自定义热键工具"><a class="markdownIt-Anchor" href="#ahk自定义热键工具"></a> AHK：自定义热键工具</h1>
<blockquote>
<p>Version 1.1.34.03</p>
</blockquote>
<p><em><strong>tools.ahk</strong></em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">#HotkeyInterval <span class="number">1000</span></span><br><span class="line">#MaxHotkeysPerInterval <span class="number">200</span></span><br><span class="line"></span><br><span class="line">CapsLock up::</span><br><span class="line">    Send, ^&#123;Space&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">~Lshift &amp; WheelDown:: </span><br><span class="line">Send, &#123;WheelRight&#125;</span><br><span class="line">Return</span><br><span class="line"></span><br><span class="line">~Lshift &amp; WheelUp::</span><br><span class="line">Send, &#123;WheelLeft&#125;</span><br><span class="line">Return</span><br><span class="line"></span><br><span class="line">!s::  </span><br><span class="line">Send ^c</span><br><span class="line">Send ^c</span><br><span class="line">clipboard := RegExReplace(clipboard, <span class="string">&quot;\s&quot;</span>,<span class="string">&quot;+&quot;</span>)</span><br><span class="line">clipboard := RegExReplace(clipboard, <span class="string">&quot;\s&quot;</span>,<span class="string">&quot;+&quot;</span>)</span><br><span class="line">Browser = C:\Users\THK\AppData\Local\Google\Chrome\Application\chrome.exe</span><br><span class="line">;Browser = C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe</span><br><span class="line">Run %Browser%  https:<span class="comment">//cn.bing.com/search?q=%clipboard%</span></span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">MouseIsOver(WinTitle) &#123;</span><br><span class="line">MouseGetPos,,, Win</span><br><span class="line"><span class="keyword">return</span> WinExist(WinTitle . <span class="string">&quot; ahk_id &quot;</span> . Win)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WheelDown::</span><br><span class="line">If (MouseIsOver(<span class="string">&quot;ahk_class Shell_TrayWnd&quot;</span>))</span><br><span class="line">    SoundSet,<span class="number">-2</span></span><br><span class="line">Else</span><br><span class="line">    MouseClick,WD</span><br><span class="line">Return</span><br><span class="line"></span><br><span class="line">WheelUp::</span><br><span class="line">If (MouseIsOver(<span class="string">&quot;ahk_class Shell_TrayWnd&quot;</span>))</span><br><span class="line">    SoundSet,+<span class="number">2</span></span><br><span class="line">Else</span><br><span class="line">    MouseClick,WU</span><br><span class="line">Return</span><br><span class="line"></span><br><span class="line">MButton::</span><br><span class="line">If (MouseIsOver(<span class="string">&quot;ahk_class Shell_TrayWnd&quot;</span>))</span><br><span class="line">    Send,&#123;Volume_Mute&#125;</span><br><span class="line">Else</span><br><span class="line">    MouseClick,Middle</span><br><span class="line">Return</span><br><span class="line"></span><br><span class="line">^+c::</span><br><span class="line">send ^c</span><br><span class="line">send ^c</span><br><span class="line">sleep,<span class="number">1000</span></span><br><span class="line">clipboard=%clipboard%</span><br><span class="line">tooltip,%clipboard%</span><br><span class="line">sleep,<span class="number">500</span></span><br><span class="line">tooltip,</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">::yx::myemail@qq.com</span><br><span class="line">::zz::myaddress</span><br><span class="line">::dh::mynumber</span><br><span class="line">::sf::myID</span><br><span class="line"></span><br><span class="line"><span class="meta">#z::</span></span><br><span class="line">winset alwaysontop,toggle,A</span><br><span class="line">winget, Transparent, Transparent, A</span><br><span class="line"><span class="keyword">if</span> (Transparent)</span><br><span class="line">&#123;</span><br><span class="line">    winset Transparent,Off,A</span><br><span class="line">    winset alwaysontop,off,A</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    winset Transparent,<span class="number">240</span>,A</span><br><span class="line">    winset alwaysontop,on,A</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;使用说明：</span><br><span class="line">;   ◆右侧shift+滚轮下滑：减少透明度，一次<span class="number">10</span></span><br><span class="line">;   ◆右侧shift+滚轮上滑：增加透明度，一次<span class="number">20</span></span><br><span class="line">;   ◆右侧shift+中键按下：恢复透明度至<span class="number">255</span>(完全不透明).</span><br><span class="line">;</span><br><span class="line">~RShift &amp; WheelUp::</span><br><span class="line">; 透明度调整，增加。</span><br><span class="line">WinGet, Transparent, Transparent,A</span><br><span class="line"><span class="title function_">If</span> <span class="params">(Transparent=<span class="string">&quot;&quot;</span>)</span></span><br><span class="line">    Transparent=<span class="number">255</span></span><br><span class="line">    ;Transparent_New:=Transparent+<span class="number">10</span></span><br><span class="line">    Transparent_New:=Transparent+<span class="number">20</span>    ;◆透明度增加速度。</span><br><span class="line">    If (Transparent_New &gt; <span class="number">254</span>)</span><br><span class="line">                    Transparent_New =<span class="number">255</span></span><br><span class="line">    WinSet,Transparent,%Transparent_New%,A</span><br><span class="line"> </span><br><span class="line">    tooltip now: ▲%Transparent_New%`nmae: __%Transparent%  ;查看当前透明度（操作之后的）。</span><br><span class="line">    ;sleep <span class="number">1500</span></span><br><span class="line">    SetTimer, RemoveToolTip_transparent_Lwin__2016<span class="number">.09</span><span class="number">.20</span>, <span class="number">1500</span>  ;设置统一的这个格式，label在最后。</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">~RShift &amp; WheelDown::</span><br><span class="line">;透明度调整，减少。</span><br><span class="line">WinGet, Transparent, Transparent,A</span><br><span class="line"><span class="title function_">If</span> <span class="params">(Transparent=<span class="string">&quot;&quot;</span>)</span></span><br><span class="line">    Transparent=<span class="number">255</span></span><br><span class="line">    Transparent_New:=Transparent<span class="number">-10</span>  ;◆透明度减少速度。</span><br><span class="line">    ;msgbox,Transparent_New=%Transparent_New%</span><br><span class="line">            If (Transparent_New &lt; <span class="number">30</span>)    ;◆最小透明度限制。</span><br><span class="line">                    Transparent_New = <span class="number">30</span></span><br><span class="line">    WinSet,Transparent,%Transparent_New%,A</span><br><span class="line">    tooltip now: ▲%Transparent_New%`nmae: __%Transparent%  ;查看当前透明度（操作之后的）。</span><br><span class="line">    ;sleep <span class="number">1500</span></span><br><span class="line">    SetTimer, RemoveToolTip_transparent_Lwin__2016<span class="number">.09</span><span class="number">.20</span>, <span class="number">1500</span>  ;设置统一的这个格式，label在最后。</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">;设置Lwin &amp;Mbutton直接恢复透明度到<span class="number">255</span>。</span><br><span class="line">~Rshift &amp; Mbutton:: </span><br><span class="line">WinGet, Transparent, Transparent,A</span><br><span class="line">WinSet,Transparent,<span class="number">255</span>,A </span><br><span class="line">tooltip ▲Restored ;查看当前透明度（操作之后的）。</span><br><span class="line">;sleep <span class="number">1500</span></span><br><span class="line">SetTimer, RemoveToolTip_transparent_Lwin__2016<span class="number">.09</span><span class="number">.20</span>, <span class="number">1500</span>  ;设置统一的这个格式，label在最后。</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">removetooltip_transparent_Lwin__2016<span class="number">.09</span><span class="number">.20</span>:     ;LABEL</span><br><span class="line">tooltip</span><br><span class="line">SetTimer, RemoveToolTip_transparent_Lwin__2016<span class="number">.09</span><span class="number">.20</span>, Off</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">!c::</span><br><span class="line">run C:\Program Files\Everything\Everything.exe</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">!+t::</span><br><span class="line">run  C:\Users\THK\Documents\Tencent Files\<span class="number">1229194407</span>\FileRecv</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">!+c::</span><br><span class="line">run C:\Users\THK\Downloads</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">!+w::</span><br><span class="line">run C:\Users\THK\Documents\WeChat Files\wxid_wzkvas1xarde21\FileStorage\File</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">!+b::</span><br><span class="line">run D:\BaiduNetdiskDownload</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">!+i::</span><br><span class="line">run D:\IDMdownloads</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">!+e::</span><br><span class="line">run D:\Edge</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">!+j::</span><br><span class="line">run D:\Program Files\JiJiDown\Download</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">!+p::</span><br><span class="line">run D:\PKM</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">;修复微软输入法莫名其妙切换全角bug</span><br><span class="line">+Space::</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">NumpadAdd::#`</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>一次闲聊</title>
    <url>/posts/185323312/</url>
    <content><![CDATA[<blockquote>
<p>某位消费电子行业工作的学长的简要采访</p>
</blockquote>
<h2 id="一-基本情况"><a class="markdownIt-Anchor" href="#一-基本情况"></a> 一、基本情况</h2>
<p>年龄：24岁</p>
<p>从业时间：3年</p>
<p>工作单位：手机厂（HMOV其中一家）</p>
<p>职务：嵌入式开发工程师</p>
<span id="more"></span>
<h2 id="二-访谈问题"><a class="markdownIt-Anchor" href="#二-访谈问题"></a> 二、访谈问题</h2>
<h3 id="问题1为什么选择这份工作"><a class="markdownIt-Anchor" href="#问题1为什么选择这份工作"></a> 问题1：为什么选择这份工作？</h3>
<p>本科毕业，面临国央企和私企的两种选择，没有犹豫的选择私企这条赛道。第一考虑的就是多赚钱。事实上也达成了，当年的私企拿到了美团和vivo的offer，美团在北京，总包多8w，手机厂在西安，考虑生活成本和定居问题，最后选择了西安。</p>
<h3 id="问题2通过什么途径找到这份工作"><a class="markdownIt-Anchor" href="#问题2通过什么途径找到这份工作"></a> 问题2：通过什么途径找到这份工作？</h3>
<p>网申。自己关注各个公司的秋招信息，主流的私企不论大厂还是手机厂，基本都是官网投递简历，通过几轮面试和笔试拿到offer这种形式。</p>
<h3 id="问题3家里人是否支持"><a class="markdownIt-Anchor" href="#问题3家里人是否支持"></a> 问题3：家里人是否支持？</h3>
<p>其实不太支持。家里人希望进入稳定一些的事业单位、国企或者泛体制内这样子，但我了解了一下薪资真的达不到我的期望，最后多方了解，权衡利弊，还是坚持了自己的想法，选择了私企这样一条相对赚快钱但累一些的道路。</p>
<h3 id="问题4职位与主要职责"><a class="markdownIt-Anchor" href="#问题4职位与主要职责"></a> 问题4：职位与主要职责？</h3>
<p>嵌入式开发工程师，本质还是码农，只不过不想前后端开发那样偏用户一侧，我们更偏向系统以及硬件底层，去完成一些系统开发，维护，新功能的增加等等。语言是c++。</p>
<h3 id="问题5工作具体内容"><a class="markdownIt-Anchor" href="#问题5工作具体内容"></a> 问题5：工作具体内容？</h3>
<p>影像系统开发，简单来说就是你的手机上有一个摄像头，然后你可以用系统相机app去调用它来拍照嘛，其中摄像头、手机处理器、系统都是第三方供应商的，比如高通的芯片、谷歌的安卓系统这样，那你要完成app对摄像头的调用就应该有这么一个连结不同厂家软硬件的通道，也可以称之为影像系统，我们就是开发于维护它这么一个内容。同时在每一代新手机上会上新的相机功能，比如超级夜景、人像虚化这些，算法的调用也是需要我们来进行整合的。</p>
<h3 id="问题6薪资范围与福利"><a class="markdownIt-Anchor" href="#问题6薪资范围与福利"></a> 问题6：薪资范围与福利？</h3>
<p>薪资的话由于是手机厂，比互联网是要低一些的，但总体也处在不错的水平。我这边本科毕业三年大概税前50w左右。福利几乎没有哈哈哈，和国企那种比不了，作息几乎995不说，年假和别的也不多。辛苦确实是蛮辛苦的。</p>
<h3 id="问题8工作岗位发展路径和竞争情况"><a class="markdownIt-Anchor" href="#问题8工作岗位发展路径和竞争情况"></a> 问题8：工作岗位发展路径和竞争情况？</h3>
<p>这个赛道很窄，专一的向上耕耘那主要就有技术专家和管理者两个发展方向。能成为任何一个的话就不需要担心35岁失业的问题了，但很难，尤其是管理者，需要一定的契机，同时机会出现还要抓得住。竞争激烈，因为不同厂家每年都要迭代新功能，指标的压力很大，大家都在内卷哈哈哈哈。</p>
<h3 id="问题9所在行业未来发展前景"><a class="markdownIt-Anchor" href="#问题9所在行业未来发展前景"></a> 问题9：所在行业未来发展前景？</h3>
<p>往小了说，前面说过影像系统这个赛道确实比较窄，跳槽主要是手机厂之间互相跳，近几年像蔚来理想这种车厂也有对应的岗位。往大了说影像这个领域前景确实是很不错的，像手机，智能相机，自动驾驶，机器人这些都会看到影像在其中发挥的关键作用。我对行业的发展还是非常乐观的，期待ai赋能下持续的技术更新给我们带来的惊喜。</p>
<h3 id="问题10工作中最重要的品质"><a class="markdownIt-Anchor" href="#问题10工作中最重要的品质"></a> 问题10：工作中最重要的品质？</h3>
<p>沟通，沟通，沟通。我认为什么行业什么职业都应该是必备的品质吧。然后就是持续学习的动力，计算机这一行就是这样，技术迭代日新月异，跟不上就要被淘汰。当然还需要发掘用户需求的能力，我们所有的产品都是以用户的需求为导向，一切功能都满足用户而不是自己，这样才能做出好的产品。</p>
<h3 id="问题11请为在校学生提一些建议"><a class="markdownIt-Anchor" href="#问题11请为在校学生提一些建议"></a> 问题11：请为在校学生提一些建议？</h3>
<p>尽早接触社会，看清真相，不要被困在学校这座象牙塔里。尽早思考对未来的规划，包括行业、城市的选择。明确自己每一个选择的意义，无论读研还是就业或是出国，不要盲目的随大流。</p>
<h2 id="三-感悟"><a class="markdownIt-Anchor" href="#三-感悟"></a> 三、感悟</h2>
<p>本次访谈选择了和我自己专业相关的两个学长，从事的是互联网、消费电子行业的私企工作。交流中感触颇深，大家都是基于自己当时的认知做出的选择，其中不可避免会出现许多矛盾，比如家人期望选择稳定的体制内工作，而自己倾向于有挑战性、高薪的工作；自己希望留在父母身边，可二线城市对应届生远不如一线城市那样包容等。在进行职业规划时我们要平衡好个体与家人的关系，综合选择一条适合自己的道路。薪资、城市、行业都是影响我们职业生涯的重要因素，应该在这几个要素之上着重考虑。此外，要时刻保持与外界信息的对接，接受社会发展带来的很多就业观念的改变，比如过去的一个岗位干到老的观念很可能在现在已经不适用，我们要接受变化，拥抱变化，每一次变化都可以是我们主动的选择，也会为我们带来新的机遇。最后，人生的容错其实非常大，很多小的失利不是生活的烦恼，而是生活的内容。希望我们每个人都能在多年以后回顾当年的选择，仍然无谓后悔，此岸彼岸，风景如一。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>四足机器人MPC控制算法编写仿真</title>
    <url>/posts/3175180471/</url>
    <content><![CDATA[<blockquote>
<p>开源地址：<a href="https://gitee.com/momaoto/mpc_webots_emulation">https://gitee.com/momaoto/mpc_webots_emulation</a></p>
</blockquote>
<h2 id="原理介绍"><a class="markdownIt-Anchor" href="#原理介绍"></a> 原理介绍</h2>
<blockquote>
<p>机器人控制系统，就是要解决机器人在哪儿、去哪儿、怎么去的问题，分别对应了机器人控制系统的状态估计器、轨迹规划器和控制器。</p>
</blockquote>
<p><img src="%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E6%80%BB%E6%A1%86%E5%9B%BE.png" alt="" /></p>
<p>原论文中第二章介绍了控制系统中的2.3步态调度、2.4状态估计、2.5质心轨迹生成、2.6摆动相规划，分别解决了在哪儿（状态估计）与去哪儿（轨迹规划）的问题。第三章使用MPC对四足机器人控制量进行优化计算，解决机器人怎么去（模型预测控制）的问题。现对以上内容尝试c++面向对象的实现。</p>
<span id="more"></span>
<p>狗腿说明：</p>
<blockquote>
<p>狗头</p>
<p>2       1</p>
<p>4       3</p>
</blockquote>
<h2 id="框架设计"><a class="markdownIt-Anchor" href="#框架设计"></a> 框架设计</h2>
<ul>
<li><code>GaitPlanner</code>类：步态调度器，提供机器人<strong>步态变量输出</strong>，以供摆动相规划与支撑相控制。</li>
<li><code>StateEstimator</code>类：状态估计器，收集<strong>IMU与编码器返回的原始状态信息</strong>，加工并输出<strong>世界系下质心与四足的位置速度信息</strong>。</li>
<li><code>TrajectoryGenerator</code>类：质心轨迹生成器，接收遥控器的指令<strong>期望速度</strong>，生成<strong>期望轨迹</strong>。</li>
<li><code>MPCsolver</code>类：凸优化求解器，根据生成的估计状态与期望轨迹创建qp问题并求解，生成<strong>所需的足底反力</strong>。</li>
</ul>
<h2 id="模块实现"><a class="markdownIt-Anchor" href="#模块实现"></a> 模块实现</h2>
<p><em>以下为提供给用户使用的接口说明。</em></p>
<h3 id="paramsh"><a class="markdownIt-Anchor" href="#paramsh"></a> params.h</h3>
<p>这里定义了四足机器人全局静态参数，使用时预先在这里设置好：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _PARAMS_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _PARAMS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 机器狗参数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> H_X; <span class="comment">// (2.2)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> H_Y; <span class="comment">// (2.2)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> L_1; <span class="comment">// (2.2)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> L_2; <span class="comment">// (2.2)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> L_3; <span class="comment">// (2.2)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> Mass ; <span class="comment">//质量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制周期</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> DELTA_T_MPC;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> DELTA_T_OTHERS;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PREDICTION_HORIZON 10 <span class="comment">// 预测区间h</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> I_B_array[<span class="number">9</span>]; <span class="comment">// 机器狗惯性张量</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> kp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> p_x_offset; <span class="comment">// x方向落足点偏移量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MPC限制条件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> INF;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> f_max;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> miu;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h3 id="gaitplannercpp"><a class="markdownIt-Anchor" href="#gaitplannercpp"></a> GaitPlanner.cpp</h3>
<blockquote>
<p>步态调度器，负责根据用户选择的步态模式计算输出每个控制周期四足的摆动相、支撑相相位，反映步态信息。</p>
</blockquote>
<h4 id="类定义"><a class="markdownIt-Anchor" href="#类定义"></a> 类定义</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _GAITPLANNER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GAITPLANNER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;params.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;global.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief The GaitPlanner class represents a gait planner for a quadruped robot.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This class is responsible for calculating the gait of the robot based on the</span></span><br><span class="line"><span class="comment"> * given parameters and current state.</span></span><br><span class="line"><span class="comment"> * It provides methods to set the gait parameters, set the robot&#x27;s state, set</span></span><br><span class="line"><span class="comment"> * the desired motion, and calculate the gait.</span></span><br><span class="line"><span class="comment"> * The calculated gait can be accessed through various getter methods.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GaitPlanner</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> t_; <span class="comment">// 当前时间</span></span><br><span class="line">    <span class="type">int</span> n_;    <span class="comment">// 当前迈步周期数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Gait scheduler</span></span><br><span class="line">    <span class="type">int</span> setflag_; <span class="comment">// 调用函数前先设置步态</span></span><br><span class="line">    <span class="type">double</span> t_sw_; <span class="comment">// 名义摆动相时间</span></span><br><span class="line">    <span class="type">double</span> t_st_; <span class="comment">// 名义支撑相时间</span></span><br><span class="line"></span><br><span class="line">    Vector4d Gd_;      <span class="comment">// 占空比</span></span><br><span class="line">    Vector4d Go_;      <span class="comment">// 偏移量</span></span><br><span class="line">    <span class="type">double</span> T_gait_;    <span class="comment">// = t_sw + t_st; //完整迈步周期,=t_sw_+t_st_</span></span><br><span class="line">    <span class="type">double</span> t_ng_;      <span class="comment">// 当前周期的时间进度</span></span><br><span class="line">    <span class="type">double</span> t_ng_norm_; <span class="comment">// = t_ng / T_gait; //归一化当前周期时间进度</span></span><br><span class="line"></span><br><span class="line">    Vector4d t_fai_norm_; <span class="comment">// 相位进度,i=0,1,2,3</span></span><br><span class="line">    Vector4d s_fai_;      <span class="comment">// 是否处于支撑相,i=0,1,2,3</span></span><br><span class="line">    Vector4d t_st_norm_;  <span class="comment">// 支撑相相位进度,i=0,1,2,3</span></span><br><span class="line">    Vector4d t_sw_norm_;  <span class="comment">// 摆动相相位进度,i=0,1,2,3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Swing phase planner</span></span><br><span class="line">    Vector3d p_touch_com_O_;</span><br><span class="line">    <span class="type">double</span> psi_touch_;</span><br><span class="line"></span><br><span class="line">    Vector3d p_t_com_O_;  <span class="comment">// position of com in O, 来自状态估计器</span></span><br><span class="line">    Vector3d v_t_com_O_;  <span class="comment">// velocity of com in O, 来自状态估计器</span></span><br><span class="line">    Matrix3d R_t_B_O_;    <span class="comment">// rotation matrix from B to O, 来自状态估计器</span></span><br><span class="line">    Vector3d omega_OB_O_; <span class="comment">// angular velocity of the robot, 来自状态估计器</span></span><br><span class="line">    <span class="type">double</span> psi_t_;        <span class="comment">// yaw angle of the robot, 来自状态估计器</span></span><br><span class="line"></span><br><span class="line">    Vector3d v_t_com_d_B_; <span class="comment">// desired velocity of com in B, 来自轨迹规划器</span></span><br><span class="line">    <span class="type">double</span> omega_t_z_d_;   <span class="comment">// desired yaw rate of the robot, 来自轨迹规划器</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Vector3d <span class="title">getp_hip_i_B_</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line">    <span class="function">Vector3d <span class="title">getp_touch_hip_i_O</span><span class="params">(<span class="type">int</span> i)</span></span>; <span class="comment">// 获取第i腿触地点在O系下的坐标,i=1,2,3,4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GaitPlanner</span>();</span><br><span class="line">    ~<span class="built_in">GaitPlanner</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setGait</span><span class="params">(<span class="type">double</span> swingTime, <span class="type">double</span> standTime, string mode)</span></span>; <span class="comment">// 设置步态</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calculateGait</span><span class="params">(<span class="type">double</span> currentTime)</span></span>;                        <span class="comment">// 计算步态</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setState</span><span class="params">(Vector3d p_t_com_O, Vector3d v_t_com_O, Matrix3d R_t_B_O,</span></span></span><br><span class="line"><span class="params"><span class="function">                  Vector3d omega_OB_O, <span class="type">double</span> <span class="type">psi_t</span>)</span></span>;          <span class="comment">// 设置状态</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setDesired</span><span class="params">(Vector3d v_t_com_d_B, <span class="type">double</span> omega_t_z_d)</span></span>; <span class="comment">// 设置期望</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Vector3d <span class="title">getp_swend_i_O</span><span class="params">(<span class="type">int</span> i)</span></span>; <span class="comment">// 获取第i腿摆动末端在O系下的坐标,i=1,2,3,4</span></span><br><span class="line">    <span class="function">Vector4d <span class="title">gets_fai</span><span class="params">()</span></span>;            <span class="comment">// 获取当前各腿支撑相状态</span></span><br><span class="line">    <span class="comment">// Vector3d getp_stend_i_O(int i); // 获取四足最近一次支撑相足底坐标</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h4 id="使用方法"><a class="markdownIt-Anchor" href="#使用方法"></a> 使用方法</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未使用单例模式，因此写在main里，向线程函数传入引用</span></span><br><span class="line"> GaitPlanner *gp = <span class="keyword">new</span> <span class="built_in">GaitPlanner</span>(); </span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<h3 id="stateestimatorcpp"><a class="markdownIt-Anchor" href="#stateestimatorcpp"></a> StateEstimator.cpp</h3>
<blockquote>
<p>状态估计器，负责估计四足机器人运动过程中难以直接测量的状态信息，对IMU返回的原始旋转矩阵、电机编码器返回的角度与转速进行转换，反映四足机器人在世界系下的质心位置、质心速度、四足位置等状态信息。其中包括一个使用卡尔曼滤波实现的足底里程计，帮助MPC算法更加精确地收集状态信息。</p>
</blockquote>
<h4 id="类定义-2"><a class="markdownIt-Anchor" href="#类定义-2"></a> 类定义</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _STATEESTIMATOR_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _STATEESTIMATOR_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;params.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;global.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    状态估计器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StateEstimator</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">double</span> t_; <span class="comment">// 当前时间</span></span><br><span class="line">  <span class="type">int</span> n_;    <span class="comment">// 当前为第n个周期</span></span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> IMUsetflag_;</span><br><span class="line">  <span class="type">bool</span> Encoderflag_;</span><br><span class="line">  <span class="type">bool</span> Calculatedflag_;</span><br><span class="line">  <span class="comment">// IMU</span></span><br><span class="line">  Vector3d a_com_B_;     <span class="comment">// B系质心加速度</span></span><br><span class="line">  Vector3d a_com_O_;     <span class="comment">// O系质心加速度</span></span><br><span class="line">  Vector3d omega_OB_B_;  <span class="comment">// B系躯干角速度</span></span><br><span class="line">  Vector3d omega_OB_O_;  <span class="comment">// O系躯干角速度</span></span><br><span class="line">  Matrix3d omega_OBX_B_; <span class="comment">// B系躯干角速度张量(2.51)</span></span><br><span class="line"></span><br><span class="line">  Vector3d p_i_B_;     <span class="comment">// 本体系下i足足底位置(2.47)</span></span><br><span class="line">  Vector3d p_dot_i_B_; <span class="comment">// 本体系下i足足底速度(2.49)</span></span><br><span class="line"></span><br><span class="line">  Matrix3d R_imu_imu0_;        <span class="comment">// imu-&gt;imu0旋转矩阵(IMU原始旋转矩阵)</span></span><br><span class="line">  Matrix&lt;<span class="type">double</span>, <span class="number">4</span>, <span class="number">3</span>&gt; q_j_i_; <span class="comment">// 12个关节电机角度,电机编号见顶部</span></span><br><span class="line">  Matrix&lt;<span class="type">double</span>, <span class="number">4</span>, <span class="number">3</span>&gt; q_dot_j_i_; <span class="comment">// 12个关节电机角速度,电机编号见顶部</span></span><br><span class="line">  Vector3d a_original_;            <span class="comment">// 原始IMU加速度</span></span><br><span class="line">  Vector3d omega_original_;        <span class="comment">// 原始IMU角速度</span></span><br><span class="line"></span><br><span class="line">  Matrix3d R_B_O_; <span class="comment">// B-&gt;O躯干旋转矩阵(通过IMU和世界系的定义计算得出)</span></span><br><span class="line">  Matrix3d R_B_imu_; <span class="comment">// B-&gt;imu旋转矩阵(常值)</span></span><br><span class="line"></span><br><span class="line">  Matrix3d R_imu0_O_;      <span class="comment">// imu0-&gt;O旋转矩阵(常值)</span></span><br><span class="line">  Matrix3d R_t0_imu_imu0_; <span class="comment">// 初始时刻IMU旋转矩阵(IMU启动时读出)</span></span><br><span class="line"></span><br><span class="line">  Matrix&lt;<span class="type">double</span>, <span class="number">4</span>, <span class="number">3</span>&gt; p_stend_O_last_; <span class="comment">// 上一控制周期求得有效支撑相足底坐标</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Kalman filter</span></span><br><span class="line">  Matrix&lt;<span class="type">double</span>, <span class="number">18</span>, <span class="number">18</span>&gt; A_;</span><br><span class="line">  Matrix&lt;<span class="type">double</span>, <span class="number">18</span>, <span class="number">3</span>&gt; B_;</span><br><span class="line">  Matrix&lt;<span class="type">double</span>, <span class="number">18</span>, <span class="number">18</span>&gt; Q_;</span><br><span class="line">  Matrix&lt;<span class="type">double</span>, <span class="number">28</span>, <span class="number">28</span>&gt; R_;</span><br><span class="line">  Matrix&lt;<span class="type">double</span>, <span class="number">28</span>, <span class="number">18</span>&gt; H_;</span><br><span class="line">  Matrix&lt;<span class="type">double</span>, <span class="number">18</span>, <span class="number">18</span>&gt; P_;</span><br><span class="line">  Matrix&lt;<span class="type">double</span>, <span class="number">18</span>, <span class="number">28</span>&gt; K_;</span><br><span class="line">  Vector3d u_;</span><br><span class="line">  Matrix&lt;<span class="type">double</span>, <span class="number">28</span>, <span class="number">1</span>&gt; z_k_;</span><br><span class="line">  Matrix&lt;<span class="type">double</span>, <span class="number">18</span>, <span class="number">1</span>&gt; x_k_; <span class="comment">// k时刻状态变量[p_com_O, v_com_O, p_foot_O](18*1)</span></span><br><span class="line"></span><br><span class="line">  <span class="function">Vector3d <span class="title">geta_com_B</span><span class="params">()</span></span>; <span class="comment">// 计算并返回质心加速度，参数为原始IMU加速度</span></span><br><span class="line">  <span class="function">Vector3d <span class="title">geta_com_O</span><span class="params">()</span></span>; <span class="comment">// 经过R_B_O_变换后的质心加速度(2.42)</span></span><br><span class="line">  <span class="function">Vector3d <span class="title">getomega_OB_B</span><span class="params">()</span></span>; <span class="comment">// 计算并返回躯干角速度，参数为原始IMU角速度</span></span><br><span class="line">  <span class="function">Vector3d <span class="title">getomega_OB_O</span><span class="params">()</span></span>; <span class="comment">// 经过R_B_O_变换后的躯干角速度(2.44)</span></span><br><span class="line"></span><br><span class="line">  <span class="function">Matrix3d <span class="title">getomega_OBX_B</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算本体系下i足足底位置(2.47)，参数q_j_i为第i条腿上的3个关节电机角度，0-髋电机，1-大腿电机，2-小腿电机</span></span><br><span class="line">  <span class="function">Vector3d <span class="title">getp_i_B</span><span class="params">(<span class="type">int</span> i, <span class="type">const</span> Vector3d &amp;q_j_i)</span></span>;</span><br><span class="line">  <span class="comment">// 计算本体系下i足足底速度(2.49)，参数q_dot_j_i为第i条腿上的3个关节电机速度，0-髋电机，1-大腿电机，2-小腿电机</span></span><br><span class="line">  <span class="function">Vector3d <span class="title">getp_dot_i_B</span><span class="params">(<span class="type">int</span> i, <span class="type">const</span> Vector3d &amp;q_j_i,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">const</span> Vector3d &amp;q_dot_j_i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">StateEstimator</span>();</span><br><span class="line">  ~<span class="built_in">StateEstimator</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// void setIMUdata(const Matrix3d &amp;R_imu_imu0, const Vector3d &amp;a_original,</span></span><br><span class="line">  <span class="comment">// const Vector3d &amp;omega_original);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置InertialUnit输出的欧拉角(原始旋转矩阵)，Gyro输出的角速度，Accelerometer输出的加速度</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setIMUdata</span><span class="params">(<span class="type">const</span> Vector3d &amp;Eulerangles, <span class="type">const</span> Vector3d &amp;a_original,</span></span></span><br><span class="line"><span class="params"><span class="function">                  <span class="type">const</span> Vector3d &amp;omega_original)</span></span>;</span><br><span class="line">  <span class="comment">// 设置12个关节电机角度和角速度</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setEncoderdata</span><span class="params">(<span class="type">const</span> Matrix&lt;<span class="type">double</span>, <span class="number">4</span>, <span class="number">3</span>&gt; &amp;q_j_i,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="type">const</span> Matrix&lt;<span class="type">double</span>, <span class="number">4</span>, <span class="number">3</span>&gt; &amp;q_dot_j_i)</span></span>;</span><br><span class="line">  <span class="comment">// 计算所有过程变量</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">calculateAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 卡尔曼滤波计算x_k</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">kalman_update</span><span class="params">(<span class="type">int</span> times)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算并返回躯干旋转矩阵，对于spot来说即为原始IMU旋转矩阵</span></span><br><span class="line">  <span class="function">Matrix3d <span class="title">getR_B_O</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Matrix&lt;<span class="type">double</span>, 4, 3&gt; <span class="title">getp_stend_O</span><span class="params">(<span class="type">const</span> Vector4d &amp;s_fai)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回18*1向量，为[p_com_O(3*1), v_com_O(3*1), p_foot_O(12*1)]</span></span><br><span class="line">  <span class="function">Matrix&lt;<span class="type">double</span>, 18, 1&gt; <span class="title">getx_k</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Matrix&lt;<span class="type">double</span>, 4, 3&gt; <span class="title">getp_foot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="使用方法-2"><a class="markdownIt-Anchor" href="#使用方法-2"></a> 使用方法</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未使用单例模式，因此写在main里，向线程函数传入引用</span></span><br><span class="line">StateEstimator *se = <span class="keyword">new</span> <span class="built_in">StateEstimator</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于计算估计状态</span></span><br><span class="line">   se-&gt;<span class="built_in">setIMUdata</span>(Eulerangles, a_original, omega_original);</span><br><span class="line">   se-&gt;<span class="built_in">setEncoderdata</span>(q_j_i, q_dot_j_i);</span><br><span class="line">   se-&gt;<span class="built_in">calculateAll</span>();</span><br><span class="line">   se-&gt;<span class="built_in">kalman_update</span>();</span><br><span class="line">   </span><br><span class="line">*x_k = se-&gt;<span class="built_in">getx_k</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于读取中间状态</span></span><br><span class="line">se-&gt;<span class="built_in">getp_stend_O</span>(gp-&gt;<span class="built_in">gets_fai</span>());</span><br><span class="line">se-&gt;<span class="built_in">getR_B_O</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="trajectorygeneratorcpp"><a class="markdownIt-Anchor" href="#trajectorygeneratorcpp"></a> TrajectoryGenerator.cpp</h3>
<blockquote>
<p>质心轨迹生成器，负责接受手柄传来的控制命令，转化为MPC算法需要的未来h周期地机器人期望轨迹（状态），作为实际轨迹优化问题的目标。</p>
</blockquote>
<ul>
<li>接受：期望速度，期望角速度</li>
<li>返回：期望速度，期望角速度，期望位置，期望角位置（欧拉角）</li>
</ul>
<p>构造时默认当前周期为0， 接收到手柄传来的<strong>本体系下</strong>的期望速度与角速度后生成<strong>未来h周期</strong>的、<strong>世界系下</strong>的期望速度，角速度，位置，欧拉角。</p>
<p>每次生成期望轨迹后，预测区间右移一格，重新生成未来h周期期望轨迹。</p>
<h4 id="类定义-3"><a class="markdownIt-Anchor" href="#类定义-3"></a> 类定义</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TRAJECTORYGENERATOR_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TRAJECTORYGENERATOR_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;params.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;global.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    质心轨迹生成器</span></span><br><span class="line"><span class="comment">        角标命名规则：右上角开始顺时针命名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrajectoryGenerator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> t_;          <span class="comment">// 当前时间</span></span><br><span class="line">    <span class="type">int</span> n_;             <span class="comment">// 当前为第n个周期</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> setflag_;       <span class="comment">// 调用函数前先设置期望值</span></span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> block_para_; <span class="comment">// 堵转保护系数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> v_x_d_B_;     <span class="comment">// 期望x速度(B系)</span></span><br><span class="line">    <span class="type">double</span> v_y_d_B_;     <span class="comment">// 期望y速度(B系)</span></span><br><span class="line">    <span class="type">double</span> omega_z_d_B_; <span class="comment">// 期望绕z角速度(B系)</span></span><br><span class="line"></span><br><span class="line">    Vector3d p_0_com_d_O_; <span class="comment">// 上一控制周期求得此刻期望位置</span></span><br><span class="line">    Vector3d v_0_com_d_O_; <span class="comment">// 上一控制周期求得此刻期望速度</span></span><br><span class="line">    Vector3d p_0_com_O_;   <span class="comment">// 此刻实际位置 // BUG</span></span><br><span class="line"></span><br><span class="line">    Vector3d v_k_com_d_O_; <span class="comment">// 期望质心速度(2.21)</span></span><br><span class="line">    Vector3d p_k_com_d_O_; <span class="comment">// 期望质心位置(2.63)</span></span><br><span class="line">    Vector3d omega_k_d_O_; <span class="comment">// 期望角速度(2.65)</span></span><br><span class="line">    Vector3d THETA_k_d_;   <span class="comment">// 期望欧拉角(2.76)</span></span><br><span class="line"></span><br><span class="line">    Matrix&lt;<span class="type">double</span>, <span class="number">13</span> * PREDICTION_HORIZON, <span class="number">1</span>&gt; D_;</span><br><span class="line">    <span class="comment">// slope estimate</span></span><br><span class="line">    Matrix&lt;<span class="type">double</span>, <span class="number">4</span>, <span class="number">3</span>&gt; p_stend_O_; <span class="comment">// 4条腿的最近一次支撑相足底坐标</span></span><br><span class="line">    Vector3d A_pla_hat_;                <span class="comment">// 估计的地面平面系数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TrajectoryGenerator</span>();</span><br><span class="line">    ~<span class="built_in">TrajectoryGenerator</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置四足最近一次支撑相足底坐标，来自步态规划器</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setState</span><span class="params">(<span class="type">const</span> Matrix&lt;<span class="type">double</span>, <span class="number">4</span>, <span class="number">3</span>&gt; &amp;p_stend_O)</span></span>;</span><br><span class="line">    <span class="comment">// 设置期望值，来自上位机或手柄</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setDesired</span><span class="params">(<span class="type">const</span> <span class="type">double</span> &amp;v_x, <span class="type">const</span> <span class="type">double</span> &amp;v_y, <span class="type">const</span> <span class="type">double</span> &amp;omega_z)</span></span>;</span><br><span class="line">    <span class="comment">// 计算期望轨迹向量:[THETA_k_d,p_k_com_d_O,v_k_com_d_O,omega_k_d_O]*PREDICTION_HORIZON，其中包括坡度估计</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calculateAll</span><span class="params">(<span class="type">const</span> Matrix3d &amp;Rot)</span></span>;</span><br><span class="line">    <span class="comment">// 返回期望轨迹向量(13h*1)</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getD</span><span class="params">(Matrix&lt;<span class="type">double</span>, <span class="number">13</span> * PREDICTION_HORIZON, <span class="number">1</span>&gt; &amp;vectorForD)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getpsi_k_d</span><span class="params">(Matrix&lt;<span class="type">double</span>, PREDICTION_HORIZON, <span class="number">1</span>&gt; &amp;vectorForpsi_k_d)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Vector3d *getv_k_com_d_O(int k, Matrix3d *Rot);</span></span><br><span class="line">    <span class="comment">// Vector3d *getp_k_com_d_O(int k, Vector3d *p_0_com_O, Matrix3d *Rot);</span></span><br><span class="line">    <span class="comment">// Vector3d *getomega_k_d_O();</span></span><br><span class="line">    <span class="comment">// Vector3d *getTHETA_k_d();</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h4 id="使用方法-3"><a class="markdownIt-Anchor" href="#使用方法-3"></a> 使用方法</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未使用单例模式，因此写在main里，向线程函数传入引用</span></span><br><span class="line">TrajectoryGenerator *tg = <span class="keyword">new</span> <span class="built_in">TrajectoryGenerator</span>(); <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">   tg-&gt;<span class="built_in">setState</span>(se-&gt;<span class="built_in">getp_stend_O</span>(gp-&gt;<span class="built_in">gets_fai</span>()));</span><br><span class="line">   tg-&gt;<span class="built_in">setDesired</span>(v_x, v_y, omega_z);</span><br><span class="line">   tg-&gt;<span class="built_in">calculateAll</span>(se-&gt;<span class="built_in">getR_B_O</span>());</span><br><span class="line">   tg-&gt;<span class="built_in">getD</span>(*vecD);</span><br><span class="line">   tg-&gt;<span class="built_in">getpsi_k_d</span>(*psi_k_d);</span><br></pre></td></tr></table></figure>
<h3 id="mpcsolvercpp"><a class="markdownIt-Anchor" href="#mpcsolvercpp"></a> MPCsolver.cpp</h3>
<ul>
<li>目的：计算出当前时刻（t时刻）应当输入的控制量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></li>
<li>约束：
<ol>
<li>输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>后系统状态与预期状态尽可能接近(误差最小)</li>
<li>所输入的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>本身尽可能小(输入最小)</li>
</ol>
</li>
</ul>
<p>控制以上两个约束的权重后，求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>为一个二次凸优化问题，以下为MPC具体实现时所需要的变量推导：</p>
<p><img src="MPC%E5%8F%98%E9%87%8F%E4%BE%9D%E8%B5%96.png" alt="" /></p>
<p>根据前文实现的四个计算类编写代码，求出当前时刻最优输入控制量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>，其中第一列为所需足底反力。</p>
<h4 id="类定义-4"><a class="markdownIt-Anchor" href="#类定义-4"></a> 类定义</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MPCSOLVER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MPCSOLVER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;all.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qpOASES.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// using namespace qpOASES; // contain class &quot;Matrix&quot;,ambigurous with Eigen;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MPCsolver</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    qpOASES::QProblem *qproblem;</span><br><span class="line"></span><br><span class="line">    Matrix&lt;<span class="type">double</span>, <span class="number">13</span> * PREDICTION_HORIZON, <span class="number">1</span>&gt; D_;                                 <span class="comment">// D(13h*1)</span></span><br><span class="line">    Matrix&lt;<span class="type">double</span>, <span class="number">13</span>, <span class="number">1</span>&gt; x_0_;                                                    <span class="comment">// x_0(13*1)</span></span><br><span class="line">    DiagonalMatrix&lt;<span class="type">double</span>, <span class="number">13</span> * PREDICTION_HORIZON, <span class="number">13</span> * PREDICTION_HORIZON&gt; Q_;   <span class="comment">// Q(13h*13h),  <span class="doctag">NOTE:</span> Q_ is diagonal matrix</span></span><br><span class="line">    DiagonalMatrix&lt;<span class="type">double</span>, <span class="number">12</span> * PREDICTION_HORIZON, <span class="number">12</span> * PREDICTION_HORIZON&gt; R_;   <span class="comment">// R(12h*12h),  <span class="doctag">NOTE:</span> R_ is diagonal matrix</span></span><br><span class="line">    Matrix&lt;<span class="type">double</span>, <span class="number">20</span> * PREDICTION_HORIZON, <span class="number">12</span> * PREDICTION_HORIZON, RowMajor&gt; C_; <span class="comment">// C(20h*12h),  <span class="doctag">NOTE:</span> row major storage</span></span><br><span class="line">    Matrix&lt;<span class="type">double</span>, <span class="number">20</span> * PREDICTION_HORIZON, <span class="number">1</span>&gt; c_lb_;                              <span class="comment">// clb(20h*1)</span></span><br><span class="line">    Matrix&lt;<span class="type">double</span>, <span class="number">20</span> * PREDICTION_HORIZON, <span class="number">1</span>&gt; c_ub_;                              <span class="comment">// cub(20h*1)</span></span><br><span class="line"></span><br><span class="line">    Matrix&lt;<span class="type">double</span>, <span class="number">13</span> * PREDICTION_HORIZON, <span class="number">13</span>&gt; A_qp_;                             <span class="comment">// Aqp(13h*13)</span></span><br><span class="line">    Matrix&lt;<span class="type">double</span>, <span class="number">13</span> * PREDICTION_HORIZON, <span class="number">12</span> * PREDICTION_HORIZON&gt; B_qp_;        <span class="comment">// Bqp(13h*12h)</span></span><br><span class="line">    Matrix&lt;<span class="type">double</span>, <span class="number">12</span> * PREDICTION_HORIZON, <span class="number">12</span> * PREDICTION_HORIZON, RowMajor&gt; H_; <span class="comment">// H(12h*12h),  <span class="doctag">NOTE:</span> row major storage</span></span><br><span class="line">    Matrix&lt;<span class="type">double</span>, <span class="number">12</span> * PREDICTION_HORIZON, <span class="number">1</span>&gt; g_;                                 <span class="comment">// g(13h*1)</span></span><br><span class="line">    Matrix&lt;<span class="type">double</span>, <span class="number">12</span> * PREDICTION_HORIZON, <span class="number">1</span>&gt; U_;                                 <span class="comment">// U(12h*1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MPCsolver</span>(<span class="comment">/* args */</span>);</span><br><span class="line">    ~<span class="built_in">MPCsolver</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化qp问题</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setD_and_x0</span><span class="params">(<span class="type">const</span> Matrix&lt;<span class="type">double</span>, <span class="number">13</span> * PREDICTION_HORIZON, <span class="number">1</span>&gt; &amp;vecD,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="type">const</span> Matrix&lt;<span class="type">double</span>, <span class="number">13</span>, <span class="number">1</span>&gt; &amp;x_0)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算A_qp_、B_qp_、H_、g_、C_</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calculateAll</span><span class="params">(<span class="type">const</span> Matrix&lt;<span class="type">double</span>, PREDICTION_HORIZON, <span class="number">1</span>&gt; &amp;psi_k_d,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="type">const</span> Matrix&lt;<span class="type">double</span>, <span class="number">3</span> * PREDICTION_HORIZON, <span class="number">4</span>&gt; &amp;r_k_ix)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 卡尔曼滤波首次求解</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">qpSolveU_first</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 卡尔曼滤波后续求解</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">qpSolveU_next</span><span class="params">(Matrix&lt;<span class="type">double</span>, <span class="number">12</span>,<span class="number">1</span>&gt; &amp;U_optimal)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="使用方法-4"><a class="markdownIt-Anchor" href="#使用方法-4"></a> 使用方法</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未使用单例模式，因此写在main里，向线程函数传入引用</span></span><br><span class="line">MPCsolver *mpc = <span class="keyword">new</span> <span class="built_in">MPCsolver</span>();</span><br><span class="line"></span><br><span class="line">mpc-&gt;<span class="built_in">setD_and_x0</span>(*vecD, *x_0);</span><br><span class="line">mpc-&gt;<span class="built_in">calculateAll</span>(*psi_k_d, *r_k_ix);</span><br><span class="line">mpc-&gt;<span class="built_in">qpSolveU_first</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (robot-&gt;<span class="built_in">step</span>(<span class="number">4</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">    mpc-&gt;<span class="built_in">setD_and_x0</span>(*vecD, *x_0);</span><br><span class="line">    mpc-&gt;<span class="built_in">calculateAll</span>(*psi_k_d, *r_k_ix);</span><br><span class="line">    mpc-&gt;<span class="built_in">qpSolveU_next</span>(*f_MPC);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="控制器"><a class="markdownIt-Anchor" href="#控制器"></a> 控制器</h2>
<h3 id="电机编号说明"><a class="markdownIt-Anchor" href="#电机编号说明"></a> 电机编号说明</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  电机编号</span></span><br><span class="line"><span class="comment">            头</span></span><br><span class="line"><span class="comment">     9  5       4 8</span></span><br><span class="line"><span class="comment">        1       0</span></span><br><span class="line"><span class="comment">          |dog|</span></span><br><span class="line"><span class="comment">          |dog|</span></span><br><span class="line"><span class="comment">          |dog|</span></span><br><span class="line"><span class="comment">        3       2</span></span><br><span class="line"><span class="comment">     11 7       6 10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="键盘输入"><a class="markdownIt-Anchor" href="#键盘输入"></a> 键盘输入</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> Keyboard::UP:</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;FORWARD&quot;</span> &lt;&lt; endl;</span><br><span class="line">  v_x = <span class="number">0.1</span>;</span><br><span class="line">  v_y = <span class="number">0</span>;</span><br><span class="line">  omega_z = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Keyboard::DOWN:</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;BACKWARD&quot;</span> &lt;&lt; endl;</span><br><span class="line">  v_x = <span class="number">-0.1</span>;</span><br><span class="line">  v_y = <span class="number">0</span>;</span><br><span class="line">  omega_z = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Keyboard::LEFT:</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;LEFT&quot;</span> &lt;&lt; endl;</span><br><span class="line">  v_x = <span class="number">0</span>;</span><br><span class="line">  v_y = <span class="number">0</span>;</span><br><span class="line">  omega_z = <span class="number">0.1</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Keyboard::RIGHT:</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;RIGHT&quot;</span> &lt;&lt; endl;</span><br><span class="line">  v_x = <span class="number">0</span>;</span><br><span class="line">  v_y = <span class="number">0</span>;</span><br><span class="line">  omega_z = <span class="number">-0.1</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  v_x = <span class="number">0</span>;</span><br><span class="line">  v_y = <span class="number">0</span>;</span><br><span class="line">  omega_z = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="贝塞尔曲线"><a class="markdownIt-Anchor" href="#贝塞尔曲线"></a> 贝塞尔曲线</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Vector3d <span class="title">cubicBezier3D</span><span class="params">(Vector3d &amp;p0, Vector3d &amp;p1, Vector3d &amp;p2, Vector3d &amp;p3,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="type">float</span> t)</span> </span>&#123;</span><br><span class="line">  Vector3d result;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    result[i] = (<span class="number">1</span> - t) * (<span class="number">1</span> - t) * (<span class="number">1</span> - t) * p0[i] +</span><br><span class="line">                <span class="number">3</span> * (<span class="number">1</span> - t) * (<span class="number">1</span> - t) * t * p1[i] +</span><br><span class="line">                <span class="number">3</span> * (<span class="number">1</span> - t) * t * t * p2[i] + t * t * t * p3[i];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运动学逆解"><a class="markdownIt-Anchor" href="#运动学逆解"></a> 运动学逆解</h3>
<blockquote>
<p>位置控制的运动学逆解，将足端坐标、速度转化为电机转角、转速。</p>
</blockquote>
<p>原位控版本：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DOG_SOLVE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DOG_SOLVE_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M_PI 3.1415926</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> leg_length1  0.050<span class="comment">//单位为m</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> leg_length2  0.340</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> leg_length3  0.400</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//extern float kp;</span></span><br><span class="line"><span class="comment">//extern float kd;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">dog_pd</span>&#123;</span><br><span class="line">	<span class="type">float</span> kp;</span><br><span class="line">	<span class="type">float</span> kd;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">dog_pd</span> dog_pd[<span class="number">12</span>];<span class="comment">//每条腿的pd参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">dog_motor</span>&#123;</span><br><span class="line">	<span class="type">double</span> sol_gamma;</span><br><span class="line">	<span class="type">double</span> sol_alfa;</span><br><span class="line">	<span class="type">double</span> sol_beta;</span><br><span class="line">	<span class="type">double</span>  a1, l4; <span class="comment">// 计算的角度和长度(中间变量)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">dog_motor</span> leg_angle[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">dog_foot</span>&#123;</span><br><span class="line">	<span class="type">double</span> x;</span><br><span class="line">	<span class="type">double</span> y;</span><br><span class="line">	<span class="type">double</span> z;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">dog_foot</span> foot_position[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">dog_motor_ouput</span>&#123;</span><br><span class="line">	<span class="type">double</span> sol_gamma;</span><br><span class="line">	<span class="type">double</span> sol_alfa;</span><br><span class="line">	<span class="type">double</span> sol_beta;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">dog_motor_ouput</span> leg_angle_ouput[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dog_solve</span><span class="params">()</span></span>; <span class="comment">// 运动学逆解</span></span><br><span class="line"><span class="comment">// void dog_solve_output();//把逆解计算出来的结果处理后输出给电机</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>推荐使用更精简版本：（更新于12.22）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Vector3d <span class="title">inverseKinematics</span><span class="params">(<span class="type">int</span> legNumber, Vector3d footPosition)</span> </span>&#123;</span><br><span class="line">  Vector3d motorAngles;</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> gamma, alfa, beta;</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> x = footPosition[<span class="number">0</span>];</span><br><span class="line">  <span class="type">double</span> y = footPosition[<span class="number">1</span>];</span><br><span class="line">  <span class="type">double</span> z = footPosition[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> ksi = (legNumber == <span class="number">1</span> || legNumber == <span class="number">3</span>) ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  gamma = MY_PI - <span class="built_in">acos</span>(L1 / <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(y, <span class="number">2</span>) + <span class="built_in">pow</span>(z, <span class="number">2</span>))) - <span class="built_in">atan</span>(-ksi * y / z);</span><br><span class="line"></span><br><span class="line">  <span class="type">float</span> L23 = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x, <span class="number">2</span>) + <span class="built_in">pow</span>(y, <span class="number">2</span>) + <span class="built_in">pow</span>(z, <span class="number">2</span>) - <span class="built_in">pow</span>(L1, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">  beta = <span class="built_in">acos</span>((<span class="built_in">pow</span>(L2, <span class="number">2</span>) + <span class="built_in">pow</span>(L3, <span class="number">2</span>) - <span class="built_in">pow</span>(L23, <span class="number">2</span>)) / (<span class="number">2</span> * L2 * L3));</span><br><span class="line"></span><br><span class="line">  alfa = <span class="built_in">acos</span>(x / L23) +</span><br><span class="line">         <span class="built_in">acos</span>((<span class="built_in">pow</span>(L2, <span class="number">2</span>) + <span class="built_in">pow</span>(L23, <span class="number">2</span>) - <span class="built_in">pow</span>(L3, <span class="number">2</span>)) / (<span class="number">2</span> * L2 * L23));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> IK_TEST</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;x: &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; y: &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot; z: &quot;</span> &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="built_in">atan</span>((L1 * <span class="built_in">cos</span>(gamma) - z) / x) &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="built_in">asin</span>(<span class="built_in">sqrt</span>(<span class="built_in">pow</span>(L1 * <span class="built_in">sin</span>(gamma) - y, <span class="number">2</span>) + <span class="built_in">pow</span>(L1 * <span class="built_in">cos</span>(gamma) - z, <span class="number">2</span>)) /</span><br><span class="line">               L23)</span><br><span class="line">       &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;gamma: &quot;</span> &lt;&lt; gamma &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;L23: &quot;</span> &lt;&lt; L23 &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;beta: &quot;</span> &lt;&lt; beta &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;alfa: &quot;</span> &lt;&lt; alfa &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ZERO_OFFSET_SPOT</span></span><br><span class="line">  gamma = (legNumber == <span class="number">1</span> || legNumber == <span class="number">3</span>) ? gamma - MY_PI / <span class="number">2</span></span><br><span class="line">                                             : MY_PI / <span class="number">2</span> - gamma;</span><br><span class="line">  alfa = -alfa + (<span class="number">2</span> * MY_PI / <span class="number">3</span>);</span><br><span class="line">  beta = -beta + <span class="number">1.6</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> TO_DEGREE</span></span><br><span class="line">  gamma = gamma * <span class="number">180</span> / MY_PI;</span><br><span class="line">  alfa = alfa * <span class="number">180</span> / MY_PI;</span><br><span class="line">  beta = beta * <span class="number">180</span> / MY_PI;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  motorAngles[<span class="number">0</span>] = gamma;</span><br><span class="line">  motorAngles[<span class="number">1</span>] = alfa;</span><br><span class="line">  motorAngles[<span class="number">2</span>] = beta;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> motorAngles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="开始第一个demo"><a class="markdownIt-Anchor" href="#开始第一个demo"></a> 开始第一个demo</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">trot_balanced</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Robot *robot = <span class="keyword">new</span> <span class="built_in">Robot</span>();</span><br><span class="line">  GaitPlanner *gp = <span class="keyword">new</span> <span class="built_in">GaitPlanner</span>();</span><br><span class="line">  TrajectoryGenerator *tg = <span class="keyword">new</span> <span class="built_in">TrajectoryGenerator</span>();</span><br><span class="line">  StateEstimator *se = <span class="keyword">new</span> <span class="built_in">StateEstimator</span>();</span><br><span class="line">  MPCsolver *mpc = <span class="keyword">new</span> <span class="built_in">MPCsolver</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">init_global_variables</span>();</span><br><span class="line">  <span class="function">thread <span class="title">thread1</span><span class="params">(thread_trajectory_generate, robot, tg, se, gp)</span></span>;</span><br><span class="line">  <span class="function">thread <span class="title">thread2</span><span class="params">(thread_state_estimate, robot, se, gp)</span></span>;</span><br><span class="line">  <span class="function">thread <span class="title">thread3</span><span class="params">(thread_mpc_solver, robot, mpc)</span></span>;</span><br><span class="line">  <span class="function">thread <span class="title">thread4</span><span class="params">(thread_send_command, robot)</span></span>;</span><br><span class="line"></span><br><span class="line">  thread<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">  thread<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line">  thread<span class="number">3.</span><span class="built_in">join</span>();</span><br><span class="line">  thread<span class="number">4.</span><span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> gp;</span><br><span class="line">  <span class="keyword">delete</span> tg;</span><br><span class="line">  <span class="keyword">delete</span> se;</span><br><span class="line">  <span class="keyword">delete</span> mpc;</span><br><span class="line">  <span class="keyword">delete</span> robot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">trot_balanced</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2>
<h3 id="intel-mkl加速"><a class="markdownIt-Anchor" href="#intel-mkl加速"></a> Intel  MKL加速</h3>
<p>在<code>#include</code>之后的预处理区添加以下代码，可利用intel硬件加速Eigen矩阵的计算：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Intel MKL 线性代数库加速</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> EIGEN_USE_MKL_ALL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EIGEN_USE_MKL_ALL</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> EIGEN_VECTORIZE_SSE4_2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EIGEN_VECTORIZE_SSE4_2</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>此外针对MIT cheetah software有相关<a href="https://zhuanlan.zhihu.com/p/185693836">计算优化手段</a></p>
</li>
<li>
<p>MIT cheetah software<a href="https://github.com/mit-biomimetics/Cheetah-Software/tree/master">源码</a></p>
</li>
</ul>
<h3 id="代码性能测量"><a class="markdownIt-Anchor" href="#代码性能测量"></a> 代码性能测量</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> time_print  <span class="comment">//需要打印系统时间时保留</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    时间测量函数</span></span><br><span class="line"><span class="comment">    用法：</span></span><br><span class="line"><span class="comment">        #include &lt;timetest.cpp&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        float tStart = timetest();</span></span><br><span class="line"><span class="comment">        //待测量代码段</span></span><br><span class="line"><span class="comment">        float tEnd = timetest();</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;tEnd-tStart;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">timetest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> now = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="comment">// 通过不同精度获取相差的毫秒数</span></span><br><span class="line">    <span class="type">uint64_t</span> dis_millseconds =</span><br><span class="line">    std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(now.<span class="built_in">time_since_epoch</span>()).<span class="built_in">count</span>()</span><br><span class="line">    -</span><br><span class="line">    std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::seconds&gt;(now.<span class="built_in">time_since_epoch</span>()).<span class="built_in">count</span>()</span><br><span class="line">    * <span class="number">1000</span>;</span><br><span class="line">    <span class="type">time_t</span> tt = std::chrono::system_clock::<span class="built_in">to_time_t</span>(now);</span><br><span class="line">    <span class="keyword">auto</span> time_tm = <span class="built_in">localtime</span>(&amp;tt);</span><br><span class="line">    <span class="type">char</span> strTime[<span class="number">25</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">float</span> ttt = time_tm-&gt;tm_hour * <span class="number">3600</span> + time_tm-&gt;tm_min * <span class="number">60</span> +</span><br><span class="line">    time_tm-&gt;tm_sec + <span class="number">0.001</span>*(<span class="type">float</span>)dis_millseconds;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> time_print</span></span><br><span class="line">    <span class="built_in">sprintf</span>(strTime, <span class="string">&quot;%d-%02d-%02d %02d:%02d:%02d %03d&quot;</span>, time_tm-&gt;tm_year +</span><br><span class="line">    <span class="number">1900</span>, time_tm-&gt;tm_mon + <span class="number">1</span>, time_tm-&gt;tm_mday, time_tm-&gt;tm_hour,</span><br><span class="line">    time_tm-&gt;tm_min, time_tm-&gt;tm_sec, (<span class="type">int</span>)dis_millseconds);</span><br><span class="line">    std::cout &lt;&lt; strTime &lt;&lt; std::endl;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ttt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="eigen库使用"><a class="markdownIt-Anchor" href="#eigen库使用"></a> Eigen库使用</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">matrix.<span class="built_in">block</span>&lt;p,q&gt;(i,j);  <span class="comment">//从坐标(i,j)提取大小为&lt;p,q&gt;的块，可读可写</span></span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/293023673">快速入门矩阵运算——开源库Eigen</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/414383770">C++矩阵库Eigen的用法</a></li>
</ul>
<h3 id="qpoases使用"><a class="markdownIt-Anchor" href="#qpoases使用"></a> qpOASES使用</h3>
<ul>
<li><a href="https://blog.csdn.net/weixin_40709533/article/details/86064148">qpOASES使用说明</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/458087154">QPOASES使用</a></li>
</ul>
<h3 id="webots手册"><a class="markdownIt-Anchor" href="#webots手册"></a> Webots手册</h3>
<ul>
<li><a href="https://cyberbotics.com/doc/guide/spot?version=R2020b-rev1#!">Webots User Guide</a></li>
</ul>
<h3 id="imu相关"><a class="markdownIt-Anchor" href="#imu相关"></a> IMU相关</h3>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/344884686">IMU模块中的一些基本概念和常见问题</a></li>
</ul>
<h3 id="卡尔曼滤波相关"><a class="markdownIt-Anchor" href="#卡尔曼滤波相关"></a> 卡尔曼滤波相关</h3>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/37750839">卡尔曼滤波中关键参数的调整</a></li>
<li><a href="https://www.zhihu.com/question/47559783">怎样才叫真正理解卡尔曼滤波 Kalman Filter？</a></li>
</ul>
<h2 id="日志"><a class="markdownIt-Anchor" href="#日志"></a> 日志</h2>
<ul>
<li>11.19 构建第二章代码框架</li>
<li>11.20 实现<code>GaitScheduler</code>，增加性能测试函数</li>
<li>11.22 添加Eigen矩阵计算库，添加开源协议，开始实现<code>StateEstimator</code></li>
<li>11.23 实现<code>StateEstimator</code>卡尔曼滤波前的部分</li>
<li>11.24 实现<code>StateEstimator</code>卡尔曼滤波状态方程部分，完善readme<code>GaitScheduler</code>部分</li>
<li>11.28 实现<code>StateEstimator</code>完成(含卡尔曼滤波)，通过初步测试</li>
<li>11.30 实现<code>TrajectoryGenerator</code>至地形坡度估计，暂时跳过</li>
<li>12.02 分析MPC算法具体实现逻辑</li>
<li>12.06 搭建MPC算法框架</li>
<li>12.10 实现MPC初版代码</li>
<li>12.25 Webots仿真移植成功</li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>但行好事，莫问前程——首段实习总结</title>
    <url>/posts/2740227854/</url>
    <content><![CDATA[<blockquote>
<p>写于实习期结束在即，记录实习期间的一点点心得，分享给三个月前的自己与其他同样处境的小白。</p>
</blockquote>
<p>5.13—8.15，结束了为期三个月的实习，参加了转正答辩，取得了不错的反馈。作为个人第一段企业实习，从刚进公司什么都不会到慢慢接触代码，配置开发环境，进行业务分析，期间经历了很多心态上的转变与能力上的提升。下面的内容不涉及复杂的专业知识，主要是心态与方法上的总结，期待在下一次实践中复用。</p>
<h1 id="实习心得"><a class="markdownIt-Anchor" href="#实习心得"></a> 实习心得</h1>
<h2 id="入门重视原理分清主次"><a class="markdownIt-Anchor" href="#入门重视原理分清主次"></a> 入门——重视原理，分清主次</h2>
<p>入门一个新领域最好的方式是什么？不论哪个细分方向，在刚来什么都不会的时候，都建议先从效果业务等与日常生活紧密相关的方面开始看。比如，对于影像领域来说，什么是自动对焦？什么是自动白平衡？这些知识一来平时经常接触，容易引起兴趣从而加深记忆，二来与晦涩的代码与xml文件相去甚远，不需要刻意下功夫就可以理解。</p>
<blockquote>
<p>后面有机会更新一篇<a href="https://momaoto.github.io/posts/2366465946/">AE</a>相关的内容，是我一个上午对着资料整理出来的学习笔记。</p>
</blockquote>
<span id="more"></span>
<p>然后就到了看代码的阶段。安卓源码可以在<a href="http://aospxref.com/android-14.0.0_r2/">这里</a>查看，影像系统相关的代码分布在framework，hardware这几个仓中，几百万行的代码一开始完全不知道怎么入手，这里的经验是<strong>只看皮毛，只懂原理，不要深入，不看细节</strong>，这个阶段一旦深入会导致陷入递归的迷惑，最后开一大堆标签页大脑成功overflow，忘了自己最开始想看的是什么😎。</p>
<p>可是即使一开始只看个大概还是很有难度，一上来面临的全是没有听过的名词，不理解的文件夹名、类名，看了后面忘前面，怎么解决呢？这里的经验是<strong>多找别人的代码分析</strong>，用按流程和按文件夹两种方式尽量多地增加自己对重要组件的印象。按经验像camera_provider和Camera Server这样的组件起码要看5篇别人的分析才能它们有个初步的认知，这期间通过对着别人的代码分析读代码的方式走关键流程，一边读一边记，把看到的类和里面的方法画下来（不需要理解，只做记录），这样就大概知道什么组件会参与什么流程。然后找找有没有对代码目录的介绍，了解一下每个文件夹里放的是做什么的组件，如此反复 ，再结合一些对整体架构介绍的文章，就能逐步入门。度过了最痛苦的这一段，后面遇到新的知识（比如feature2）就会快很多。<br />
比较好的参考资料：<br />
<a href="https://deepinout.com/">极客笔记</a><br />
<a href="https://blog.csdn.net/Linux_zhicheng/article/details/123529629">Camera 服务启动流程简析</a><br />
<a href="https://www.jianshu.com/p/03954ac5f1ac">基于Android Camera2之openCamera 流程</a></p>
<h2 id="进阶流程梳理把握全局"><a class="markdownIt-Anchor" href="#进阶流程梳理把握全局"></a> 进阶——流程梳理，把握全局</h2>
<p>系统这方面的工作可以说是最复杂、最难上手的方向之一，按mentor的话说社招的有5年以上MTK工作经验的员工转Qcom得1年时间才能上手。自己的直观感受就是代码实在太多了，同去实习的算法集成、效果和驱动方向的小伙伴两个月的时候已经可以慢慢上手业务，或者在组会上发表自己的看法了，自己这里还在吭哧吭哧看代码。在上面介绍的看代码的方法中，流程梳理是最关键也最漫长的一个步骤。考虑到尽量让像三个月前的我一样的小白可以看懂，在这里按顺序总结一下需要我们梳理的流程，包括进程启动以及HAL层六大流程，这里只说大白话，可能不准确，但一定够易懂：</p>
<ol>
<li><strong>进程启动</strong>：发生在手机开机的时候，完成系统服务的注册和相关组件的建立，即在此之后APP就可以调用系统的相机服务了；</li>
<li><strong>open</strong>：发生在手机点开相机app的时候，完成手机对其上摄像头的检测和上电，即在此之后你的手机就知道自己有几个什么样的摄像头，以及打开它们了；</li>
<li><strong>configure stream</strong>：等下说，先看下一个；</li>
<li><strong>request</strong>：相机app打开后立刻就看到预览画面，这时候看到的就是APP对下层请求得到的返回图像，只不过可能是每秒显示24张图像看起来在动一样。这个图像每看到一张就是APP已经下发了一次请求，而下发的过程就是这里的request。完成每一帧的相关buffer、结构体的创建等；</li>
<li><strong>result</strong>：同样在你看到预览画面的时候进行，是上面说的返回图像的过程，即对request的应答。</li>
<li><strong>现在来说configure stream</strong>：翻译为配流，发生在request之前open之后，也就是打开相机APP到看到预览画面之间的短时间内，完成与下层对后面将要下发的request的格式信息的约定。即，告诉摄像头，等会APP要什么格式的图像，每秒24帧还是每秒60帧，4K图像还是1080p图像，RAW格式还是YUV格式等等。这里注意，每次打开相机以及切换模式时都会发生一次配流。</li>
<li><strong>flush</strong>：发生在切换相机模式或退出相机的时候，系统需要尽快清理干净buffer里没处理完的请求以便为新请求腾出位置，这个过程就是flush。这里的清理可以是正常处理完请求，也可以是直接丢弃，关键是不能超时。完成buffer清理、相关结构体的刷新。</li>
<li><strong>close</strong>：发生在关闭相机APP的时候。可以是按返回键退出，也可以是按home键挂起，均会发生close流程。完成open阶段建立的数据结构的摧毁回收工作。</li>
</ol>
<p>上述的这个解释看似粗浅，但网上很难找到这样的解释，很多是本人过了蛮久才理解到这个程度的（比如configure stream）。带着这样的概念去看代码，可能对理解相关的逻辑有一些帮助。</p>
<p>流程梳理的过程中当然要画图，便于后续不看代码也能查阅相关的类和操作。这里的经验是<strong>不要画UML图</strong>，而是画详细的二维的代码分析图（自己起的名字，我也不知道它叫什么）。<br />
UML图：<br />
<img src="%E4%BD%86%E8%A1%8C%E5%A5%BD%E4%BA%8B%EF%BC%8C%E8%8E%AB%E9%97%AE%E5%89%8D%E7%A8%8B%E2%80%94%E2%80%94%E9%A6%96%E6%AE%B5%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93_2024082111.png" alt="" /><br />
二维图：<br />
<img src="%E4%BD%86%E8%A1%8C%E5%A5%BD%E4%BA%8B%EF%BC%8C%E8%8E%AB%E9%97%AE%E5%89%8D%E7%A8%8B%E2%80%94%E2%80%94%E9%A6%96%E6%AE%B5%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93_2024082142.png" alt="" /></p>
<p>原因在于UML虽然能清晰看到调用与返回以及它们的时序关系，但对于刚开始梳理的阶段我们往往抓不住重点，将很多不重要的函数放上去使得整个图过于繁冗，极大的影响可读性。而且拓展性差，后续看到什么新的过程想加上去很难。所以就画下面那样的二维图，便于扩展，对于错误以及冗余信息包容度高，而且美观可读，关键类的作用一目了然。</p>
<p>最后，硬着头皮读代码还读不懂还要画图确实是蛮有挑战性的任务（删掉），但真的随着图越来越大，每一个看过的函数、每一段走过的流程都会变成与代码设计者最好的对话，仿佛身处迷宫之中越来越高，直至一眼就能看出每一条通往终点的路。</p>
<h2 id="展望不啻微芒造炬成阳"><a class="markdownIt-Anchor" href="#展望不啻微芒造炬成阳"></a> 展望——不啻微芒，造炬成阳</h2>
<p>代码梳理的过程要持续很久，后期就可以慢慢上手实战，这之后该干什么呢？</p>
<p>把师兄和导师给的文档保存起来，过一阵看一眼，看不懂就先放着，总有一天突然能看懂了会觉得受益匪浅。比如前面提到的<a href="https://deepinout.com/">极客笔记</a>，第1周看和第5周、第9周看的感受完全不同。</p>
<p>随着知识的深入明白的越来越多，不明白的也变得更多，对不了解的地方保持敬畏，该查查该问问，切忌主观臆测，不然会出现认知出现重大偏差却不自知的情况。</p>
<p>慢慢积累经验，从经验中总结出可复用的方法论，然后实践，然后修正，不断重复。经验是个很神奇的能力，本人亲自见证前辈依靠经验看着log在一个看上去毫无关联的地方做了修改然后解决了问题。这部分是最重要但教不会的，一定要重视积累。</p>
<p>向别人讲你学到了什么，并尝试回答他们的问题。一起实习的不同方向的小伙伴来问你的方向的问题，要做到能用通俗的语言把它讲清，乃至在答辩上简洁准确地回答leader的问题，需要对知识反复的总结和深入的理解。这可能不是学习新知识最好的办法，但一定是检验旧知识最有效的方法。</p>
<p>最后，实习期间的工作总结可以看看这里：<a href="/posts/76836219/" title="实习工作总结">实习工作总结</a></p>
<p>以上，共勉。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>实习工作总结</title>
    <url>/posts/76836219/</url>
    <content><![CDATA[<h1 id="工作总结"><a class="markdownIt-Anchor" href="#工作总结"></a> 工作总结</h1>
<h2 id="企业文化"><a class="markdownIt-Anchor" href="#企业文化"></a> 企业文化</h2>
<p>愿景，使命，核心价值观</p>
<h1 id="业务流程"><a class="markdownIt-Anchor" href="#业务流程"></a> 业务流程</h1>
<h2 id="项目开发流程"><a class="markdownIt-Anchor" href="#项目开发流程"></a> 项目开发流程</h2>
<h3 id="敏捷开发以需求为核心"><a class="markdownIt-Anchor" href="#敏捷开发以需求为核心"></a> 敏捷开发（以需求为核心)</h3>
<p>参考：<a href="https://learn.microsoft.com/zh-cn/devops/plan/what-is-agile-development">Microsoft：什么是敏捷开发？</a></p>
<h3 id="scrum框架"><a class="markdownIt-Anchor" href="#scrum框架"></a> Scrum框架</h3>
<p>三个角色：Product Owner，Scrum Master，Developers</p>
<p>六个步骤：需求梳理，迭代计划，迭代执行，每日站会，迭代评审，迭代回顾</p>
<span id="more"></span>
<h3 id="ipd集成产品开发"><a class="markdownIt-Anchor" href="#ipd集成产品开发"></a> IPD（集成产品开发）</h3>
<p>三个概念：市场管理，开发管理，人才管理</p>
<p>关键角色：IPMT集成组合管理团队，PDT产品开发团队</p>
<p>评审机制：决策评审DCP，技术评审TR</p>
<p>关键流程：市场调研，需求管理，概念，计划，开发，验证，发布，生命管理周期</p>
<h3 id="影像项目开发流程"><a class="markdownIt-Anchor" href="#影像项目开发流程"></a> 影像项目开发流程</h3>
<p>立项（概念，计划，开发），CNC，试模，试产，首量，批量</p>
<p>系统开发（上三层，算法集成，定制框架），效果（效果调试），OS（UI），算法（算法开发）</p>
<h1 id="工具技巧"><a class="markdownIt-Anchor" href="#工具技巧"></a> 工具技巧</h1>
<p>开发环境配置：FileZilla(FTP)，MobaXterm(SSH)，挂载SAMBA，编译，加log，push，刷机，adb指令，VScode工作区，.bashrc</p>
<p>实用工具技巧：<a href="http://TextAnalysisTool.NET">TextAnalysisTool.NET</a>(分析log)，cmder(cmd增强)，Notepad++(记事本增强），Visio(UML图，类图）</p>
<h1 id="语法知识"><a class="markdownIt-Anchor" href="#语法知识"></a> 语法知识</h1>
<p>C++11：智能指针，虚函数和纯虚函数，接口与实现分离的两种方式（IMPL模式与抽象类）</p>
<p>设计模式：工厂方法模式，单例模式</p>
<h1 id="专业知识"><a class="markdownIt-Anchor" href="#专业知识"></a> 专业知识</h1>
<h3 id="安卓机制"><a class="markdownIt-Anchor" href="#安卓机制"></a> 安卓机制</h3>
<p>Android分层架构，Camera架构，Binder进程间通信，HIDL与AIDL接口，tombstone机制</p>
<h3 id="camera流程"><a class="markdownIt-Anchor" href="#camera流程"></a> Camera流程</h3>
<p>进程启动</p>
<p>App层，Framework层，HAL层的initialize，open，configure_stream，process_request，process_result流程梳理</p>
<p>高通Camx-CHI架构</p>
<h3 id="效果业务"><a class="markdownIt-Anchor" href="#效果业务"></a> 效果业务</h3>
<p>SAT（空间对齐变换），ISP流程（3A，Demosaic，图像降噪，阴影矫正，几何矫正，颜色校正，伽马矫正，边缘增强），摄像头马达（对焦AF，防抖OIS，变焦ZOOM），AEC（自动曝光），AWB（自动白平衡）</p>
<h3 id="缺陷分析"><a class="markdownIt-Anchor" href="#缺陷分析"></a> 缺陷分析</h3>
<p>8K宽幅闪退</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>夜爬华山攻略</title>
    <url>/posts/3458072089/</url>
    <content><![CDATA[<h1 id="夜爬华山攻略"><a class="markdownIt-Anchor" href="#夜爬华山攻略"></a> 夜爬华山攻略</h1>
<blockquote>
<p>写于2023暑假，时效性有待确认。故事的起点，是一个恐高的赵老师…</p>
</blockquote>
<h2 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h2>
<h3 id="天气"><a class="markdownIt-Anchor" href="#天气"></a> 天气</h3>
<p>微博“华山气象”每天播报未来三天天气：</p>
<p>根据天气，气温，日出观赏率，目前来看26号是个不错的选择。（呜呜，食言了）</p>
<span id="more"></span>
<h3 id="交通"><a class="markdownIt-Anchor" href="#交通"></a> 交通</h3>
<ul>
<li>
<p>西安北-华山北：高铁（30min，54.5r)</p>
</li>
<li>
<p>华山北-玉泉院：</p>
<ul>
<li>
<p>公交1路车或2路到游客中心（15min，免费），再摆渡车到玉泉院（免费）</p>
</li>
<li>
<p>出租车经过华阴到玉泉院（5r每人）</p>
<blockquote>
<p>网上购票需要<strong>18点以前</strong>到游客中心取票，如果错过现场买即可</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="必备物品"><a class="markdownIt-Anchor" href="#必备物品"></a> 必备物品</h3>
<ul>
<li>
<p><strong>衣服</strong>：短袖长裤，防晒衣，春秋季外套，帽子，墨镜</p>
<blockquote>
<p>山顶可能会风很大，加上衣服湿透，准备厚衣服或现租大衣50r</p>
</blockquote>
</li>
<li>
<p><strong>手套</strong>：沿途攀爬铁链（玉泉院防滑手套3r，山上5-10r）</p>
</li>
<li>
<p><strong>水、食物</strong>：水每人1-2L（山上5-10r每瓶），巧克力，功能饮料，面包</p>
</li>
<li>
<p><strong>充电宝</strong>：不推荐上山借</p>
</li>
<li>
<p>现金：备用</p>
</li>
<li>
<p>证件：学生证，身份证</p>
</li>
<li>
<p>杂物：湿巾，暖宝宝，手电筒</p>
</li>
</ul>
<h3 id="费用"><a class="markdownIt-Anchor" href="#费用"></a> 费用</h3>
<p>提前在公众号预约购买，</p>
<p><strong>门票（学生）：80r/人</strong></p>
<p><strong>西峰索道（单程）：126r/人</strong></p>
<p><strong>西峰索道交通车：40r/人</strong></p>
<p>鹞子翻身：30r/人</p>
<p>长空栈道：30r/人</p>
<blockquote>
<p>以上景区费用+交通费用，<strong>共80+126+40+30+30+55+5≈370r</strong>。</p>
<p>物资准备不算在内。</p>
</blockquote>
<h2 id="行程"><a class="markdownIt-Anchor" href="#行程"></a> 行程</h2>
<h3 id="北上西下"><a class="markdownIt-Anchor" href="#北上西下"></a> 北上西下</h3>
<p><strong>玉泉院-北峰-中峰-东峰-南峰-西峰(索道)-游客中心</strong></p>
<table>
<thead>
<tr>
<th>地点</th>
<th>玉泉院</th>
<th>北峰</th>
<th>中峰</th>
<th>东峰</th>
<th>南峰</th>
<th>西峰(索道)</th>
<th>游客中心</th>
</tr>
</thead>
<tbody>
<tr>
<td>下一地点用时</td>
<td>0h</td>
<td>4h</td>
<td>2h</td>
<td>0.6h</td>
<td>1h</td>
<td>0.5h</td>
<td>0.4h</td>
</tr>
</tbody>
</table>
<blockquote>
<p>玉泉院开始到达东峰观日台约6-7h，按第二天凌晨5点看日出计算<strong>最晚21:00上山</strong>比较合理。不过根据经验暑期夜爬华山的学生巨多（可能有2w人），早点到东峰抢位置是个明智的选择。如果人太多，金锁关或鹞子翻身的左看台也是个不错的选择。</p>
</blockquote>
<p>东峰-南峰之间有鹞子翻身、长空栈道可选择，每人每项30r，可能要排队约1h。</p>
<p>下西峰索道后现买出山大巴，每人40r，到达游客中心。</p>
<h2 id="注意事项避雷"><a class="markdownIt-Anchor" href="#注意事项避雷"></a> 注意事项/避雷</h2>
<ul>
<li>
<p>游客中心吃饭的地方的比玉泉院多且划算，准备好再出发</p>
</li>
<li>
<p>玉泉院超市水1r，山上更贵，山顶5-10r，每个补给站都说再往上就没补给站了，其实只是价格更贵，自行选择</p>
</li>
<li>
<p>全程徒步时间长达10h+，期间难以得到有效的休息，上山前充分休息，下山后几天可能行动能力会受到很大影响</p>
</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>常见通信协议知识整理</title>
    <url>/posts/279645537/</url>
    <content><![CDATA[<p>见下图：</p>
<span id="more"></span>
<p><img src="%E6%9C%BA%E9%98%9F_0.jpg" alt="常见通信协议知识整理/机队_0.jpg" /><img src="%E6%9C%BA%E9%98%9F_1.jpg" alt="" /></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>我的到手工资到底是多少？</title>
    <url>/posts/2732168838/</url>
    <content><![CDATA[<blockquote>
<p>p.s.：每次和人说起薪资，要么说总包，要么说税前月薪，就会被问“这是啥都没扣的，到手还要少好多”，自己也明白到手会少很多，但不知道具体会扣掉多少，这里直接来了解一下算法。<br />
当然，懒人攻略：<a href="https://www.zhipin.com/wage/">在线工资计算器</a></p>
</blockquote>
<p>先了解几个公式：</p>
<ul>
<li>
<p>到手工资 = 税前工资 - 五险一金 - 税</p>
</li>
<li>
<p>可支配工资 = 到手工资 + 公积金 （我自己这么认为的）</p>
</li>
</ul>
<span id="more"></span>
<h1 id="五险一金"><a class="markdownIt-Anchor" href="#五险一金"></a> 五险一金</h1>
<p>社保即社会保险，就是五险。</p>
<p>五险一金包含：</p>
<ul>
<li>养老保险（公司每个月付税前工资16%，个人8%）；</li>
<li>生育保险（公司每个月付税前工资0.45-1%，个人0%）；</li>
<li>医疗保险（公司每个月付税前工资8%，个人2%）；</li>
<li>工伤保险（公司每个月付税前工资0.3-0.6%，个人0%）；</li>
<li>失业保险（公司每个月付税前工资0.5，个人0.5%）；</li>
<li>住房公积金（公司每个月付税前工资12%，个人12%）</li>
</ul>
<p>这么一算</p>
<ul>
<li>
<p>到手工资 = 0.775 * 税前工资 - 税</p>
</li>
<li>
<p>可支配工资 = 0.895 * 税前工资 - 税</p>
</li>
</ul>
<p>好了，现在只需要了解税是如何计算的了。</p>
<blockquote>
<p>专门说说住房公积金。公积金可以通过<strong>租房</strong>的方式提取，条件是本地无房，且租房的支出超过了薪资的一定比例（比如5%）。此时可申请提取公积金，以北京为例，额度为4500元/季度、6600元/季度两种，第二种需要的申请材料更多。</p>
</blockquote>
<h1 id="税"><a class="markdownIt-Anchor" href="#税"></a> 税</h1>
<p>目前计税方式可以参考下面的：</p>
<table>
<thead>
<tr>
<th>级数</th>
<th>累计</th>
<th>预扣率(%)</th>
<th>速算扣除数</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>不超过36000元的部分</td>
<td>3</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>超过36000元至144000元的部分</td>
<td>10</td>
<td>2520</td>
</tr>
<tr>
<td>3</td>
<td>超过144000元至300000元的部分</td>
<td>20</td>
<td>16920</td>
</tr>
<tr>
<td>4</td>
<td>超过300000元至420000元的部分</td>
<td>25</td>
<td>31920</td>
</tr>
<tr>
<td>5</td>
<td>超过420000元至660000元的部分</td>
<td>30</td>
<td>52920</td>
</tr>
<tr>
<td>6</td>
<td>超过660000元至960000元的部分</td>
<td>35</td>
<td>85920</td>
</tr>
<tr>
<td>7</td>
<td>超过960000元的部分</td>
<td>45</td>
<td>181920</td>
</tr>
</tbody>
</table>
<blockquote>
<p>新税法计算公式：<br />
累计应纳税所得额 = 累计收入 - 累计免税收入 - 累计减除费用 - 累计专项扣除 - 累计专项附加扣除 - 累计依法确定的其他扣除<br />
当月应纳税额 =（累计应纳税所得额 × 税率/预扣率 - 速算扣除数） - 累计已缴税额</p>
</blockquote>
<p>也就是说，每个月的税收是先计算当前累计计税收入，然后再用上面的表看对应的税率和扣除数，然后做乘法和减法得到。<strong>既然如此，那么到当月的累计税收就是到当月的累计计税收入乘上对应的预扣率 - 对应的速算扣除数。</strong></p>
<p>好了，那么我们可以计算一年总共需要扣除多少税了。以刚毕业的大学生为例，假设税前工资为salary（月薪），那么这一年它的计税收入为：</p>
<p>一年计税收入 = 12 * (salary - 5000 - 0.225 * salary - 1500 = 12 * (0.775 * salary - 6500)</p>
<p>1）如果说 0.775 * salary - 6500 &lt;= 0 即 <strong>salary &lt;= 8387</strong> 那么你不需要缴税 （此时我不知道应该开心还是应该伤心）</p>
<p>2）如果说 0.775 * salary - 6500 &lt;= 3000 即 <strong>salary &lt;= 12258</strong> 那么你的累计计税收入落在上表第一级，需要缴税： 12 * (0.775 * salary - 6500) * 0.03，那么每个月平均缴税(0.775 * salary - 6500) * 0.03</p>
<p>3）如果说 0.775 * salary - 6500 &lt;= 12000 即 <strong>salary &lt;= 23871</strong> 那么你的累计计税收入落在上表第二级，需要缴税： 12 * (0.775 * salary - 6500) * 0.1 - 2520，那么每个月平均缴税(0.775 * salary - 6500) * 0.1 - 210</p>
<p>4）如果说 0.775 * salary - 6500 &lt;= 25000 即 <strong>salary &lt;= 40645</strong> 那么你的累计计税收入落在上表第三级，需要缴税： 12 * (0.775 * salary - 6500) * 0.2 - 16920，那么每个月平均缴税(0.775 * salary - 6500) * 0.2- 1410</p>
<p>5）如果说 0.775 * salary - 6500 &lt;= 35000 即 <strong>salary &lt;= 5354</strong>8 那么你的累计计税收入落在上表第四级，需要缴税： 12 * (0.775 * salary - 6500) * 0.25- 31920，那么每个月平均缴税(0.775 * salary - 6500) * 0.25- 2660</p>
<p>6）如果说 0.775 * salary - 6500 &lt;= 55000 即 <strong>salary &lt;= 79355</strong> 那么你的累计计税收入落在上表第五级，需要缴税： 12 * (0.775 * salary - 6500) * 0.3- 52920，那么每个月平均缴税(0.775 * salary - 6500) * 0.3- 4410</p>
<p>7）如果说 0.775 * salary - 6500 &lt;= 80000 即 <strong>salary &lt;= 111613</strong> 那么你的累计计税收入落在上表第六级，需要缴税： 12 * (0.775 * salary - 6500) * 0.35- 85920，那么每个月平均缴税(0.775 * salary - 6500) * 0.35- 7160</p>
<p>8）如果说 0.775 * salary - 6500 &gt; 80000 即 <strong>salary &gt; 111613</strong> 那么你的累计计税收入落在上表第七级，需要缴税： 12 * (0.775 * salary - 6500) * 0.45- 181920，那么每个月平均缴税(0.775 * salary - 6500) * 0.45- 15160</p>
<p>简单举几个例子：</p>
<p>月薪一万：税37.5, 到手收入7712.5, 可支配收入8912.5</p>
<p>月薪两万： 税690.0, 到手收入14810.0, 可支配收入17210.0</p>
<p>月薪三万： 税 1940.0，到手收入21310.0，可支配收入 24910.0</p>
<p>月薪四万： 税3490.0，到手收入27510.0，可支配收入32310.0</p>
<p>月薪五万：税5402.5，到手收入33347.5，可支配收入39347.5</p>
<p>当然上面这个计算没有考虑五险一金是有上限的，大家感兴趣可以看看如果考虑这个和上面分析的差距会有多大。</p>
<p>按照以上计算出的可支配收入还需要减去租房成本，可称得上“真正到手收入”。</p>
<blockquote>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/649649927">到手工资怎么算</a></p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>相机标定</title>
    <url>/posts/3658139673/</url>
    <content><![CDATA[<blockquote>
<p><strong>从零开始</strong>理解相机标定原理</p>
</blockquote>
<h1 id="导入"><a class="markdownIt-Anchor" href="#导入"></a> 导入</h1>
<p>使用相机对三维世界拍照，可以生成一张二维的照片。然而：</p>
<ul>
<li>三维世界中的物体比例是否被<strong>真实的</strong>反映在了照片中？（镜头畸变）</li>
<li>如果是，二者的大小比例是否可以定量分析？（像素焦距、光学中心位置）</li>
<li>如果可以，能否利用已知的比例信息与透视原理<strong>从二维照片中还原出三维世界的深度信息</strong>？（深度感知，三维重建）<br />
相机标定是尝试解决上述问题的关键步骤。</li>
</ul>
<span id="more"></span>
<h1 id="相机标定的直接目标"><a class="markdownIt-Anchor" href="#相机标定的直接目标"></a> 相机标定的直接目标</h1>
<p>通过建立<strong>针孔相机</strong>模型<strong>估计9个参数</strong>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>f</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>c</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>c</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>k</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>k</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>p</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>p</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">f_x, f_y, c_x, c_y, k_1, k_2, k_3, p_1, p_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">f_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> , <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">f_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> ：像素焦距</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">c_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>  ,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">c_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> ：图像坐标系原点到主光轴的偏移量</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">k_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">k_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">k_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">p_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ：畸变参数，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">k_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">k_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">k_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是径向畸变参数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">p_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是切向畸变参数<br />
下面从针孔相机模型开始了解。</li>
</ul>
<h1 id="了解针孔相机模型"><a class="markdownIt-Anchor" href="#了解针孔相机模型"></a> 了解针孔相机模型</h1>
<p>通常我们将相机镜头看作一个凸透镜，成像原理如图。</p>
<p><img src="%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A_2025010341.png" alt="" /></p>
<p>但在计算机视觉和计算机图形学中为了简化建模，我们将镜头视作小孔成像，根据简单的光沿直线传播原理建立针孔相机模型，如图。</p>
<p><img src="%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A_2025010319.png" alt="" /></p>
<p>抽象为数学模型如下：</p>
<p><img src="%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A_2025010434.png" alt="" /></p>
<h2 id="首先来了解模型本身"><a class="markdownIt-Anchor" href="#首先来了解模型本身"></a> 首先来了解模型本身</h2>
<p>Q、P分别为物点与像点，它们的连线过光心O。红线为成像所在平面，即CMOS面，它与光心O的距离<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>称作相机的<strong>物理焦距</strong>，单位为mm。成像在CMOS面上沿各个方向物理焦距都相同（唯一），但由于图像使用像素来显示，像素本身长与宽可能不同，因此水平方向与垂直方向的<strong>像素焦距</strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">f_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> , <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">f_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 不同。具体计算方法是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>x</mi></msub><mo>=</mo><mfrac><mi>f</mi><mi>k</mi></mfrac><mo separator="true">,</mo><msub><mi>f</mi><mi>y</mi></msub><mo>=</mo><mfrac><mi>f</mi><mi>l</mi></mfrac></mrow><annotation encoding="application/x-tex">f_x=\frac{f}{k},f_y=\frac{f}{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>为像素的长与宽。</p>
<blockquote>
<p><em>光心：镜头透镜中心，即针孔模型的孔</em><br />
<em>像素焦距：相机在图像平面水平方向（x轴）和垂直方向（y轴）的焦距，单位是像素</em></p>
</blockquote>
<h2 id="接下来建立两个关键的坐标系"><a class="markdownIt-Anchor" href="#接下来建立两个关键的坐标系"></a> 接下来建立两个关键的坐标系</h2>
<p>以后所有的估算工作基于这两个坐标系的变换：<strong>相机坐标系</strong>与<strong>图像坐标系</strong>。</p>
<ul>
<li>相机坐标系：以光心O为原点建立<strong>三维坐标系</strong>，X与Y坐落在透镜（小孔）平面上，Z轴沿主光轴按右手法则方向延申。单位是<strong>mm</strong>。</li>
<li>图像坐标系：以画板左上角为原点（画板是什么鬼？后面会解释），成像平面（CMOS面）建立<strong>二维坐标系</strong>，U与V轴按右手法则排列，分别指示成像的长与宽。单位是<strong>像素</strong>。此处记图像坐标系原点到主光轴的偏移量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">c_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> , <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">c_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> （单位是像素）。</li>
</ul>
<p>为方便使用，将像点对称至与物点同侧，与原模型等价。</p>
<p><img src="%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A_2025010440.png" alt="" /></p>
<h1 id="标定相机内参"><a class="markdownIt-Anchor" href="#标定相机内参"></a> 标定相机内参</h1>
<ol>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>点在图像坐标系下坐标（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>u</mi><mrow><mi>c</mi><mi>c</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">u_{ccd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> , <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mrow><mi>c</mi><mi>c</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">v_{ccd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）已知；</li>
<li>Q点在相机坐标系下坐标（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span> , <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span> , <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Z</mi></mrow><annotation encoding="application/x-tex">Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span> ）已知；</li>
<li>根据相似三角形关系得出：</li>
</ol>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>u</mi><mrow><mi>c</mi><mi>c</mi><mi>d</mi></mrow></msub><mo>−</mo><msub><mi>c</mi><mi>x</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>f</mi><mi>x</mi></msub><mrow><mo fence="true">(</mo><mfrac><mi>X</mi><mi>Z</mi></mfrac><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>v</mi><mrow><mi>c</mi><mi>c</mi><mi>d</mi></mrow></msub><mo>−</mo><msub><mi>c</mi><mi>y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>f</mi><mi>y</mi></msub><mrow><mo fence="true">(</mo><mfrac><mi>Y</mi><mi>Z</mi></mfrac><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} u_{ccd} - c_x &amp;= f_x \left(\frac{X}{Z}\right) \\ v_{ccd} - c_y &amp;= f_y \left(\frac{Y}{Z}\right) \end{aligned} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.40006em;vertical-align:-2.45003em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95003em;"><span style="top:-4.95003em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45003em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95003em;"><span style="top:-4.95003em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>也即：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>u</mi><mrow><mi>c</mi><mi>c</mi><mi>d</mi></mrow></msub><mo>⋅</mo><mi>Z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>v</mi><mrow><mi>c</mi><mi>c</mi><mi>d</mi></mrow></msub><mo>⋅</mo><mi>Z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>Z</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>X</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>Y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>Z</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{pmatrix} u_{ccd} \cdot Z \\ v_{ccd} \cdot Z \\ Z \end{pmatrix} = \begin{pmatrix} f_x &amp; 0 &amp; c_x \\ 0 &amp; f_y &amp; c_y \\ 0 &amp; 0 &amp; 1 \end{pmatrix} \begin{pmatrix} X \\ Y \\ Z \end{pmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M291 0 H417 V300 H291 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M457 0 H583 V300 H457 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M291 0 H417 V300 H291 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M457 0 H583 V300 H457 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M291 0 H417 V300 H291 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M457 0 H583 V300 H457 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>通过多组采点，得到参数矩阵，就估算出了9个参数中的前四个。</p>
<h1 id="标定畸变参数"><a class="markdownIt-Anchor" href="#标定畸变参数"></a> 标定畸变参数</h1>
<p>上述模型是理想情况，实际上相机成像时会产生两种畸变，由透镜形状引起的畸变是<strong>径向畸变</strong>，而由透镜安装与成像平面不平行引起的畸变是<strong>切向畸变</strong>。</p>
<p>径向畸变分为桶形畸变和枕型畸变，以及由二者复合而成的复合畸变，如下：</p>
<p><img src="%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A_2025010456.png" alt="" /></p>
<p>切向畸变是透镜安装歪了，成像成梯形拉伸，如下：</p>
<p><img src="%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A_2025010444.png" alt="" /></p>
<p>我们有固定的公式来矫正畸变。设：</p>
<ul>
<li><strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>d</mi></msub><mtext>​</mtext><mo separator="true">,</mo><msub><mi>y</mi><mi>d</mi></msub><mtext>​</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_d​,y_d​)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">​</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">​</span><span class="mclose">)</span></span></span></span></strong>：实际点（畸变点）</li>
<li><strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>u</mi></msub><mtext>​</mtext><mo separator="true">,</mo><msub><mi>y</mi><mi>u</mi></msub><mtext>​</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_u​,y_u​)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">​</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">​</span><span class="mclose">)</span></span></span></span></strong>：理想点（无畸变点）</li>
</ul>
<p>实际点由两种畸变合成而来：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>x</mi><mi>d</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>x</mi><mrow><mi>r</mi><mi>d</mi></mrow></msub><mo>+</mo><msub><mi>x</mi><mrow><mi>t</mi><mi>d</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>y</mi><mi>d</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>y</mi><mrow><mi>r</mi><mi>d</mi></mrow></msub><mo>+</mo><msub><mi>y</mi><mrow><mi>t</mi><mi>d</mi></mrow></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} x_{d} &amp;= x_{rd} + x_{td} \\ y_{d} &amp;= y_{rd} + y_{td} \end {aligned} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>其中径向畸变：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mrow><mi>r</mi><mi>d</mi></mrow></msub><mo>=</mo><mi>x</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><msup><mi>r</mi><mn>2</mn></msup><mo>+</mo><msub><mi>k</mi><mn>2</mn></msub><msup><mi>r</mi><mn>4</mn></msup><mo>+</mo><msub><mi>k</mi><mn>3</mn></msub><msup><mi>r</mi><mn>6</mn></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>y</mi><mrow><mi>r</mi><mi>d</mi></mrow></msub><mo>=</mo><mi>y</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><msup><mi>r</mi><mn>2</mn></msup><mo>+</mo><msub><mi>k</mi><mn>2</mn></msub><msup><mi>r</mi><mn>4</mn></msup><mo>+</mo><msub><mi>k</mi><mn>3</mn></msub><msup><mi>r</mi><mn>6</mn></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}x_{rd}=x(1+k_1r^2+k_2r^4+k_3r^6)\\y_{rd}=y(1+k_1r^2+k_2r^4+k_3r^6)\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.048216em;vertical-align:-1.274108em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.774108em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.385892em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.274108em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>切向畸变：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mrow><mi>t</mi><mi>d</mi></mrow></msub><mo>=</mo><mi>x</mi><mo>+</mo><mo stretchy="false">[</mo><mn>2</mn><msub><mi>p</mi><mn>1</mn></msub><mi>y</mi><mo>+</mo><msub><mi>p</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msup><mi>r</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><msup><mi>x</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>y</mi><mrow><mi>t</mi><mi>d</mi></mrow></msub><mo>=</mo><mi>y</mi><mo>+</mo><mo stretchy="false">[</mo><msub><mi>p</mi><mn>1</mn></msub><mo stretchy="false">(</mo><msup><mi>r</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><msup><mi>y</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><msub><mi>p</mi><mn>2</mn></msub><mi>x</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}x_{td}=x+[2p_1y+p_2(r^2+2x^2)]\\y_{td}=y+[p_1(r^2+2y^2)+2p_2x]\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.048216em;vertical-align:-1.274108em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.774108em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">]</span></span></span><span style="top:-2.385892em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.274108em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>利用已知的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>d</mi></msub><mtext>​</mtext><mo separator="true">,</mo><msub><mi>y</mi><mi>d</mi></msub><mtext>​</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_d​,y_d​)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">​</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">​</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>u</mi></msub><mtext>​</mtext><mo separator="true">,</mo><msub><mi>y</mi><mi>u</mi></msub><mtext>​</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_u​,y_u​)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">​</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">​</span><span class="mclose">)</span></span></span></span> 估算5个畸变参数。之后，可利用理想点再次估计4个相机内参。</p>
<h1 id="具体的实现方法"><a class="markdownIt-Anchor" href="#具体的实现方法"></a> 具体的实现方法</h1>
<p>相机标定最常用的是的张正友标定法（张氏标定法），操作简单、精度较高，可以满足大部分场合。利用棋盘格标定板进行标定，棋盘格上的每个格子大小都是已知的，也即其相机坐标系下的坐标都是已知的。当相机拍摄标定板的图像时，通过相应的图像检测算法，就可以获得每一个角点在图像坐标系下的坐标，进而获得相机的内参矩阵和畸变参数。需要注意的是，张正友标定法只考虑了径向畸变，没有考虑切向畸变。</p>
<p><img src="%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A_2025010535.png" alt="" /></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>跨形态机器人的语言-视觉分层强化学习控制架构</title>
    <url>/posts/2137251158/</url>
    <content><![CDATA[<p><img src="Framework.jpg" alt="" /></p>
<blockquote>
<p>项目地址：<br />
VLM: <a href="https://gitee.com/feng-xie-yi/vlm_car">https://gitee.com/feng-xie-yi/vlm_car</a><br />
RL: <a href="https://gitee.com/momaoto/rl-locomotion-mujoco">https://gitee.com/momaoto/rl-locomotion-mujoco</a></p>
</blockquote>
<h1 id="项目信息"><a class="markdownIt-Anchor" href="#项目信息"></a> 项目信息</h1>
<h2 id="选题思路"><a class="markdownIt-Anchor" href="#选题思路"></a> 选题思路</h2>
<p>现有跨形态机器人控制需为不同硬件单独设计策略，开发成本高且泛化性差。本课题尝试使用语言指令统一接口，用户用自然语言指挥不同形态机器人完成同一任务，通过分层强化学习框架，高层视觉语言模型（VLM）解析任务生成中间指令，再通过低层强化学习策略适配不同形态的底层动作，通过仿真器快速训练跨形态通用策略，最后部署到真机运行。</p>
<span id="more"></span>
<blockquote>
<p>现有跨形态机器人（如四足、轮式、人形）控制通常需为不同硬件单独设计策略，开发成本高且泛化性差。本课题提出一种基于语言-视觉分层强化学习的跨形态机器人通用控制架构，旨在通过自然语言指令统一接口，实现多形态机器人的任务适配与高效控制。具体而言，高层视觉语言模型（VLM）解析用户指令并生成标准化中间指令（如“左转30度”），低层强化学习策略则根据机器人形态参数化编码，将中间指令映射为具体形态的底层动作（如四足步态或轮式转向）。通过NVIDIA Isaac Sim仿真器快速训练跨形态通用策略，并结合X5 RDK人形机器人及四足机器人进行真机验证，本课题展示了同一语言指令在不同形态机器人上的高效执行能力。实验结果表明，该框架在动态避障、复杂地形适应及任务重规划等方面具有显著优势，为跨形态机器人控制提供了一种低成本、高泛化的解决方案。</p>
</blockquote>
<h2 id="拟采用技术方案"><a class="markdownIt-Anchor" href="#拟采用技术方案"></a> 拟采用技术方案</h2>
<p>拟采用分层强化学习架构，使用高层VLM完成从图像与自然语言输入到标准化中间指令的输出的转换，再使用底层RL策略完成最终动作序列的生成。采用mujoco+多形态机器人模型进行仿真验证，最终尝试跨机器人平台的真机部署。</p>
<h2 id="预期展示效果"><a class="markdownIt-Anchor" href="#预期展示效果"></a> 预期展示效果</h2>
<p>仿真环境下完成同一指令“绕过障碍物进入右侧房间”驱动四足/轮式机器人进行不同路径规划与动作执行，真机使用自己搭建轮式小车+Petoi Bittle进行展示。后续增加更多语言交互。</p>
<h2 id="x5-rdk用法"><a class="markdownIt-Anchor" href="#x5-rdk用法"></a> X5 RDK用法</h2>
<p>整合X5的RGB摄像头、IMU数据，输入高层VLM和低层策略，通过ROS2桥接，接收低层策略输出的关节目标角度，转换为电机控制指令。</p>
<h2 id="仿真器验证内容"><a class="markdownIt-Anchor" href="#仿真器验证内容"></a> 仿真器验证内容</h2>
<p>训练四足策略后，冻结高层VLM，仅微调低层进行人形机器人与轮式机器人的适配。仿真环境中随机生成障碍物、地形起伏、光照变化，验证策略鲁棒性，同时对比端到端的RL策略的效率与所需算力差异。</p>
<h2 id="真机演示内容"><a class="markdownIt-Anchor" href="#真机演示内容"></a> 真机演示内容</h2>
<p>轮式机器人执行“沿走廊前进，在第二个门口右转”，足式机器人完成“避开地面杂物，将指定物品放置到指定位置”。</p>
<h2 id="项目分工"><a class="markdownIt-Anchor" href="#项目分工"></a> 项目分工</h2>
<table>
<thead>
<tr>
<th>数据与算法</th>
<th>建模与仿真</th>
<th>实机部署</th>
</tr>
</thead>
<tbody>
<tr>
<td>仿真与实机数据采集（Hao）</td>
<td>仿真场景库（Shay）</td>
<td>X5 RDK部署（Hao）</td>
</tr>
<tr>
<td>VLM的部署与微调（Shay）</td>
<td>训练代码（Momaoto）</td>
<td>实机避障调试（Momaoto）</td>
</tr>
<tr>
<td>动作Policy设计与优化（Momaoto）</td>
<td>机器人建模（Shay）</td>
<td>跨形态迁移-实机（Hao）</td>
</tr>
<tr>
<td></td>
<td>跨形态迁移-仿真（Momaoto）</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="项目预算"><a class="markdownIt-Anchor" href="#项目预算"></a> 项目预算</h2>
<p>一台用于强化训练的工程机（或云服务器算力支持），3D打印，舵机升级电机（待定）</p>
<h2 id="项目进度与计划"><a class="markdownIt-Anchor" href="#项目进度与计划"></a> 项目进度与计划</h2>
<p>仿真方面目前已完成仿真环境的搭建与模型构建，后续会注重数据获取、强化训练与真机部署。</p>
<h1 id="方案验证"><a class="markdownIt-Anchor" href="#方案验证"></a> 方案验证</h1>
<h2 id="高层vlm"><a class="markdownIt-Anchor" href="#高层vlm"></a> 高层VLM</h2>
<p>目标：完成自然语言到中间动作指令的转化，在简单任务（如移动）上不依赖机器人特定形态。</p>
<blockquote>
<p>使用VLM完成Navigation任务，实则更接近VLA而不是VLN，前者更关注场景内容理解与交互，后者则专注于路径规划。</p>
</blockquote>
<p>采用开源VLM模型微调。</p>
<ol>
<li>openVLA：直接输出端到端数据，依赖特定形态，不适用</li>
<li>LLaVA：本地部署7B模型，对空间感知太差，且运行速度达不到要求（约1item/min）<br />
<img src="38e9ec5b7887664537beb0c9d5a62fe.png" alt="" /></li>
<li>Qwen-72B：直接暴力增加参数数量，缺点是无法本地部署，优点是在特定场景效果较好，不需要微调即可进行一定程度的空间感知：<br />
<img src="3f6642022c7feaccc5f15bd4a10cd16.png" alt="" /><br />
对Qwen-72B进行数据采集并微调：前后手动拍摄了80+场景照片与对应描述prompt，使用官方api进行微调，可惜微调后的模型部署太贵（160r/h），最终放弃。</li>
</ol>
<p>转变方案：不要求VLM实现精确的位置估计（尤其是不使用深度相机的情况下），而是粗略判断距离，输出下一步的任务指令。这样原生的Qwen-72B就可以实现了。</p>
<h2 id="低层ppo"><a class="markdownIt-Anchor" href="#低层ppo"></a> 低层PPO</h2>
<p>目标：完成中间动作指令到机器人关节角度与力矩的转化，可能的情况下实现这部分的跨形态（未验证，需要解决变长输出的问题）。<br />
RL主要针对四足机器人，实现一个基于Stable-Baselines3的mujoco仿真环境进行训练。基本要求是保持平稳的情况下直走、转弯，考虑到VLM频率很低（1item/s），后续需要加一个速度的跟踪用来实时避障，这部分也由RL实现。</p>
<h1 id="项目进度"><a class="markdownIt-Anchor" href="#项目进度"></a> 项目进度</h1>
<ul>
<li>week1：仿真场景搭建，足式、轮式机器人<strong>建模与控制测试</strong><br />
<img src="%E5%BD%95%E5%B1%8F_20250204_192948.gif" alt="" /></li>
<li>week2：搭建高层<strong>VLM</strong>，完成多模态控制目标输入，实现生成中间指令正确率&gt;80%，X5RDK完成轮式<strong>sim2real</strong>优化与演示<br />
<img src="can_track.gif" alt="" /></li>
<li>week3：部署低层四足PPO策略训练仿真，初步完成跨形态任务测试<br />
2.20仿真：<br />
<img src="bittle_walk.webp" alt="" /><br />
2.21实机：<br />
<img src="bittle_change.webp" alt="" /></li>
<li>week4：尝试3dgs场景下的高精度仿真<br />
<img src="Air11F_3dgs.gif" alt="" /></li>
</ul>
<h1 id="问题记录"><a class="markdownIt-Anchor" href="#问题记录"></a> 问题记录</h1>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目</tag>
        <tag>人工智能</tag>
        <tag>强化学习</tag>
        <tag>四足机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>配置CUDA-Pytorch全家桶问题记录</title>
    <url>/posts/3168300427/</url>
    <content><![CDATA[<h1 id="环境"><a class="markdownIt-Anchor" href="#环境"></a> 环境</h1>
<h2 id="1-error-could-not-build-wheels-for-opencv-python-which-use-pep-517-and-cannot-be-installed-directly"><a class="markdownIt-Anchor" href="#1-error-could-not-build-wheels-for-opencv-python-which-use-pep-517-and-cannot-be-installed-directly"></a> 1. ERROR: Could not build wheels for opencv-python which use PEP 517 and cannot be installed directly</h2>
<p>安装opencv-python时出现，伴随scikit-build could not get a working generator for your system. Aborting build.<br />
解决：升级pip到最新版即可<code>python -m pip install --upgrade pip</code></p>
<span id="more"></span>
<h2 id="2-building-wheel-for-pyglm-pyprojecttoml-error"><a class="markdownIt-Anchor" href="#2-building-wheel-for-pyglm-pyprojecttoml-error"></a> 2. Building wheel for PyGlm (pyproject.toml) … error</h2>
<blockquote>
<p>error: subprocess-exited-with-error<br />
× Building wheel for PyGlm (pyproject.toml) did not run successfully.</p>
</blockquote>
<p>缺失了某些依赖模块，所以安装报错。<br />
我的默认python版本是3.8，pyglm不支持了，换python版本到3.10解决。（直接把环境变量放最前面重新pip装一遍）</p>
<h2 id="3-no-cuda-runtime-is-found-using-cuda_homecprogram-filesnvidia-gpu-computing-toolkitcudav118"><a class="markdownIt-Anchor" href="#3-no-cuda-runtime-is-found-using-cuda_homecprogram-filesnvidia-gpu-computing-toolkitcudav118"></a> 3.   No CUDA runtime is found, using CUDA_HOME=‘C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8’</h2>
<p>检查cuda: cuda不可用(torch.cuda.is_available()返回false)<br />
重建一个conda环境安装pytorch：<br />
先<code>python -V</code>查看python版本，<br />
再去pytorch官网复制下载链接安装pytorch；<br />
如果有本地whl包：</p>
<ol>
<li><code>cd [whl位置]</code></li>
<li><code>pip install torch-2.2.1+cu118-cp310-cp310-win_amd64.whl</code></li>
</ol>
<h2 id="4-running-setuppy-install-for-diff-gaussian-rasterization-error"><a class="markdownIt-Anchor" href="#4-running-setuppy-install-for-diff-gaussian-rasterization-error"></a> 4.   Running <a href="http://setup.py">setup.py</a> install for diff-gaussian-rasterization … error</h2>
<blockquote>
<p>error: subprocess-exited-with-error<br />
× Running <a href="http://setup.py">setup.py</a> install for diff-gaussian-rasterization did not run successfully.</p>
</blockquote>
<p>原因就是上面的cuda没弄好，确保版本匹配。</p>
<h2 id="5-userwarning-attempted-to-use-ninja-as-the-buildextension-backend-but-we-could-not-find-ninja-falling-back-to-using-the-slow-distutils-backend"><a class="markdownIt-Anchor" href="#5-userwarning-attempted-to-use-ninja-as-the-buildextension-backend-but-we-could-not-find-ninja-falling-back-to-using-the-slow-distutils-backend"></a> 5. UserWarning: Attempted to use ninja as the BuildExtension backend but we could not find ninja… Falling back to using the slow distutils backend.</h2>
<p><code>pip install ninja</code></p>
<h2 id="6-unsupported-microsoft-visual-studio-version-only-the-versions-between-2017-and-2022"><a class="markdownIt-Anchor" href="#6-unsupported-microsoft-visual-studio-version-only-the-versions-between-2017-and-2022"></a> 6.  unsupported Microsoft Visual Studio version! Only the versions between 2017 and 2022</h2>
<p>解决方法：<br />
进入-&gt;<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8\include\crt</code><br />
在<code>host_config.h</code>搜索</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> _MSC_VER <span class="string">&lt; 1910 || _MSC_VER &gt;</span>= 1930</span></span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> _MSC_VER <span class="string">&lt; 1910 || _MSC_VER &gt;</span>= 2030</span></span><br></pre></td></tr></table></figure>
<h2 id="7-unable-to-register-cudnn-factory-attempting-to-register-factory-for-plugin-cudnn-when-one-has-already-been-registered"><a class="markdownIt-Anchor" href="#7-unable-to-register-cudnn-factory-attempting-to-register-factory-for-plugin-cudnn-when-one-has-already-been-registered"></a> 7.  Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered</h2>
<p>服务器上运行Octo时遇到。</p>
<h2 id="8-userwarning-error-checking-compiler-version-for-cl-winerror-2-系统找不到指定的文件"><a class="markdownIt-Anchor" href="#8-userwarning-error-checking-compiler-version-for-cl-winerror-2-系统找不到指定的文件"></a> 8. UserWarning: Error checking compiler version for cl: WinError 2 系统找不到指定的文件。</h2>
<p>找不到cl.exe，这是一个类似编译器的东西，解决方法：先下载Visual Studio，再去安装目录找到附带的cl.exe，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\14.42.34433\bin\Hostx86\x86\cl.exe</span><br></pre></td></tr></table></figure>
<p>把它所在位置加入系统环境变量，重启cmd输入：cl，有响应即成功。</p>
<h2 id="9-attributeerror-module-torchlibrary-has-no-attribute-register_fake"><a class="markdownIt-Anchor" href="#9-attributeerror-module-torchlibrary-has-no-attribute-register_fake"></a> 9. AttributeError: module ‘torch.library’ has no attribute ‘register_fake’</h2>
<p>原因：由于torch版本过高或者torchvision版本过低导致的不匹配。<br />
版本对应表参考：<a href="https://blog.csdn.net/shiwanghualuo/article/details/122860521">PyTorch中torch、torchvision、torchaudio、torchtext版本对应关系</a><br />
所以先看torch版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip list | grep torch</span><br></pre></td></tr></table></figure>
<p>再降级torchversion：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install torchvision==0.17.0</span><br></pre></td></tr></table></figure>
<p>但是降级完torchvision之后很可能发现pytorch本身又寄了（变成cpu版本），<br />
所以再次回到上述第3条的位置，用本地whl重装一下gpu版本的pytorch，问题解决。</p>
<h2 id="10-终端中运行-conda-install-命令后一直卡在solving-environment"><a class="markdownIt-Anchor" href="#10-终端中运行-conda-install-命令后一直卡在solving-environment"></a> 10. 终端中运行 conda install 命令后一直卡在Solving environment:</h2>
<p>问题描述：正常创建激活环境，安装pytorch以及cuda：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.13.0 torchvision==0.14.0 torchaudio==0.13.0 pytorch-cuda=11.6 -c pytorch -c nvidia</span><br></pre></td></tr></table></figure>
<p>卡死在Solving environment：<br />
<img src="%E9%85%8D%E7%BD%AECUDA-Pytorch%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.png" alt="" /><br />
解决思路：如果正在使用服务器，<strong>不要在无卡模式进行上述操作</strong>。<br />
<code>pytorch-cuda=11.6</code>会<strong>明确要求安装 CUDA 11.6 对应的 GPU 版本</strong>，Conda 在解析依赖时，可能会尝试检测系统的 GPU 或驱动支持，如果此时没有显卡（即Nvidia驱动）会卡死退出。<br />
所以更换正常模式开机，清理缓存后重新装就可以了。</p>
<p>如果不是上述原因，其余排查思路：</p>
<ol>
<li>更新conda：在base环境中执行<code>conda update conda</code></li>
<li>清理缓存：<code>conda clean --all</code></li>
<li>AotuDL学术加速：<code>source /etc/network_turbo</code></li>
<li>查看源、删除原来的源、添加清华源：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --show</span><br><span class="line"></span><br><span class="line">conda config --remove-key channels</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br></pre></td></tr></table></figure>
<p>上述清华源官方：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</a><br />
最好每次换源之前都查一下，确保使用最新的有效的链接。</p>
<h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1>
<h2 id="1-error-too-few-arguments-for-template-template-parameter-tuple"><a class="markdownIt-Anchor" href="#1-error-too-few-arguments-for-template-template-parameter-tuple"></a> 1. error : too few arguments for template template parameter Tuple</h2>
<h2 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案：</h2>
<p>将cast.h中报错信息相应位置附近，注释掉以下内容<br />
<img src="%E9%85%8D%E7%BD%AECUDA-Pytorch%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95_2025011933.png" alt="" /><br />
重新 python <a href="http://setup.py">setup.py</a> build 命令，编译通过</p>
<h2 id="2-attributeerror-module-time-has-no-attribute-clock"><a class="markdownIt-Anchor" href="#2-attributeerror-module-time-has-no-attribute-clock"></a> 2. AttributeError module ‘time‘ has no attribute ‘clock‘</h2>
<p>Python3.X版本之后不支持<code>time.clock</code>，找到报错的文件用<code>time.perf_counter()</code>替换掉<code>time.clock</code>即可</p>
<h2 id="3-osmkdir时出现filenotfounderror-系统找不到指定的路径"><a class="markdownIt-Anchor" href="#3-osmkdir时出现filenotfounderror-系统找不到指定的路径"></a> 3. os.mkdir()时出现FileNotFoundError:  系统找不到指定的路径</h2>
<p>其中的一个原因是因为<code>os.mkdir()</code>只能创建一级目录，应该用<code>os.makedirs()</code>创建多级目录。将代码改为<code>os.makedirs()</code>即可</p>
<h2 id="4-runtimeerror-program-ffmpeg-is-not-found-perhaps-install-ffmpeg-using-apt-install-ffmpeg"><a class="markdownIt-Anchor" href="#4-runtimeerror-program-ffmpeg-is-not-found-perhaps-install-ffmpeg-using-apt-install-ffmpeg"></a> 4. RuntimeError: Program ‘ffmpeg’ is not found; perhaps install ffmpeg using ‘apt install ffmpeg’.</h2>
<p><code>conda install ffmpeg -c conda-forge</code><br />
连接好网络，注意看清楚安装成功。</p>
<h1 id="rdk-x5配置"><a class="markdownIt-Anchor" href="#rdk-x5配置"></a> RDK X5配置</h1>
<h2 id="1-rdk-studio添加设备后按教程无法连接wifi"><a class="markdownIt-Anchor" href="#1-rdk-studio添加设备后按教程无法连接wifi"></a> 1. RDK Studio添加设备后按教程无法连接wifi</h2>
<p>一些wifi的安全策略似乎会阻止来自RDK Studio的连接，而RDK Studio不会报错。尝试使用ssh登录终端，然后使用以下命令手动连接：（<strong>WIFINAME</strong>和<strong>WIFIPASSWORD</strong>替换为wifi名称和密码）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmcli con add con-name &quot;WIFINAME&quot; ifname wlan0 type wifi ssid &quot;WIFINAME&quot;</span><br><span class="line"></span><br><span class="line">nmcli --ask con mod &quot;WIFINAME&quot; wifi-sec.key-mgmt wpa-psk wifi-sec.psk &quot;WIFIPASSWORD&quot;</span><br><span class="line"></span><br><span class="line">nmcli con up &quot;WIFINAME&quot;</span><br></pre></td></tr></table></figure>
<p>已测试成功：<br />
<img src="%E9%85%8D%E7%BD%AECUDA-Pytorch%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95_2025011922.png" alt="" /></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>高通CamX-CHI 代码调用图</title>
    <url>/posts/2460560126/</url>
    <content><![CDATA[<span id="more"></span>
<p><img src="1721831630962.png" alt="" /></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>强化学习综述</title>
    <url>/posts/875554728/</url>
    <content><![CDATA[<h1 id="第一篇"><a class="markdownIt-Anchor" href="#第一篇"></a> 第一篇</h1>
<p>一个具身智能体的行动可以分为“感知-决策-行动-反馈”四个步骤，分别由四个模块完成，并形成一个闭环。</p>
<ul>
<li>感知：传感器，用于获取环境信息，如雷达、深度相机、麦克风。</li>
<li>决策：“大模型”，输入目标与指令，输出决策指令（导航路线、动作序列等）。
<ul>
<li>VLA：Vision-Language-Action，输出动作</li>
<li>VLN：Vision-Language-Nevigation，输出路线</li>
</ul>
</li>
<li>行动：三种思路：
<ul>
<li>决策调用行动：行动被写成算法以供决策模块调用，缺点泛化能力差</li>
<li>决策与行动协同：行动的同时获取实时信息，使决策不断优化，缺点吃算力</li>
<li>决策与行动融合：端到端，利用多模态技术发展直接从感知推理出环境变化，以及相应的动作序列。是未来发展的方向。优点泛化能力强，通用。</li>
</ul>
</li>
<li>反馈：为上述每一个环节提供反馈。<br />
<img src="file-20250125221901871.png" alt="" /></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
